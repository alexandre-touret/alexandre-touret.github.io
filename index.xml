<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Alexandre Touret's Blog</title><link>https://blog.touret.info/</link><description>Alexandre Touret's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright><lastBuildDate>Tue, 16 Jan 2024 19:00:43 +0100</lastBuildDate><atom:link href="https://blog.touret.info/index.xml" rel="self" type="application/rss+xml"/><item><title>Mastering Observability: Empowering Developers from Zero to Hero with Spring &amp; the Grafana stack</title><link>https://blog.touret.info/2024/01/16/observability-from-zero-to-hero/</link><pubDate>Tue, 16 Jan 2024 19:00:43 +0100</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2024/01/16/observability-from-zero-to-hero/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2024/01/felipe-correia-ScQngs6oO1E-unsplash.webp" referrerpolicy="no-referrer">
            </div><h2 id="the-sad-reality" class="headerLink">
    <a href="#the-sad-reality" class="header-mark"></a>1 The sad reality</h2><p>Picture this: it&rsquo;s Friday afternoon, and you&rsquo;re eagerly looking forward to unwinding for the weekend.
Suddenly, an Ops engineer alerts you about a critical issue—a stubborn HTTP 500 error that&rsquo;s causing a major roadblock.</p>
<p>Despite the dedicated efforts of the Ops engineers, the root cause remains elusive due to a lack of contextual information.</p>
<p>Hours pass by, but you take it upon yourself to delve into the problem.
Eventually, after reproducing and debugging the issue on your computer, you uncover the issue.</p>
<p>Does this sound like science fiction? If you&rsquo;ve experienced a similar scenario, you&rsquo;re likely familiar with the challenges posed by unidentified end users and their unique usage patterns—enter Ops and observability!</p>
<p>I&rsquo;ve previously delved into the topic of observability.
Here are a bunch of articles I wrote on this blog or on the <a href="https://blog.worldline.tech" target="_blank" rel="noopener noreferrer">Worldline Tech Blog</a>:</p>
<ul>
<li><a href="https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/" target="_blank" rel="noopener noreferrer">Enhancing Asynchronous Transaction Monitoring: Implementing Distributed Tracing in Apache Camel Applications with OpenTelemetry</a></li>
<li><a href="https://blog.touret.info/2021/07/26/observabilite-et-circuit-breaker-avec-spring/" target="_blank" rel="noopener noreferrer">Observabilité et Circuit Breaker avec Spring</a></li>
<li><a href="https://blog.worldline.tech/2021/09/22/enabling_distributed_tracing_in_spring_apps.html" target="_blank" rel="noopener noreferrer">Enabling distributed tracing on your microservices Spring app using Jaeger and OpenTracing</a></li>
</ul>
<p>In this article, I aim to highlight the importance of putting in place observability during the earliest stages of a project.
I will then outline how to merge logs and traces from a good old <a href="https://spring.io/projects/spring-boot/" target="_blank" rel="noopener noreferrer">Spring Boot application</a> on the <a href="https://grafana.com/" target="_blank" rel="noopener noreferrer">Grafana Stack</a> to gain clearer insights into your platform&rsquo;s workings.
By doing so, you can transform your relationship with Ops teams, making them your best friends.</p>
<div class="details admonition question open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-question-circle fa-fw"></i>What about the code?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The examples provided in this article come from <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero" target="_blank" rel="noopener noreferrer">this project hosted on Github</a>.</div>
        </div>
    </div>
<h2 id="a-definition-of-observability" class="headerLink">
    <a href="#a-definition-of-observability" class="header-mark"></a>2 A definition of Observability</h2><p>We can shortly define it as this:</p>
<blockquote>
<p>Observability is the ability <strong>to understand the internal state of a complex system</strong>.
When a system is observable, a user can <strong>identify the root cause</strong> of a performance problem by examining the data it produces, without additional testing or coding.</p>
<p>This is one of the ways in which <strong>quality of service</strong> issues can be addressed.</p>
</blockquote>
<h2 id="a-short-presentation-of-the-grafana-stack" class="headerLink">
    <a href="#a-short-presentation-of-the-grafana-stack" class="header-mark"></a>3 A short presentation of the Grafana stack</h2><p><a href="https://grafana.com/oss/" target="_blank" rel="noopener noreferrer">The Grafana stack</a> aims at a tool which allows you to query, visualise, alert and explore all of your metrics.
You can aggregate them through a <a href="https://grafana.com/docs/grafana/latest/datasources/" target="_blank" rel="noopener noreferrer">wide range of data sources</a>.
With regard to the topic of this article,it will provide us all you need to collect logs, metrics and traces (and beyond) to monitor and understand the behaviour of your platforms.</p>
<p>I will therefore particularly focus on:</p>
<ul>
<li><a href="https://grafana.com/oss/grafana/" target="_blank" rel="noopener noreferrer">Grafana</a>: The dashboard engine</li>
<li><a href="https://grafana.com/oss/loki/" target="_blank" rel="noopener noreferrer">Loki</a>: The log storage engine</li>
<li><a href="https://grafana.com/oss/tempo/" target="_blank" rel="noopener noreferrer">Tempo</a>: The trace storage engine</li>
</ul>
<p>By the way, I also configured in this project a <a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener noreferrer">Prometheus TSDB to store metrics</a>.</p>
<p>To get it started easily, I just created a <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/tree/main/docker" target="_blank" rel="noopener noreferrer">Docker Compose stack to run it on your desktop</a>.</p>
<p>You can run it with these commands:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> docker
</span></span><span class="line"><span class="cl">docker compose up
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="logs-traces--monitoring" class="headerLink">
    <a href="#logs-traces--monitoring" class="header-mark"></a>4 Logs, Traces &amp; Monitoring</h2><p>Let&rsquo;s go back to the basics: To make a system fully observable, the following abilities must be implemented:</p>
<ul>
<li>Logs</li>
<li>Traces</li>
<li>Metrics</li>
</ul>
<p>They can be defined as follows:</p>
<p><figure><img
        
        loading="lazy"
        src="/assets/images/2024/01/image-2023-8-1_9-44-11.webp"
        srcset="/assets/images/2024/01/image-2023-8-1_9-44-11.webp, /assets/images/2024/01/image-2023-8-1_9-44-11.webp 1.5x, /assets/images/2024/01/image-2023-8-1_9-44-11.webp 2x"
        sizes="auto"
        alt="monitoring"
        title="monitoring" ></figure></p>
<h2 id="logs" class="headerLink">
    <a href="#logs" class="header-mark"></a>5 Logs</h2><p>When a program fails, OPS usually tries to identify the underlying error analyzing log files.
It could be either reading the application log files or using a log aggregator such as Elastic Kibana or Splunk.</p>
<p>In my opinion, most of the time developers don&rsquo;t really care about this matter.
It is mainly due to they did not experience such a trouble.</p>
<p>For two years, I had to administrate a proprietary customer relationship management solution.
The only way to analyse errors was navigating through the logs, using the most appropriate error levels to get the root cause.
We didn&rsquo;t have access to the source code (Long live to open source programs).
Hopefully the log management system was really efficient.
It helped us get into this product and administrate it efficiently.</p>
<p>Furthermore, I strongly think we should systematise such experiences for developers.
It could help them (us) know what is behind the curtain and make more observable and better programs.</p>
<h3 id="key-principles" class="headerLink">
    <a href="#key-principles" class="header-mark"></a>5.1 Key principles</h3><p>You must first dissociate the logs you make while you code (e.g., for debugging) from the production logs.
The first should normally remove the first.
For the latter, you should apply some of these principles:</p>
<ul>
<li>Identify and use the most appropriate level (<code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>,&hellip;)</li>
<li>Provide a clear and useful message for OPS (yes you make this log for him/her)</li>
<li>Provide business context (e.g., the creation of the contract <code>123456</code> failed)</li>
<li>Logs must be read by an external tool (e.g., using a log aggregator)</li>
<li>Logs must not expose sensitive data: You must think about GDPR, PCI DSS standards</li>
</ul>
<p>If you want to dig into log levels and the importance to indicate contextual information into your logs, I suggest you reading <a href="https://blog.worldline.tech/2020/01/22/back-to-basics-logging.html" target="_blank" rel="noopener noreferrer">this article from my colleague Nicolas Carlier</a>.</p>
<h2 id="what-about-grafana-loki" class="headerLink">
    <a href="#what-about-grafana-loki" class="header-mark"></a>6 What about Grafana Loki</h2><p>For this test, I chose to use <a href="https://github.com/loki4j/loki-logback-appender" target="_blank" rel="noopener noreferrer">loki-logback-appender</a> to send the logs to Loki.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>About this appender<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I chose to use this appender for testing purpose.
If you deploy your application on top of Kubernetes, you would probably opt for a more suitable solution such as <a href="https://www.fluentd.org/" target="_blank" rel="noopener noreferrer">FluentD</a>.</div>
        </div>
    </div>
<p>The configuration for a Spring Boot application is pretty straightforward:</p>
<p>You must add first the appender to your classpath:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;com.github.loki4j:loki-logback-appender:1.4.2&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>and create a <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero-/blob/main/src/main/resources/logback-spring.xml" target="_blank" rel="noopener noreferrer"><code>logback-spring.xml</code></a> to configure it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"> <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&#34;LOKI&#34;</span> <span class="na">class=</span><span class="s">&#34;com.github.loki4j.logback.Loki4jAppender&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;http&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;url&gt;</span>http://localhost:3100/loki/api/v1/push<span class="nt">&lt;/url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/http&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;format&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;label&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;pattern&gt;</span>app=${name},host=${HOSTNAME},level=%level<span class="nt">&lt;/pattern&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;readMarkers&gt;</span>true<span class="nt">&lt;/readMarkers&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/label&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;message&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;pattern&gt;</span>
</span></span><span class="line"><span class="cl">                    {&#34;level&#34;:&#34;%level&#34;,&#34;class&#34;:&#34;%logger{36}&#34;,&#34;thread&#34;:&#34;%thread&#34;,&#34;message&#34;: &#34;%message&#34;,&#34;requestId&#34;: &#34;%X{X-Request-ID}&#34;}
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/pattern&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/message&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/format&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/appender&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>Et voilà!</em></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>About the format<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">It is just my 2 cents: more and more I tend to produce structured logs using JSON for instance.
It is usually easier to manipulate them all along the log ingestion tools chain (e.g, with <a href="https://www.elastic.co/fr/logstash/" target="_blank" rel="noopener noreferrer">LogStash</a>.</div>
        </div>
    </div>
<p>After restarting your application:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gradle bootRun
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can now get logs browsing Grafana reaching this URL: <a href="http://localhost:3000/goto/M-VkkicSR?orgId=1" target="_blank" rel="noopener noreferrer">http://localhost:3000/goto/M-VkkicSR?orgId=1</a> and running some API calls with the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http :8080/api/events
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="traces" class="headerLink">
    <a href="#traces" class="header-mark"></a>7 Traces</h2><p>Upon initial inspection, one might consider the existing setup sufficient. However, I highly recommend delving into the realm of <a href="https://research.google/pubs/pub36356/" target="_blank" rel="noopener noreferrer">Distributed Tracing</a>, a technology I have previously introduced (refer to the aforementioned discussion).
Not only it will be first really useful when you deploy distributed architectures but also for the other kind of platforms.</p>
<p>The true value of distributed tracing becomes evident not only in the deployment of distributed architectures but across various platforms. In the complex landscape of production issues, identifying the root cause or understanding why a specific SQL query failed or took an extended duration can be challenging. Traditionally, attempts to replicate such issues in alternative environments often fall short due to the inherent complexities of data, server configurations, and benchmarking.</p>
<p>This technology empowers you to gain valuable insights that were previously elusive. When grappling with production issues, you no longer need to rely solely on replication efforts; distributed tracing provides a clear and comprehensive perspective on what might be amiss.</p>
<p>To sum up: <em>Try it, you&rsquo;ll like it!</em></p>
<h3 id="the-setup" class="headerLink">
    <a href="#the-setup" class="header-mark"></a>7.1 The setup</h3><p>There is several ways to set it up.
Nowadays, OpenTelemetry is the <em>de facto</em> standard.
Most of the solutions are compatible with it.</p>
<p>Nevertheless, after challenging some APMs, I found some missing features which are really useful in real life projects.
For instance, you can not easily ignore URLs, for instance the actuator endpoints, from the traces you will manage.
You can do that in just <a href="https://www.elastic.co/guide/en/apm/agent/java/1.x/config-http.html#config-transaction-ignore-urls" target="_blank" rel="noopener noreferrer">one property with the Elastic APM agent</a>.
There is <a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/1060#issuecomment-1816716602" target="_blank" rel="noopener noreferrer">an issue about this feature</a>.</p>
<p>I suggest using the agents.
It is less intrusive than other solutions.</p>
<p>For instance if you use the spring boot gradle plugin you can configure it as following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span> <span class="s1">&#39;org.springframework.boot&#39;</span> <span class="n">version</span> <span class="s1">&#39;3.2.1&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span> <span class="s1">&#39;io.spring.dependency-management&#39;</span> <span class="n">version</span> <span class="s1">&#39;1.1.4&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ext</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">opentelemetryAgentVersion</span> <span class="o">=</span> <span class="s1">&#39;1.32.0&#39;</span> <span class="c1">// Mettez la version appropriée
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;info.touret.observability&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;0.0.1-SNAPSHOT&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">java</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="s1">&#39;21&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mavenCentral</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">testImplementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-test&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;com.github.loki4j:loki-logback-appender:1.4.2&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;io.opentelemetry.javaagent:opentelemetry-javaagent:${opentelemetryAgentVersion}&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">copyJavaAgent</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Copy</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">detachedConfiguration</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">dependencies</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&#34;io.opentelemetry.javaagent:opentelemetry-javaagent:${opentelemetryAgentVersion}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">into</span> <span class="s2">&#34;${project.getLayout().getBuildDirectory()}/javaagents&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rename</span> <span class="o">{</span> <span class="s1">&#39;javaagent.jar&#39;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">processResources</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">copyJavaAgent</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bootRun</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">doFirst</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">jvmArgs</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;-javaagent:${project.getLayout().getBuildDirectory()}/javaagents/javaagent.jar&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// systemProperties = [
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     &#39;otel.traces.sampler&#39;: &#39;parentbased_traceidratio&#39;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     &#39;otel.traces.sampler.arg&#39;: &#39;0.2&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="n">tasks</span><span class="o">.</span><span class="na">named</span><span class="o">(</span><span class="s1">&#39;test&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">useJUnitPlatform</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After restarting your application, you can reach the API with this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http :8080/api/events
</span></span></code></pre></td></tr></table>
</div>
</div><p>This API is really simple.
To illustrate how to handle errors using both the Spring stack and the Grafana stack, an error is always thrown using <a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-ann-rest-exceptions.html" target="_blank" rel="noopener noreferrer">the Problem Detail RFC 7807</a> while reaching it.</p>
<p>Here the <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/blob/main/src/main/java/info/touret/observability/observabilityfromzerotohero/ObservabilityService.java" target="_blank" rel="noopener noreferrer">service</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ObservabilityService</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">breakMethod</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">IllegalStateException</span><span class="p">(</span><span class="s">&#34;Breaking method issue&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>And the <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/blob/main/src/main/java/info/touret/observability/observabilityfromzerotohero/ObservabilityAPIController.java" target="_blank" rel="noopener noreferrer">controller</a> which returns the error:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@GetMapping</span><span class="p">(</span><span class="s">&#34;/api/event&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ObservabilityEventDto</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">getEvent</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">ErrorResponseException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">observabilityService</span><span class="p">.</span><span class="na">breakMethod</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">var</span><span class="w"> </span><span class="n">observabilityEventDto</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ObservabilityEventDto</span><span class="p">(</span><span class="n">UUID</span><span class="p">.</span><span class="na">randomUUID</span><span class="p">().</span><span class="na">toString</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;OK&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">ResponseEntity</span><span class="p">.</span><span class="na">ok</span><span class="p">(</span><span class="n">observabilityEventDto</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">var</span><span class="w"> </span><span class="n">observabilityEventDto</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ObservabilityEventDto</span><span class="p">(</span><span class="n">UUID</span><span class="p">.</span><span class="na">randomUUID</span><span class="p">().</span><span class="na">toString</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;Error&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">LOGGER</span><span class="p">.</span><span class="na">error</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="na">getMessage</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ErrorResponseException</span><span class="p">(</span><span class="n">HttpStatus</span><span class="p">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="p">,</span><span class="w"> </span><span class="n">ProblemDetail</span><span class="p">.</span><span class="na">forStatus</span><span class="p">(</span><span class="n">HttpStatus</span><span class="p">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="p">),</span><span class="w"> </span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>After testing this service a few times, you can now see the traces on your Grafana dashboard.</p>
<h3 id="head-or-tail-sampling" class="headerLink">
    <a href="#head-or-tail-sampling" class="header-mark"></a>7.2 Head or Tail sampling?</h3><p>One significant drawback of implementing this technology lies in the potential performance overhead it introduces to the instrumented application. In cases where high-pressure APIs generate or broadcast SPANs for every transaction, there&rsquo;s a substantial risk of significantly impacting the <a href="https://sre.google/sre-book/service-level-objectives/" target="_blank" rel="noopener noreferrer">Service Level Objectives (SLOs)</a> of your platform.</p>
<p>A viable solution to mitigate this challenge involves sampling the traces, such as retaining only 20% of the transactions. There are two primary approaches:</p>
<ol>
<li>
<p><strong>Head Sampling</strong>: In this method, SPANs are sampled and filtered directly from the producer (e.g., a backend). This is essential for heavily utilized platforms and proves to be the most efficient, as it produces only the necessary spans, thereby avoiding the dissemination of unnecessary SPANs. However, it comes with the trade-off of potentially losing critical traces involving failures. The sampling rate is purely statistical (e.g., 10 or 20% of SPANs sampled and broadcast).</p>
</li>
<li>
<p><strong>Tail Sampling</strong>: Alternatively, SPANs are sampled retrospectively, often through tools like the <a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noopener noreferrer">Open Telemetry Collector</a>. While this method allows for filtering SPANs based on various criteria, such as the transaction status, it does not address the overhead issue. All SPANs are initially broadcast and then filtered, making it less suitable for heavily used scenarios.</p>
</li>
</ol>
<p>Both approaches have their pros and cons, and the choice depends on the specific requirements of the platform. For an in-depth exploration of this issue, you can refer to <a href="https://uptrace.dev/opentelemetry/sampling.html#what-is-sampling" target="_blank" rel="noopener noreferrer">this article</a>.</p>
<h2 id="correlating-logs--traces" class="headerLink">
    <a href="#correlating-logs--traces" class="header-mark"></a>8 Correlating Logs &amp; Traces</h2><p>Now, you have on one side the logs of your applications, and on the other the traces.
To dig into errors and see what is behind the curtain of any error logged, it is really import to correlate both.</p>
<p>For that, you must specify in your logs the traceID and spanID of the corresponding trace.
Hopefully, logback and the Loki appender can help you on this!
We therefore will modify the pattern of the logs in the <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero-/blob/main/src/main/resources/logback-spring.xml" target="_blank" rel="noopener noreferrer"><code>logback-spring.xml</code></a> file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;pattern&gt;</span>
</span></span><span class="line"><span class="cl">    {&#34;level&#34;:&#34;%level&#34;,&#34;TraceID&#34;:&#34;%mdc{trace_id:-none}&#34;,&#34;spanId&#34;:&#34;%mdc{span_id:-none}&#34;,&#34;class&#34;:&#34;%logger{36}&#34;,&#34;thread&#34;:&#34;%thread&#34;,&#34;message&#34;: &#34;%message&#34;,&#34;requestId&#34;: &#34;%X{X-Request-ID}&#34;}
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/pattern&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As a developer point of view, the job is done :)
Now, it is time for the OPS/SRE to configure Grafana to link Loki and Tempo through the TraceID field.</p>
<p>For that, you can create a derived field directly in the datasource configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">datasources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">access</span><span class="p">:</span><span class="w"> </span><span class="l">proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://loki:3100</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">maxLines</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">derivedFields</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">matcherRegex</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;\&#34;TraceID\&#34;: \&#34;(\w+).*\&#34;&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">TraceID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># url will be interpreted as query for the datasource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;$${__value.raw}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># optional for URL Label to set a custom display label for the link.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">urlDisplayLabel</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;View Trace&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">access</span><span class="p">:</span><span class="w"> </span><span class="l">proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://tempo:3200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nodeGraph</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;mimir&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tracesToLogs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filterByTraceID</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filterBySpanID</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">mapTagNamesEnabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Now you will be able to browse directly to the corresponding trace from your log event and the other way around.</p>
<h2 id="metrics" class="headerLink">
    <a href="#metrics" class="header-mark"></a>9 Metrics</h2><p>Now, let us deep dive into the metrics of our application!
We can do that through <a href="https://prometheus.io/" target="_blank" rel="noopener noreferrer">Prometheus</a>.</p>
<p>We can configure now Prometheus to grab the metrics exposed by our application.</p>
<p>To do that, we need first to activate the Prometheus endpoint:</p>
<p>We need to add this dependency first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And enable the corresponding endpoint:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">management.endpoints.web.exposure.include</span><span class="o">=</span><span class="s">health,info,prometheus</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After enabling it, as a developer point of view, it is done :-)</p>
<p>The prometheus statistics can be scrapped by Prometheus itself using <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/blob/main/docker/prometheus/prometheus.yml" target="_blank" rel="noopener noreferrer">this configuration</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">honor_timestamps</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">15s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scrape_timeout</span><span class="p">:</span><span class="w"> </span><span class="l">10s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scheme</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">static_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">targets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">host.docker.internal:8080</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, you can directly browse it through Grafana to integrate all of these metrics into your dashboards 🎉.</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>10 Conclusion</h2><p>I endeavored to provide you with a comprehensive overview of what an OPS professional could anticipate while investigating an issue and the corresponding topics that require attention.
As you probably figured out, we only applied just a bunch of configuration sets.<br>
One of the key merits of these tools lies in their non-intrusiveness within the code itself.
To cut long story short: it is not a big deal!</p>
<p>Integrating these configurations can be a significant stride forward, providing invaluable assistance to the entire IT team, from development to operations, as they navigate and troubleshoot issues—whether in production or elsewhere.</p>
<p>I will finish this article by my opinion on such topics: regardless of the targeted tools, this set of configuration <strong>must be considered as the first feature to implement for every cloud native application</strong>.</p>
]]></description></item><item><title>Reflecting on 2023</title><link>https://blog.touret.info/2023/12/20/2023-wrap-up/</link><pubDate>Wed, 20 Dec 2023 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/12/20/2023-wrap-up/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2022/12/review.webp" referrerpolicy="no-referrer">
            </div><h2 id="2023-in-a-nutshell" class="headerLink">
    <a href="#2023-in-a-nutshell" class="header-mark"></a>1 2023 in a Nutshell</h2><p>As we approach 2024, it’s time to cast a professional eye back on 2023.</p>
<p>Throughout the year, I&rsquo;ve balanced work on a customer project alongside my contributions to the Worldline TechRel<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> initiative. Each involvement has fueled the other, offering a reciprocal flow of inspiration. Involvement in real-life projects has often sparked new ideas for talks and topics to delve into. In turn, my experiences in Dev Rel have offered fresh perspectives and external feedback, enriching the implementation process.</p>
<p>Highlights of my speaking engagements this year include:</p>
<ul>
<li>6 tech conferences</li>
<li>4 meetups</li>
<li>A Worldline tech event in Barcelona</li>
<li>An online presentation (i.e., <a href="http://www.brownbaglunch.fr/" target="_blank" rel="noopener noreferrer">BBL</a>) for <a href="https://www.abbeal.com/" target="_blank" rel="noopener noreferrer">ABBEAL</a></li>
</ul>
<p>This year, unlike the previous one, I found myself presenting two talks or a talk and a workshop at the same conference—a challenging but exciting experience! Consequently, I delivered a similar number of talks compared to 2022.</p>
<p>My primary topics this year included:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=m8DbVbMDe2w" target="_blank" rel="noopener noreferrer">Rest API Versioning</a></li>
<li><a href="https://youtu.be/vxwqD3KwdEY?si=n7L4p0USvdADFuct" target="_blank" rel="noopener noreferrer">The Hitchhiker&rsquo;s Guide to Software Architecture Design</a></li>
<li><a href="https://youtu.be/xLhb3mvweDI" target="_blank" rel="noopener noreferrer">The Architecture Katas</a></li>
</ul>
<p>Notably, I co-presented the second talk with my colleague <a href="https://fr.linkedin.com/in/raphaelsemeteys" target="_blank" rel="noopener noreferrer">Raphaël Semeteys</a>, extending my collaborative speaking initiatives that commenced in 2022 with <a href="https://fr.linkedin.com/in/jefrajames" target="_blank" rel="noopener noreferrer">Jean-François James</a> (I shared <a href="https://lyonjug.org/2023/02/21/architecture-katas-and-microservices.html" target="_blank" rel="noopener noreferrer">the stage with him at LyonJUG</a>).
This collaborative process has been immensely rewarding. It helps me push me beyond my comfort zone, enabling me to approach various topics from a fresh perspective.
A prime example was our exploration of discussing software architecture in a more light-hearted and unconventional manner, which initially seemed improbable to me.</p>
<p>In fact, I intend to explore more partnerships in the future.</p>
<p>Moreover, I participated in the recent <a href="http://jchateau.org/" target="_blank" rel="noopener noreferrer">JChateau Edition</a>, my initiation into the world of &ldquo;unconferences&rdquo; (<a href="https://www.junconf.org/" target="_blank" rel="noopener noreferrer">JunConf</a>)—an incredibly enriching experience! Interacting with inspiring individuals like <a href="https://www.linkedin.com/in/jmdoudoux/?lipi=urn%3Ali%3Apage%3Ad_flagship3_people_connections%3Bb0ogWmkZSA%2BqSqaqCW4rDw%3D%3D" target="_blank" rel="noopener noreferrer">Jean-Michel Doudoux</a>, <a href="https://www.linkedin.com/in/aalmiray/?lipi=urn%3Ali%3Apage%3Ad_flagship3_people_connections%3Bb0ogWmkZSA%2BqSqaqCW4rDw%3D%3D" target="_blank" rel="noopener noreferrer">Andres Almirez</a>, and <a href="https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/" target="_blank" rel="noopener noreferrer">José Paumard</a> was truly inspiring.</p>
<p>During the year, I released six articles on <a href="https://blog.touret.info/" target="_blank" rel="noopener noreferrer">my blog</a> and one on the <a href="https://blog.worldline.tech/authors/#alexandre-touret" target="_blank" rel="noopener noreferrer">Worldline engineering blog</a>.</p>
<p>I express my gratitude to my employer for the continued opportunities and to the organizers for their unwavering trust and hospitality. Your support has been instrumental in my journey.</p>
<p>The Worldline TechRel initiative has been instrumental in exploring new topics and facilitating collaborations with colleagues.
It has enabled me to share, gather feedback on submissions, and conduct live rehearsals (Thanks <a href="https://mariealiceblete.com/" target="_blank" rel="noopener noreferrer">Marie-Alice Blete</a> &amp; <a href="https://www.linkedin.com/in/philippe-vincent-732a3217/" target="_blank" rel="noopener noreferrer">Philippe Vincent</a> and the others).</p>
<p>Heartfelt thanks to all who have supported me along this journey!</p>
<h2 id="what-lies-ahead" class="headerLink">
    <a href="#what-lies-ahead" class="header-mark"></a>2 What Lies Ahead?</h2><p>Through the <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>Worldline TechRel initiative, I&rsquo;ve had the privilege of meeting exceptional individuals and advancing in various technical domains. Crafting and presenting talks on technical subjects demand in-depth knowledge, and this has already sparked ideas for the upcoming year.</p>
<p>Kicking off the new year with a bang, I am thrilled to announce a workshop at NDC London in late January (<a href="https://ndclondon.com/agenda/rest-apis-versioning-hands-on-0ah8/0srvy242ytv" target="_blank" rel="noopener noreferrer">details here</a>). Additionally, I will be co-presenting a new talk with <a href="malkav30.gitlab.io/" rel="">my colleague Philippe Duval</a> at <a href="https://touraine.tech" target="_blank" rel="noopener noreferrer">Touraine Tech</a>.</p>
<p>Wishing everyone a fantastic New Year&rsquo;s Eve, and if you come across this article in 2024: Happy New Year!!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>It’s akin to Dev Rel but aims to include a broader tech community encompassing OPS, SRE, etc.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Similar to Dev Rel, but aspires to involve all tech crew members (e.g., OPS &amp; SRE).&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item><item><title>Configuring WSL2 for Seamless Compatibility with Rancher Desktop</title><link>https://blog.touret.info/2023/11/09/rancher_desktop_wsl2/</link><pubDate>Thu, 09 Nov 2023 08:00:16 +0100</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/11/09/rancher_desktop_wsl2/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/11/carlo-borella-ozDrGigNQXY-unsplash.webp" referrerpolicy="no-referrer">
            </div><p>Just out of curiosity, I <a href="https://docs.rancherdesktop.io/getting-started/installation#installing-rancher-desktop-on-windows" target="_blank" rel="noopener noreferrer">downloaded and sat up Rancher Desktop on my laptop</a>.</p>
<p>I daily use <a href="https://docs.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a> and <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener noreferrer">Docker compose</a> on top of <a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noopener noreferrer">WSL2</a> using <em>home made mechanism/tooling</em>
I would then see if Rancher Desktop fits well in this case and could help me.</p>
<p>In this (very short) article, we&rsquo;ll go over the necessary steps to configure <a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noopener noreferrer">WSL2</a> Ubuntu virtual machines and Docker with Rancher Desktop.</p>
<p>If you want to get into Rancher Desktop in another way and discover how to install <a href="https://skaffold.dev/" target="_blank" rel="noopener noreferrer">Skaffold</a>, you <a href="https://malkav30.gitlab.io/posts/first-rancherdesktop-application-skaffold/" target="_blank" rel="noopener noreferrer">can read this article</a>.</p>
<h2 id="install--configure-rancher-desktop" class="headerLink">
    <a href="#install--configure-rancher-desktop" class="header-mark"></a>1 Install &amp; configure Rancher Desktop</h2><div id="id-1"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/11/rancher-desktop-logo.svg"
        srcset="/assets/images/2023/11/rancher-desktop-logo.svg, /assets/images/2023/11/rancher-desktop-logo.svg 1.5x, /assets/images/2023/11/rancher-desktop-logo.svg 2x"
        sizes="auto"
        alt="rancher desktop logo"
        title="rancher desktop logo" ></figure></div>
<p>The setup is quite straightforward.
Follow <a href="https://docs.rancherdesktop.io/getting-started/installation#installing-rancher-desktop-on-windows" target="_blank" rel="noopener noreferrer">the instructions provided in the official documentation</a> to get Rancher Desktop up and running on your Windows machine.
Rancher Desktop allows you to run Docker and Docker Compose seamlessly within a WSL2 environment.</p>
<p>During the setup process, I chose to install <a href="https://github.com/moby/moby" target="_blank" rel="noopener noreferrer">Moby</a> to use <a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a> and <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener noreferrer">Docker Compose</a>.</p>
<p>After installing Rancher Desktop, you will need to ensure your virtual machine (VM) is connected to expose the Docker daemon and related commands.
You can find detailed steps in the Rancher Desktop documentation under <a href="https://docs.rancherdesktop.io/ui/preferences/wsl/" target="_blank" rel="noopener noreferrer">WSL Preferences</a>.
Don&rsquo;t forget that in some cases, you may need to restart both WSL2 and Rancher Desktop for the changes to take effect.</p>
<h2 id="configure-docker-credential-store" class="headerLink">
    <a href="#configure-docker-credential-store" class="header-mark"></a>2 Configure Docker Credential Store</h2><p>When you start your Docker compose infrastructure and encounter an error like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Error saving credentials: error storing credentials - err: exit status 1,
</span></span></code></pre></td></tr></table>
</div>
</div><p>You&rsquo;ll need to configure Docker&rsquo;s credential store.
To resolve this issue, follow these steps:</p>
<ol>
<li>Inside your WSL2 VM, create or edit the <code>~/.docker/config.json</code> file.</li>
<li>Add the following content to the <code>config.json</code> file:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>                            
</span></span><span class="line"><span class="cl"><span class="nt">&#34;credsStore&#34;</span><span class="p">:</span> <span class="s2">&#34;wincred.exe&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>   
</span></span></code></pre></td></tr></table>
</div>
</div><p>This configuration points to the <code>docker-credential-wincred.exe</code> binary and will resolve the credential storage problem when using Docker.</p>
<h2 id="get-containers-output-in-the-console" class="headerLink">
    <a href="#get-containers-output-in-the-console" class="header-mark"></a>3 Get container&rsquo;s output in the console</h2><p>A common issue with Docker containers in Rancher Desktop is the lack of output in the console when running a container, such as with the command <code>docker run hello-world</code>.
This issue is well-documented in <a href="https://github.com/rancher-sandbox/rancher-desktop/issues/1558" target="_blank" rel="noopener noreferrer">this GitHub issue</a>.</p>
<p>To view the container&rsquo;s output in the console, you need to start your commands with the <code>-i</code> option. For example:</p>
<p>For instance:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker run -i hello-world
</span></span></code></pre></td></tr></table>
</div>
</div><p>This option tells Docker to attach to the container&rsquo;s standard input, allowing you to see the output directly in your console.</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>4 Conclusion</h2><p>I hope this article has been helpful for you, and you&rsquo;re now ready to <em>supercharge</em> your development workflow with Rancher Desktop and Docker!</p>
]]></description></item><item><title>Streamline Java Application Deployment: Pack, Ship, and Unlock Distributed Tracing with Elastic APM on Kubernetes</title><link>https://blog.touret.info/2023/11/01/pack-ship-java-deployment-distributed-tracing-elasticapm/</link><pubDate>Wed, 01 Nov 2023 08:00:00 +0200</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/11/01/pack-ship-java-deployment-distributed-tracing-elasticapm/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/10/claudio-schwarz-q8kR_ie6WnI-unsplash.webp" referrerpolicy="no-referrer">
            </div><p>In <a href="https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/" target="_blank" rel="noopener noreferrer">my last article</a>, I dug into <a href="https://www.w3.org/TR/trace-context/" target="_blank" rel="noopener noreferrer">Distributed Tracing</a> and exposed how to enable it in Java applications.
We didn&rsquo;t see yet how to deploy an application on Kubernetes and get distributed tracing insights.
Several strategies can be considered, but the main point is how to minimize the impact of deploying APM agents on the whole delivery process.</p>
<p>In this article, I will expose how to ship APM agents for instrumenting Java applications deployed on top of <a href="https://kubernetes.io/" target="_blank" rel="noopener noreferrer">Kubernetes</a> through <a href="https://www.docker.com/resources/what-container/" target="_blank" rel="noopener noreferrer">Docker containers</a>.</p>
<p>To make it clearer, I will illustrate this setup by the following use case:</p>
<ul>
<li>We have an API <em>&ldquo;My wonderful API&rdquo;</em> which is instrumented through an <a href="https://www.elastic.co/guide/en/apm/agent/index.html" target="_blank" rel="noopener noreferrer">Elastic APM agent</a>.</li>
<li>The data is then sent to the <a href="https://www.elastic.co/guide/en/apm" target="_blank" rel="noopener noreferrer">Elastic APM</a>.</li>
</ul>
<div id="id-1"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/10/architecture_system.svg"
        srcset="/assets/images/2023/10/architecture_system.svg, /assets/images/2023/10/architecture_system.svg 1.5x, /assets/images/2023/10/architecture_system.svg 2x"
        sizes="auto"
        alt="c4 context diagram"
        title="c4 context diagram" ></figure></div>
<p>Now, if we dive into the <em>&ldquo;Wonderful System&rdquo;</em>, we can see the <em>Wonderful Java application</em> and the agent:</p>
<div id="id-2"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/10/architecture_container.svg"
        srcset="/assets/images/2023/10/architecture_container.svg, /assets/images/2023/10/architecture_container.svg 1.5x, /assets/images/2023/10/architecture_container.svg 2x"
        sizes="auto"
        alt="c4 context diagram"
        title="c4 context diagram" ></figure></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Elastic APM vs Grafana/OpenTelemetry<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>In this article I delve into how to package an <a href="https://www.elastic.co/guide/en/apm/agent/java/current/configuration.html" target="_blank" rel="noopener noreferrer">Elastic APM agent</a> and enable Distributed Tracing with the <a href="https://www.elastic.co/guide/en/apm/index.html" target="_blank" rel="noopener noreferrer">Elastic APM suite</a>.</p>
<p>You can do that in the same way with an <a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation" target="_blank" rel="noopener noreferrer">OpenTelemetry Agent</a>.
Furthermore, <a href="https://www.elastic.co/fr/blog/native-opentelemetry-support-in-elastic-observability" target="_blank" rel="noopener noreferrer">Elastic APM is compatible with OpenTelemetry</a>.</p>
</div>
        </div>
    </div>
<p>We can basically implement this architecture in two different ways:</p>
<ol>
<li>Deploying the agent in all of our Docker images</li>
<li>Deploying the agent asides from the Docker images and using initContainers to bring the agent at the startup of our applications</li>
</ol>
<p>We will then see how to lose couple application docker images to the apm agent one.</p>
<h2 id="why-not-bringing-apm-agents-in-our-docker-images" class="headerLink">
    <a href="#why-not-bringing-apm-agents-in-our-docker-images" class="header-mark"></a>1 Why not bringing APM agents in our Docker images?</h2><p>It could be really tempting to put the APM agents in the application&rsquo;s Docker image.</p>
<p>Why?
Because you just have to add the following lines of code in our Docker images definition:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">RUN</span> mkdir /opt/agent<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./javaagent.jar /opt/agent/javaagent.jar<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Nonetheless, if you want to upgrade your agent, you will have to repackage it and redeploy all your Docker images.</p>
<p>For regular upgrades, it will not bother you, but, if you encounter a bug or a vulnerability, it will be tricky and annoying to do that.</p>
<p>What is why I prefer loose coupling the <em>&ldquo;business&rdquo;</em> applications Docker images to technical tools such as APM agents.</p>
<h2 id="deploy-an-apm-agent-through-initcontainers" class="headerLink">
    <a href="#deploy-an-apm-agent-through-initcontainers" class="header-mark"></a>2 Deploy an APM agent through initContainers</h2><p>While looking around how to achieve this, I came across to the <a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/" target="_blank" rel="noopener noreferrer">Kubernetes initContainers</a>.</p>
<p>This kind of container is run only once during the startup of every pod.
A bunch of commands is ran then on top of it.
For our current use case, it will copy the javaagent into a volume such as an <a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir" target="_blank" rel="noopener noreferrer">empty directory volume</a>.</p>
<h3 id="impacts-in-the-_wonderful-java-application_-docker-image" class="headerLink">
    <a href="#impacts-in-the-_wonderful-java-application_-docker-image" class="header-mark"></a>2.1 Impacts in the &ldquo;<em>Wonderful Java Application</em> Docker image</h3><p>The main impact is to declare a volume in your Docker image:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">VOLUME</span><span class="s"> /opt/agent</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>It will be used by both the Docker container and the initContainer.
We can consider it as a &ldquo;bridge&rdquo; between these two ones.</p>
<p>We also have to declare one environment variable: <code>JAVA_OPTS</code>.</p>
<p>For instance:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">ENV</span> <span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="nv">$JAVA_OPTS</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="o">[</span>...<span class="o">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;sh&#34;</span><span class="p">,</span> <span class="s2">&#34;-c&#34;</span><span class="p">,</span> <span class="s2">&#34;java ${JAVA_OPTS} org.springframework.boot.loader.JarLauncher&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Il will be used during the deployment to set up our <em>Wonderful Java Application</em>.</p>
<p>Now, let&rsquo;s build our initContainer&rsquo;s Docker image.</p>
<h3 id="initcontainer-docker-image-creation" class="headerLink">
    <a href="#initcontainer-docker-image-creation" class="header-mark"></a>2.2 InitContainer Docker Image creation</h3><p>It is really straightforward.
We can use for example, the following configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> alpine:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> mkdir -p /opt/agent_setup<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> mkdir /opt/agent<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./javaagent.jar /opt/agent_setup/javaagent.jar<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">VOLUME</span><span class="s"> /opt/agent</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="kubernetes-configuration" class="headerLink">
    <a href="#kubernetes-configuration" class="header-mark"></a>2.3 Kubernetes configuration</h3><p>We can now set up our Kubernetes Deployment to start the corresponding container and copy the Java agent.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">java-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">repo/my-wonderful-java-app:v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/opt/agent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">apm-agent-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">initContainers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">cp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">/opt/agent_setup/javaagent.jar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">/opt/agent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">apm-agent-init</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">repo/apm-agent:v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/opt/agent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">appd-agent-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">appd-agent-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Why not just copying the Java agent directly in the initContainer Docker image execution?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The copy must be run with a command specified in the initContainer declaration and cannot be done during the initContainer execution (i.e., specified in its Dockerfile).
Why?
The volume is mounted just after the initContainer execution and drops the JAR file copied earlier.</div>
        </div>
    </div>
<h2 id="start-the-java-application-with-the-agent" class="headerLink">
    <a href="#start-the-java-application-with-the-agent" class="header-mark"></a>3 Start the Java Application with the agent</h2><p>Last but not least, we can now configure the <a href="https://kubernetes.io/docs/concepts/workloads/pods/" target="_blank" rel="noopener noreferrer">pods</a> where we run our Java applications.</p>
<p>We will use the <code>JAVA_OPTS</code> environment variable to configure the location of the Java agent, and <a href="https://www.elastic.co/guide/en/apm/agent/java/current/configuration.html" target="_blank" rel="noopener noreferrer">the Elastic APM Java system properties</a>.</p>
<p>For instance:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">JAVA_OPTS=-javaagent:/opt/agent/javaagent.jar -Delastic.apm.service_name=my-wonderful-application -Delastic.apm.application_packages=org.mywonderfulapp -Delastic.apm.server_url=http://apm:8200
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can then configure your Kubernetes deployment as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">java-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">JAVA_OPTS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>-<span class="l">javaagent:/opt/agent/javaagent.jar -Delastic.apm.service_name=my-wonderful-application -Delastic.apm.application_packages=org.mywonderfulapp -Delastic.apm.server_url=http://apm:8200</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><em>Et voila!</em></p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>4 Conclusion</h2><p>We have seen how to pack and deploy Distributed Tracing java agents and Java Applications built on top of Docker images.
Obviously, my technical choice of using an InitContainer can be challenged regarding your technical context and how you are confortable with your delivery practices.
You probably noticed I use an emptyDir to deploy the Java agent.
<em>Normally</em> it will not be a big deal, but I advise you to check this usage with your Kubernetes SRE/Ops/Administrator first.</p>
<p>Anyway, I think it is worth it and the tradeoffs are more than acceptable because this approach are, in my opinion, more flexible than the first one.</p>
<p>Hope this helps!</p>
]]></description></item><item><title>Enhancing Asynchronous Transaction Monitoring: Implementing Distributed Tracing in Apache Camel Applications with OpenTelemetry</title><link>https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/</link><pubDate>Tue, 05 Sep 2023 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/09/nick-fewings-4dI5OP2Ee64-unsplash.webp" referrerpolicy="no-referrer">
            </div><div id="id-1"><em>Picture Credit: <a href="https://unsplash.com/@jannerboy62" target="_blank" rel="noopener noreferrer">Nick FEWINGS</a></em></div>
<h2 id="introduction" class="headerLink">
    <a href="#introduction" class="header-mark"></a>1 Introduction</h2><p>In today&rsquo;s dynamic landscape, Distributed Tracing has emerged as an indispensable practice.
It helps to understand what is under the hood of distributed transactions, providing answers to pivotal questions: What comprises these diverse requests? What contextual information accompanies them? How extensive is their duration?</p>
<p>Since the introduction of <a href="https://research.google/pubs/pub36356/" target="_blank" rel="noopener noreferrer">Google&rsquo;s Dapper</a>, a plethora of tracing solutions has flooded the scene.
Among them, <a href="https://opentelemetry.io/" target="_blank" rel="noopener noreferrer">OpenTelemetry</a> has risen as the frontrunner.
Other alternatives such as <a href="https://www.elastic.co/observability/application-performance-monitoring" target="_blank" rel="noopener noreferrer">Elastic APM</a> and <a href="https://www.dynatrace.com/support/help/observe-and-explore/purepath-distributed-traces/distributed-traces-overview" target="_blank" rel="noopener noreferrer">DynaTrace</a> are also available.</p>
<p>This toolkit seamlessly aligns with APIs and synchronous transactions, catering to a broad spectrum of scenarios.</p>
<p>However, what about asynchronous transactions?
The necessity for clarity becomes even more pronounced in such cases.
Particularly in architectures built upon messaging or event streaming brokers, attaining a holistic view of the entire transaction becomes arduous.</p>
<p>Why does this challenge arise?
It&rsquo;s a consequence of functional transactions fragmenting into two loosely coupled subprocesses:</p>
<div id="id-2"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/loose-coupling-sequence.svg"
        srcset="/assets/images/2023/09/loose-coupling-sequence.svg, /assets/images/2023/09/loose-coupling-sequence.svg 1.5x, /assets/images/2023/09/loose-coupling-sequence.svg 2x"
        sizes="auto"
        alt="OpenTelemetry Collector Architecture"
        title="OpenTelemetry Collector Architecture" ></figure></div>
<p>Hopefully you can rope OpenTelemetry in it to shed light.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>What about the main concepts of Distributed Tracing?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I will not dig into the concepts of Distributed tracing in this article.
<a href="https://blog.worldline.tech/2021/09/22/enabling_distributed_tracing_in_spring_apps.html" target="_blank" rel="noopener noreferrer">If you are interested in it, you can read my article on the Worldline Tech Blog</a>.</div>
        </div>
    </div>
<p>I will explain in this article how to set up and plug OpenTelementry to gather asynchronous transaction traces using <a href="https://camel.apache.org/" target="_blank" rel="noopener noreferrer">Apache Camel</a> and <a href="https://activemq.apache.org/components/artemis/" target="_blank" rel="noopener noreferrer">Artemis</a>.
The first part will use Jaeger and the second one,  <a href="https://grafana.com/oss/tempo/" target="_blank" rel="noopener noreferrer">Tempo</a> and <a href="https://grafana.com/" target="_blank" rel="noopener noreferrer">Grafana</a> to be more <em>production ready</em>.</p>
<p>All the code snippets are part of <a href="https://GitHub.com/alexandre-touret/camel-artemis-opentelemetry" target="_blank" rel="noopener noreferrer">this project on GitHub</a>.
(Normally) you can use and run it locally on your desktop.</p>
<h2 id="jaeger" class="headerLink">
    <a href="#jaeger" class="header-mark"></a>2 Jaeger</h2><h3 id="architecture" class="headerLink">
    <a href="#architecture" class="header-mark"></a>2.1 Architecture</h3><p>The <a href="https://www.logicmonitor.com/blog/what-are-spans-in-distributed-tracing" target="_blank" rel="noopener noreferrer">SPANs</a> are broadcast and gathered through <a href="https://opentelemetry.io/docs/collector" target="_blank" rel="noopener noreferrer">OpenTelemetry Collector</a>.
It finally sends them to <a href="https://www.jaegertracing.io/" target="_blank" rel="noopener noreferrer">Jaeger</a>.</p>
<p>Here is the architecture of such a platform:</p>
<div id="id-3"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/architecture.svg"
        srcset="/assets/images/2023/09/architecture.svg, /assets/images/2023/09/architecture.svg 1.5x, /assets/images/2023/09/architecture.svg 2x"
        sizes="auto"
        alt="OpenTelemetry Collector Architecture"
        title="OpenTelemetry Collector Architecture" ></figure></div>
<h3 id="opentelemetry-collector" class="headerLink">
    <a href="#opentelemetry-collector" class="header-mark"></a>2.2 OpenTelemetry Collector</h3><p>The cornerstone of this architecture is the <a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noopener noreferrer">collector</a>.
It can be compared to <a href="https://www.elastic.co/fr/logstash/" target="_blank" rel="noopener noreferrer">Elastic LogStash</a> or an <a href="https://en.wikipedia.org/wiki/Extract,_transform,_load" target="_blank" rel="noopener noreferrer">ETL</a>.
It will help us get, transform and export telemetry data.</p>
<div id="id-4"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/otel-diagram.svg"
        srcset="/assets/images/2023/09/otel-diagram.svg, /assets/images/2023/09/otel-diagram.svg 1.5x, /assets/images/2023/09/otel-diagram.svg 2x"
        sizes="auto"
        alt="OpenTelemetry Collector Functionalities"
        title="OpenTelemetry Collector Functionalities" ><figcaption class="image-caption">Source: https://opentelemetry.io/docs/collector/</figcaption>
    </figure></div>
<p>For our use case, the configuration is quite simple.</p>
<p>First, here is the <a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noopener noreferrer">Docker Compose configuration</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otel-collector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">otel/opentelemetry-collector:0.75.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">otel-collector</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">&#34;--config=/etc/otel-collector-config.yaml&#34;</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;1888:1888&#34;</span><span class="w">   </span><span class="c"># pprof extension</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;8888:8888&#34;</span><span class="w">   </span><span class="c"># Prometheus metrics exposed by the collector</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;8889:8889&#34;</span><span class="w">   </span><span class="c"># Prometheus exporter metrics</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;13133:13133&#34;</span><span class="w"> </span><span class="c"># health_check extension</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;4317:4317&#34;</span><span class="w">   </span><span class="c"># OTLP gRPC receiver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;55670:55679&#34;</span><span class="w"> </span><span class="c"># zpages extension</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>and the <a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/blob/main/containers/docker/otel-collector-config.yaml" target="_blank" rel="noopener noreferrer"><code>otel-collector-config.yaml</code></a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># (1)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">receivers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocols</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4317&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4318&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;/actuator/prometheus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">static_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">targets</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;host.docker.internal:8080&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># (2)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">exporters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#  prometheus:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#    endpoint: &#34;0.0.0.0:8889&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#    const_labels:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#      label1: value1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">logging</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">jaeger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="l">jaeger:14250</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">insecure</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#  zipkin:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#    endpoint: http://zipkin:9411/api/v2/spans</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#    tls:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#      insecure: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># (3)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">processors</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">batch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">extensions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">health_check</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pprof</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="p">:</span><span class="m">1888</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">zpages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="p">:</span><span class="m">55679</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># (4)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">extensions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">pprof, zpages, health_check]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pipelines</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">traces</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">receivers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">processors</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">batch]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">exporters</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">logging, jaeger]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">receivers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">processors</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">batch]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">exporters</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">logging]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Short explanation</strong></p>
<p>If you want further information about this configuration, you <a href="https://opentelemetry.io/docs/collector/configuration/" target="_blank" rel="noopener noreferrer">can browse the documentation</a>.</p>
<p>For those who are impatient, here are a short explanation of this configuration file:</p>
<ol>
<li>Where to pull data?</li>
<li>Where to store data?</li>
<li>What to do with it?</li>
<li>What are the workloads to activate?</li>
</ol>
<h3 id="what-about-the-code" class="headerLink">
    <a href="#what-about-the-code" class="header-mark"></a>2.3 What about the code?</h3><p>The configuration to apply is pretty simple and straightforward.
To cut long story short, you need to include libraries, add some configuration lines and run your application with an agent which will be responsible for broadcasting the SPANs.</p>
<h4 id="libraries-to-add" class="headerLink">
    <a href="#libraries-to-add" class="header-mark"></a>2.3.1 Libraries to add</h4><p>For an Apache Camel based Java application, you need to add this starter first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>org.apache.camel.springboot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>camel-opentelemetry-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In case you set up a <em>basic</em> <a href="https://spring.io/" target="_blank" rel="noopener noreferrer">Spring Boot application</a>, you only have to configure the agent (<em>see below</em>).</p>
<h4 id="what-about-the-code-1" class="headerLink">
    <a href="#what-about-the-code-1" class="header-mark"></a>2.3.2 What about the code?</h4><p>This step is not mandatory.
However, if you are eager to get more details in your Jaeger dashboard, it is advised.</p>
<p>In the application class, you only have to put the <code>@CamelOpenTelemetry</code> annotation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CamelOpenTelemetry</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@SpringBootApplication</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">DemoApplication</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">[</span><span class="p">...</span><span class="o">]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>If you want more details, you can check <a href="https://camel.apache.org/components/3.20.x/others/opentelemetry.html" target="_blank" rel="noopener noreferrer">the official documentation</a>.</p>
<h4 id="the-java-agent" class="headerLink">
    <a href="#the-java-agent" class="header-mark"></a>2.3.3 The Java Agent</h4><p>The java agent is responsible for instrumenting Java 8+ code, capturing metrics and forwarding them to the collector.</p>
<p>In case you don&rsquo;t know what is a Java Agent, I recommend watching <a href="https://www.youtube.com/watch?v=oflzFGONG08" target="_blank" rel="noopener noreferrer">this conference</a>.</p>
<p><a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation" target="_blank" rel="noopener noreferrer">Its documentation is available on GitHub</a>.
The detailed list of configuration parameters <a href="https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/" target="_blank" rel="noopener noreferrer">is available here</a>.
You can configure it through environment, system variables or a <a href="https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/#configuration-file" target="_blank" rel="noopener noreferrer">configuration file</a>.</p>
<p>For instance, by default, the OpenTelemetry Collector default endpoint value is <code>http://localhost:4317</code>.
You can alter it by setting the <code>OTEL_EXPORTER_OTLP_METRICS_ENDPOINT</code> environment variable or the <code>otel.exporter.otlp.metrics.endpoint</code> java system variable (e.g., using <code>-Dotel.exporter.otlp.metrics.endpoint</code> option ).</p>
<p>In my example, we use Maven configuration to download the agent JAR file and run our application with it as an agent.</p>
<p><strong>Example of configuration</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;id&gt;</span>opentelemetry<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;activation&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;name&gt;</span>apm<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>otel<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/activation&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>maven-dependency-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;executions&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;execution&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;id&gt;</span>copy-javaagent<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;phase&gt;</span>process-resources<span class="nt">&lt;/phase&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;goals&gt;</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&lt;goal&gt;</span>copy<span class="nt">&lt;/goal&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;/goals&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&lt;artifactItems&gt;</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&lt;artifactItem&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;groupId&gt;</span>io.opentelemetry.javaagent<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;artifactId&gt;</span>opentelemetry-javaagent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;version&gt;</span>${opentelemetry-agent.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;overWrite&gt;</span>true<span class="nt">&lt;/overWrite&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;outputDirectory&gt;</span>${project.build.directory}/javaagents<span class="nt">&lt;/outputDirectory&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;destFileName&gt;</span>javaagent.jar<span class="nt">&lt;/destFileName&gt;</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&lt;/artifactItem&gt;</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&lt;/artifactItems&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/execution&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/executions&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;agents&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;agent&gt;</span>${project.build.directory}/javaagents/javaagent.jar<span class="nt">&lt;/agent&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/agents&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                    &lt;systemPropertyVariables&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                        &lt;otel.traces.sampler&gt;parentbased_traceidratio&lt;/otel.traces.sampler&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                        &lt;otel.traces.sampler.arg&gt;0.2&lt;/otel.traces.sampler.arg&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                    &lt;/systemPropertyVariables&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/profile&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The variables in comment (e.g., <code>otel.traces.sampler</code>) can be turned on if you want <a href="https://opentelemetry.io/docs/concepts/sampling/" target="_blank" rel="noopener noreferrer">to sample your forwarded data based on a head rate limiting</a>.</p>
<p>Before running the whole application (<a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/tree/main/gateway" target="_blank" rel="noopener noreferrer">gateway</a>, <a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/tree/main/camel-producer" target="_blank" rel="noopener noreferrer">producer</a>,<a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/tree/main/camel-consumer" target="_blank" rel="noopener noreferrer">consumer</a>), you must ramp up the infrastructure with <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener noreferrer">Docker compose</a>.
The source is available <a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/blob/main/containers/docker-compose.yml" target="_blank" rel="noopener noreferrer">here</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd containers
</span></span><span class="line"><span class="cl">docker compose up
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can now start both the producer and the consumer:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mvn clean spring-boot:run -Popentelemetry -f camel-producer/pom.xml
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mvn clean spring-boot:run -Popentelemetry -f camel-consumer/pom.xml
</span></span></code></pre></td></tr></table>
</div>
</div><p>The gateway can also be turned on and instrumented in the same way.
You can run it as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mvn clean spring-boot:run -Popentelemetry -f gateway/pom.xml
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="how-is-made-the-glue-between-the-two-applications" class="headerLink">
    <a href="#how-is-made-the-glue-between-the-two-applications" class="header-mark"></a>2.3.4 How is made the glue between the two applications?</h4><p>The correlation is simply done using headers.
For instance, in the consumer application, when we consume the messages as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">from</span><span class="p">(</span><span class="s">&#34;activemq:queue:HELLO.WORLD?disableReplyTo=true&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">routeId</span><span class="p">(</span><span class="s">&#34;consume-message&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">routeDescription</span><span class="p">(</span><span class="s">&#34;Consumer example&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="n">LoggingLevel</span><span class="p">.</span><span class="na">INFO</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;New message with trace=${header.traceparent}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="s">&#34;----&gt; &#34;</span><span class="o">+</span><span class="n">bodyAs</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="na">class</span><span class="p">).</span><span class="na">toString</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="s">&#34;HEADERS ${in.headers}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">end</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>I logged on purpose the <code>traceparent</code> header.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> New message with trace=00-1a4f6943b7ace96d7efae4c4404009d8-cfbdb98266a772d7-01
</span></span></code></pre></td></tr></table>
</div>
</div><p>It allows to Jaeger to correlate our two transactions.</p>
<p>For your information, here are all the headers available while consuming the message</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="err">__AMQ_CID=ID:XXXX-0:1,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">accept=*/*,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">accept-encoding=gzip,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">deflate,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpCharacterEncoding=UTF-8,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpMethod=GET,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpPath=,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpUri=/camel/test,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpUrl=http:</span><span class="c1">//127.0.0.1:8080/camel/test, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="err">CamelMessageTimestamp=1693567851901,</span>
</span></span><span class="line"><span class="cl">  <span class="err">CamelServletContextPath=/test,</span>
</span></span><span class="line"><span class="cl">  <span class="err">content-length=0,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">forwarded=proto=http;host=</span><span class="nt">&#34;localhost:9080&#34;</span><span class="err">;for=</span><span class="s2">&#34;127.0.0.1:39352&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">host=127.0.0.1:8080,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSCorrelationID=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSCorrelationIDAsBytes=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSDeliveryMode=2,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSDestination=queue:</span><span class="c1">//HELLO.WORLD, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="err">JMSExpiration=0,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSMessageID=ID:XXXX-1:1:1:1:75,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSPriority=4,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSRedelivered=false,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSReplyTo=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSTimestamp=1693567851901,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSType=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSXGroupID=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSXUserID=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">traceparent=00-dea6abbd4357819b7416236bab19e557-8840b18dd799cfac-01,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">user-agent=HTTPie/1.0.3,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-for=127.0.0.1,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-host=localhost:9080,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-port=9080,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-proto=http</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="dashboard" class="headerLink">
    <a href="#dashboard" class="header-mark"></a>2.4 Dashboard</h3><p>To get traces, I ran this dumb command to inject traces into Jaeger:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">while true ; http :9080/camel/test; end
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now, you can browse Jaeger (<a href="http://localhost:16686" target="_blank" rel="noopener noreferrer">http://localhost:16686</a>) and query it to find trace insights:</p>
<div id="id-5"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/jaeger-1.webp"
        srcset="/assets/images/2023/09/jaeger-1.webp, /assets/images/2023/09/jaeger-1.webp 1.5x, /assets/images/2023/09/jaeger-1.webp 2x"
        sizes="auto"
        alt="Jaeger front page"
        title="Jaeger front page" ><figcaption class="image-caption">Number of different apps</figcaption>
    </figure></div>
<p>If you dig into one transaction, you will see the whole transaction:</p>
<div id="id-6"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/jaeger-2.webp"
        srcset="/assets/images/2023/09/jaeger-2.webp, /assets/images/2023/09/jaeger-2.webp 1.5x, /assets/images/2023/09/jaeger-2.webp 2x"
        sizes="auto"
        alt="Jaeger transaction page"
        title="Jaeger transaction page" ><figcaption class="image-caption">One transaction</figcaption>
    </figure></div>
<p>And now, you can correlate two sub transactions:</p>
<div id="id-7"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/jaeger-3.webp"
        srcset="/assets/images/2023/09/jaeger-3.webp, /assets/images/2023/09/jaeger-3.webp 1.5x, /assets/images/2023/09/jaeger-3.webp 2x"
        sizes="auto"
        alt="Jaeger two sub transactions"
        title="Jaeger two sub transactions" ><figcaption class="image-caption">Two sub transactions</figcaption>
    </figure></div>
<h2 id="tempo--grafana" class="headerLink">
    <a href="#tempo--grafana" class="header-mark"></a>3 Tempo &amp; Grafana</h2><p>This solution is pretty similar to the previous one.
Instead of pushing all the data to Jaeger, we will use Tempo to store data and Grafana to render them.
We don&rsquo;t need to modify the configuration made in the existing Java applications.</p>
<h3 id="architecture-1" class="headerLink">
    <a href="#architecture-1" class="header-mark"></a>3.1 Architecture</h3><p>As mentioned above, the architecture is quite the same.
Now, we have the collector which broadcast data to Tempo.
We will then configure Grafana to query to it to get traces.</p>
<div id="id-8"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/architecture_grafana.svg"
        srcset="/assets/images/2023/09/architecture_grafana.svg, /assets/images/2023/09/architecture_grafana.svg 1.5x, /assets/images/2023/09/architecture_grafana.svg 2x"
        sizes="auto"
        alt="Architecture w/ Grafana &amp;amp; Tempo"
        title="Architecture w/ Grafana &amp;amp; Tempo" ></figure></div>
<h3 id="collector-configuration" class="headerLink">
    <a href="#collector-configuration" class="header-mark"></a>3.2 Collector configuration</h3><p>The modification of the Collector is easy (for this example).
We only have to specify the tempo URL.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">receivers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocols</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4317&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4318&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;/actuator/prometheus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">static_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">targets</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;host.docker.internal:8080&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">exporters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="l">tempo:4317</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">insecure</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pipelines</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">traces</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">receivers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">exporters</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tempo-configuration" class="headerLink">
    <a href="#tempo-configuration" class="header-mark"></a>3.3 Tempo configuration</h3><p>I used here <a href="https://github.com/grafana/tempo" target="_blank" rel="noopener noreferrer">the standard configuration provided in the documentation</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">http_listen_port</span><span class="p">:</span><span class="w"> </span><span class="m">3200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">distributor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">receivers</span><span class="p">:</span><span class="w">                           </span><span class="c"># this configuration will listen on all ports and protocols that tempo is capable of.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jaeger</span><span class="p">:</span><span class="w">                            </span><span class="c"># the receives all come from the OpenTelemetry collector.  more configuration information can</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocols:                       # be found there</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">thrift_http</span><span class="p">:</span><span class="w">                   </span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">grpc</span><span class="p">:</span><span class="w">                          </span><span class="c"># for a production deployment you should only enable the receivers you need!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">thrift_binary</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">thrift_compact</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zipkin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocols</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">opencensus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ingester</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">max_block_duration</span><span class="p">:</span><span class="w"> </span><span class="l">5m              </span><span class="w"> </span><span class="c"># cut the headblock when this much time passes. this is being set for demo purposes and should probably be left alone normally</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">compactor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">compaction</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">block_retention</span><span class="p">:</span><span class="w"> </span><span class="l">1h               </span><span class="w"> </span><span class="c"># overall Tempo trace retention. set for demo purposes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metrics_generator</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">registry</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external_labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">cluster</span><span class="p">:</span><span class="w"> </span><span class="l">docker-compose</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storage</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/tempo/generator/wal</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">remote_write</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://prometheus:9090/api/v1/write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">send_exemplars</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">storage</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">trace</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">backend</span><span class="p">:</span><span class="w"> </span><span class="l">local                    </span><span class="w"> </span><span class="c"># backend configuration to use</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">wal</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/tempo/wal            </span><span class="w"> </span><span class="c"># where to store the wal locally</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">local</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/tempo/blocks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">overrides</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics_generator_processors</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">service-graphs, span-metrics]</span><span class="w"> </span><span class="c"># enables metrics generator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">search_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="grafana-configuration" class="headerLink">
    <a href="#grafana-configuration" class="header-mark"></a>3.4 Grafana configuration</h3><p>Now we must configure Grafana to enable querying into our tempo instance.
The configuration is made here using a configuration file provided during the startup</p>
<p>The datasource file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">datasources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Prometheus backend where metrics are sent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://prometheus:9090</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">httpMethod</span><span class="p">:</span><span class="w"> </span><span class="l">GET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://tempo:3200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">httpMethod</span><span class="p">:</span><span class="w"> </span><span class="l">GET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;prometheus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="dashboard-1" class="headerLink">
    <a href="#dashboard-1" class="header-mark"></a>3.5 Dashboard</h3><p>As we have done before, we must start the infrastructure using Docker Compose:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd containers
</span></span><span class="line"><span class="cl">docker compose -f docker-compose-grafana.yml up
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, using the same rocket scientist maven commands, we can run the same commands and browse now Grafana (<code>http://localhost:3000</code>) to see our traces:</p>
<p><div id="id-9"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/grafana-1.webp"
        srcset="/assets/images/2023/09/grafana-1.webp, /assets/images/2023/09/grafana-1.webp 1.5x, /assets/images/2023/09/grafana-1.webp 2x"
        sizes="auto"
        alt="Grafana transactions"
        title="Grafana transactions" ><figcaption class="image-caption">Transactions</figcaption>
    </figure></div>
<div id="id-10"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/grafana-2.webp"
        srcset="/assets/images/2023/09/grafana-2.webp, /assets/images/2023/09/grafana-2.webp 1.5x, /assets/images/2023/09/grafana-2.webp 2x"
        sizes="auto"
        alt="Grafana transactions"
        title="Grafana transactions" ><figcaption class="image-caption">Deep dive into one transaction</figcaption>
    </figure></div></p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>4 Conclusion</h2><p>We saw how to highlight asynchronous transactions and correlate them through OpenTelemetry and Jaeger or using Tempo &amp; Grafana.
It was voluntarily simple.</p>
<p>If you want to dig into <a href="https://github.com/open-telemetry/opentelemetry-collector/" target="_blank" rel="noopener noreferrer">OpenTelemetry Collector</a> configuration, you can read <a href="https://signoz.io/blog/opentelemetry-collector-complete-guide/" target="_blank" rel="noopener noreferrer">this article from Antik ANAND</a> (Thanks to <a href="https://blog.frankel.ch/" target="_blank" rel="noopener noreferrer">Nicolas FRANKËL</a> for sharing it) and the <a href="https://github.com/open-telemetry/opentelemetry-collector/" target="_blank" rel="noopener noreferrer">official documentation</a>.
A noteworthy aspect of <a href="https://github.com/open-telemetry/" target="_blank" rel="noopener noreferrer">OpenTelemetry</a> lies in its evolution into an industry-standard over time.
For instance,<a href="https://www.elastic.co/observability/application-performance-monitoring" target="_blank" rel="noopener noreferrer">Elastic APM</a> <a href="https://www.elastic.co/guide/en/apm/guide/current/open-telemetry.html" target="_blank" rel="noopener noreferrer">is compatible with it</a>.</p>
<p>I then exposed how to enable this feature on Apache Camel applications.
It can be easily reproduced <a href="https://opentelemetry.io/docs/instrumentation/" target="_blank" rel="noopener noreferrer">with several stacks</a>.</p>
<p>Last but not least, which solution is the best?</p>
<p>I have not made any benchmark of Distributed Tracing solutions.
However, for a <em>real life</em> production setup, I would dive into Grafana and Tempo and check their features.
I am particularly interested in mixing logs, traces to orchestrate efficient alerting mechanisms.</p>
]]></description></item><item><title>Moving on to Fish shell (and beyond)</title><link>https://blog.touret.info/2023/07/21/fish-shell/</link><pubDate>Fri, 21 Jul 2023 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/07/21/fish-shell/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/07/jakub-kapusnak-vLQzopDRSNI-unsplash.webp" referrerpolicy="no-referrer">
            </div><p>While chatting with one of <a href="https://twitter.com/foxlegend" target="_blank" rel="noopener noreferrer">my WL colleague</a>, I stumbled upon <a href="https://fishshell.com/" target="_blank" rel="noopener noreferrer">Fish shell</a>.
I immediately liked its autocompletion and extensibility mechanisms.
After many years using <a href="https://www.gnu.org/software/bash/" target="_blank" rel="noopener noreferrer">BASH</a> and <a href="https://zsh.sourceforge.io/" target="_blank" rel="noopener noreferrer">ZSH</a>, I therefore decided to move on to this new <a href="https://en.wikipedia.org/wiki/Unix_shell" target="_blank" rel="noopener noreferrer">shell</a>.</p>
<p>Unlike the others, it&rsquo;s not <a href="https://fishshell.com/docs/current/fish_for_bash_users.html#fish-for-bash-users" target="_blank" rel="noopener noreferrer">POSIX-compatible</a>.</p>
<p>Furthermore, to get (<em>at least</em>) the same functionalities as <a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener noreferrer">OhMyZsh</a>, I chose to install <a href="https://starship.rs/" target="_blank" rel="noopener noreferrer">StarShip</a>.</p>
<p>I will then describe how I moved on and updated my existing tools such as <a href="https://sdkman.io/" target="_blank" rel="noopener noreferrer">SdkMan</a>.</p>
<h2 id="fish-installation" class="headerLink">
    <a href="#fish-installation" class="header-mark"></a>1 FISH Installation</h2><div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>OS<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I applied these commands on both <a href="http://ubuntu.com/" target="_blank" rel="noopener noreferrer">Ubuntu20</a>/<a href="https://learn.microsoft.com/fr-fr/windows/wsl/install" target="_blank" rel="noopener noreferrer">WSL2</a> and <a href="https://linuxmint.com/" target="_blank" rel="noopener noreferrer">Linux Mint</a>.</div>
        </div>
    </div>
<p>To install it, run this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install fish
</span></span></code></pre></td></tr></table>
</div>
</div><p>You must also use a font available on the <a href="https://www.nerdfonts.com/font-downloads" target="_blank" rel="noopener noreferrer">NerdFonts website</a>.
By the way, you can also use the fonts available through your package manager.</p>
<p>For instance, I chose using <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip" target="_blank" rel="noopener noreferrer">JetBrains Mono</a></p>
<p>After downloading it, you can reload your font cache running this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">fc-cache -fv
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="starship-installation" class="headerLink">
    <a href="#starship-installation" class="header-mark"></a>2 StarShip installation</h2><p>I ran this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">curl -sS https://starship.rs/install.sh | sh
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>How to update StarShip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">To update StarShip, you must use the same command.</div>
        </div>
    </div>
<p>I also added the following command at the end of <code>~/.config/fish/config.fish</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">starship init fish <span class="p">|</span> <span class="nb">source</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Due to some WSL2 incompatibilities, I also chose to use <a href="https://starship.rs/presets/plain-text.html" target="_blank" rel="noopener noreferrer">the plain text presets</a> running this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">starship preset plain-text-symbols -o ~/.config/starship.toml
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="sdkman-update" class="headerLink">
    <a href="#sdkman-update" class="header-mark"></a>3 SDKMAN update</h2><p>At this stage, SdkMan didn&rsquo;t work at all. To put it alive again, I had to install <a href="https://github.com/jorgebucaran/fisher" target="_blank" rel="noopener noreferrer">Fisher</a> and a <a href="https://github.com/reitzig/sdkman-for-fish" target="_blank" rel="noopener noreferrer">SdkMan for fish plugin</a>.</p>
<h3 id="fisher-install" class="headerLink">
    <a href="#fisher-install" class="header-mark"></a>3.1 Fisher install</h3><p>Run this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source &amp;&amp; fisher install jorgebucaran/fisher
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sdkman-for-fish-plugin" class="headerLink">
    <a href="#sdkman-for-fish-plugin" class="header-mark"></a>3.2 SdkMan for fish plugin</h3><p>Run this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">fisher install reitzig/sdkman-for-fish@v2.0.0
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="run-sdkman" class="headerLink">
    <a href="#run-sdkman" class="header-mark"></a>3.3 Run SdkMan</h3><p>Run this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sdk ug
</span></span></code></pre></td></tr></table>
</div>
</div><p>Say yes and restart a shell.
Now it should work.</p>
<h2 id="nvm" class="headerLink">
    <a href="#nvm" class="header-mark"></a>4 NVM</h2><p>I had the same issue with <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener noreferrer">NVM</a>.</p>
<p>I then installed another plugin with Fisher:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">fisher install jorgebucaran/nvm.fish
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="gnupg" class="headerLink">
    <a href="#gnupg" class="header-mark"></a>5 GnuPG</h2><p>I use <a href="https://blog.touret.info/2019/08/09/verifier-les-commit-git-avec-gpg/" target="_blank" rel="noopener noreferrer">GnuPG for signing my GIT commits</a>.
Installing Fisher broke my setup.</p>
<p>I then added this new configuration file <code>$HOME/.config/fish/conf.d/config_gpgagent.fish</code> with the following content:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set -gx GPG_TTY /dev/pts/0
</span></span></code></pre></td></tr></table>
</div>
</div><p>To activate it, restart your shell (again).</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>6 Conclusion</h2><p>I can now use FISH for my daily job.
As I said first, this article is only a reminder for my next setups (aka when I will broke my GNU/Linux boxes and try to restore them).</p>
<p>Hope it will help you!</p>
]]></description></item><item><title>Real life Rest API Versioning for dummies</title><link>https://blog.touret.info/2023/03/27/rest-api-versioning/</link><pubDate>Mon, 27 Mar 2023 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/03/27/rest-api-versioning/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/03/vardan-papikyan-DnXqvmS0eXM-unsplash.webp" referrerpolicy="no-referrer">
            </div><h2 id="once-upon-a-time-an-api-" class="headerLink">
    <a href="#once-upon-a-time-an-api-" class="header-mark"></a>1 Once upon a time an API &hellip;</h2><div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>Second Law of Consulting<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><em>“No matter how it looks at first, it’s always a people problem” - Gerald M. Weinberg</em></div>
        </div>
    </div>
<p>Once upon a time, the <a href="https://en.wikipedia.org/wiki/Acme_Corporation" target="_blank" rel="noopener noreferrer">ACME Corporation</a> was building a brand new IT product.
It aimed at a new software to manage bookstores through a web interface and an API.</p>
<p>In the first steps, the developers drew up a first roadmap of their API based on the expectations of their first customers.
They therefore built and shipped a microservices platform and released their first service contract for their early adopters.</p>
<p>Here is the design of this platform:</p>
<p><strong>The High level design</strong></p>
<div id="id-1"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/03/Bookstore-System_Context_diagram_for_Bookstore_System.svg"
        srcset="/assets/images/2023/03/Bookstore-System_Context_diagram_for_Bookstore_System.svg, /assets/images/2023/03/Bookstore-System_Context_diagram_for_Bookstore_System.svg 1.5x, /assets/images/2023/03/Bookstore-System_Context_diagram_for_Bookstore_System.svg 2x"
        sizes="auto"
        alt="c4 context diagram"
        title="c4 context diagram" ></figure></div>
<p><strong>More in depth</strong></p>
<div id="id-2"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/03/Bookstore-Container_Context_diagram_for_Bookstore_System.svg"
        srcset="/assets/images/2023/03/Bookstore-Container_Context_diagram_for_Bookstore_System.svg, /assets/images/2023/03/Bookstore-Container_Context_diagram_for_Bookstore_System.svg 1.5x, /assets/images/2023/03/Bookstore-Container_Context_diagram_for_Bookstore_System.svg 2x"
        sizes="auto"
        alt="c4 container diagram"
        title="c4 container diagram" ></figure></div>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>To sum up<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">To cut long story short, we have a microservices platform based on the <a href="https://docs.spring.io/spring-boot/docs/" target="_blank" rel="noopener noreferrer">Spring Boot</a>/<a href="https://docs.spring.io/spring-boot/docs/" target="_blank" rel="noopener noreferrer">Cloud</a> Stack exposed through an <a href="https://spring.io/projects/spring-cloud-gateway" target="_blank" rel="noopener noreferrer">API Gateway</a> and <a href="https://github.com/spring-projects/spring-authorization-server/" target="_blank" rel="noopener noreferrer">secured</a> using <a href="https://openid.net/" target="_blank" rel="noopener noreferrer">OpenID Connect</a>.</div>
        </div>
    </div>
<h2 id="the-platform-and-its-roadmap" class="headerLink">
    <a href="#the-platform-and-its-roadmap" class="header-mark"></a>2 The platform and its roadmap</h2><p>After shipping it into production, they drew up a roadmap for their existing customers to both improve the existing features and bring new ones.</p>
<p>As of now, we could think everything is <em>hunky-dory</em> isn&rsquo;t it?</p>
<p>While engineers worked on improving the existing API, the sales representative have contracted with new customers.
They enjoyed this product and its functionalities.
However, they also ask for new requirements and concerns.</p>
<p>Some of them are easy to apply, some not.
For instance, a new customer asked the <a href="https://en.wikipedia.org/wiki/Acme_Corporation" target="_blank" rel="noopener noreferrer">ACME engineers</a> for getting a <code>summary</code> for every book and additional REST operations.</p>
<p><em>Easy!</em></p>
<p>However, last but not least, this customer would also get a list of authors for every book whereas the existing application only provides ONE author per book.</p>
<div id="id-3"><p><figure><img
        
        loading="lazy"
        src="/assets/images/2023/03/breaking_change.webp"
        srcset="/assets/images/2023/03/breaking_change.webp, /assets/images/2023/03/breaking_change.webp 1.5x, /assets/images/2023/03/breaking_change.webp 2x"
        sizes="auto"
        alt="Breaking change"
        title="Breaking change" ></figure></p>
<p><strong>This is a breaking change!</strong></p>
</div>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>What is a breaking change?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>A breaking change occurs when the backward compatibility is broken between two following versions.</p>
<p>For instance, when you completely change the service contract on your API, a client which uses the old API definition is unable to use your new one.</p>
</div>
        </div>
    </div>
<p>A common <em>theoretical</em> approach could be to apply versions on our APIs and adapt it according to the customer.</p>
<p>Unfortunately, the devil is in the details.</p>
<p>I will describe in this article attention points I struggled with in my last projects.</p>
<h2 id="what-to-version-how-and-where-to-apply-it" class="headerLink">
    <a href="#what-to-version-how-and-where-to-apply-it" class="header-mark"></a>3 What to version? How and where to apply it?</h2><p>After answering to the first question: <em>Do I really need API versioning?</em> you then have to answer to this new one: what should we consider versioning?</p>
<p><strong>You only have to version the service contract.</strong></p>
<p>In the case of a simple web application based on a GUI and an API</p>
<div id="id-4"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/03/monolith-Donuts___Home_Monolith.svg"
        srcset="/assets/images/2023/03/monolith-Donuts___Home_Monolith.svg, /assets/images/2023/03/monolith-Donuts___Home_Monolith.svg 1.5x, /assets/images/2023/03/monolith-Donuts___Home_Monolith.svg 2x"
        sizes="auto"
        alt="c4 monolith"
        title="c4 monolith" ></figure></div>
<p>Versioning is applied in the service contract of your API.
If you change your database without impacting the APIs, why should you waste your time creating and managing a version of your API?
It doesn&rsquo;t make sense.</p>
<p>On the other way around, when you evolve your service contract, you usually impact your database (e.g., see the example of breaking change above).</p>
<p>Moreover, the version <strong>is usually specified on the <em>&ldquo;middleware&rdquo;</em> side, where your expose your API</strong>.
I&rsquo;ll come back to this point in a later section.</p>
<p>If you want to dig into what is a breaking change and what to version, you can read <a href="https://docs.github.com/en/rest/overview/api-versions?apiVersion=2022-11-28" target="_blank" rel="noopener noreferrer">this guide on the GitHub website</a>.</p>
<h3 id="how-many-versions-must-i-handle" class="headerLink">
    <a href="#how-many-versions-must-i-handle" class="header-mark"></a>3.1 How many versions must I handle?</h3><p>Tough question!</p>
<p>Throughout my different experiences struggling with API versioning, the most acceptable trade-off for both the API provider and customer/client was to only handle two versions: the current and the deprecated one.</p>
<h3 id="where" class="headerLink">
    <a href="#where" class="header-mark"></a>3.2 Where?</h3><p>Now, you have to answer to this question: Where should I handle the version?</p>
<ul>
<li>On the Gateway?</li>
<li>On Every Backend?</li>
<li>On every service or on every set of services?</li>
<li>Directly in the code managed by different packages.</li>
</ul>
<p>Usually, I prefer manage it on the gateway side and don&rsquo;t bother with URL management on every backend.
It could avoid maintenance on both code and tests for every release.
However, you can&rsquo;t have this approach on monolithic applications (see below).</p>
<h3 id="how-to-define-it" class="headerLink">
    <a href="#how-to-define-it" class="header-mark"></a>3.3 How to define it?</h3><p>Here are three ways to define API versions:</p>
<ul>
<li>In the URL (e.g., <code>/v1/api/books</code>)</li>
<li>In a HTTP header (e.g., <code>X-API-VERSION: v1</code>)</li>
<li>In the content type (e.g., <code>Accept: application/vnd.myname.v1+json</code>)</li>
</ul>
<p>The last one is now deprecated.
<a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-accept" target="_blank" rel="noopener noreferrer">The RFC 9110 deprecates now <em>custom</em> usages of the <code>accept</code> HTTP header</a>.</p>
<p>I strongly prefer the first one. It is the most straightforward.</p>
<p>For instance, if you provide your books API first version, you can declare this URL in your OpenAPI specification:<code>/v1/api/books</code>.
The version declared here is pretty clear and difficult to miss.</p>
<p>If you specify the version in a HTTP header, it&rsquo;s less clear.
If you have this URL <code>/api/books</code> and the version specified in this header: <code>X-API-VERSION: v1</code>, what would be the version called (or not) if you didn&rsquo;t specify the header? Is there any default version?
Yes, you can read the documentation to answer these questions, but who (really) does?</p>
<p>The version declared here is pretty clear and difficult to miss.
If you specify the version in a HTTP header, it&rsquo;s less clear.
If you have this URL <code>/api/books</code> and the version specified in this header: <code>X-API-VERSION: v1</code>, what would be the version called (or not) if you didn&rsquo;t specify the header? Is there any default version?</p>
<p>Yes, you can read the documentation, but who (really) does?</p>
<p>The first solution (i.e., version in the URL) mandatorily conveys the associated version.
It is so visible for all the stakeholders and could potentially avoir any mistakes or headaches while debugging.</p>
<h2 id="what-about-the-main-softwarecloud-providers" class="headerLink">
    <a href="#what-about-the-main-softwarecloud-providers" class="header-mark"></a>4 What about the main software/cloud providers?</h2><p>Before reinventing the wheel, let&rsquo;s see how the main actors of our industry deal with this topic.
I looked around and found three examples:</p>
<h3 id="google" class="headerLink">
    <a href="#google" class="header-mark"></a>4.1 Google</h3><ul>
<li>The version is specified in the URL</li>
<li>It only represents the major versions which handle breaking changes</li>
</ul>
<h3 id="spotify" class="headerLink">
    <a href="#spotify" class="header-mark"></a>4.2 Spotify</h3><ul>
<li>The version is specified in the URL</li>
<li>The API version is still <code>V1</code> &hellip;</li>
</ul>
<h3 id="apple" class="headerLink">
    <a href="#apple" class="header-mark"></a>4.3 Apple</h3><ul>
<li>The version is specified in the URL</li>
<li>The API version is still <code>V1</code> &hellip;</li>
</ul>
<h2 id="appropriate-or-not-technologies" class="headerLink">
    <a href="#appropriate-or-not-technologies" class="header-mark"></a>5 Appropriate (or not) technologies</h2><p>In my opinion, technologies based on the <a href="https://microservices.io/patterns/monolithic.html" target="_blank" rel="noopener noreferrer">monolith pattern</a> don&rsquo;t fit handling <em>properly</em> API Versioning.
If you are not eager to execute two versions of your <a href="https://microservices.io/patterns/monolithic.html" target="_blank" rel="noopener noreferrer">monolith</a>, you would have to provide both of the two versions within the same app and runtime.</p>
<p>You see the point?</p>
<p>You would therefore struggle with:</p>
<ul>
<li>packaging</li>
<li>testing both of two releases for every deployment even if a new feature doesn&rsquo;t impact the deprecated version</li>
<li>removing, add new releases in the same source code,&hellip; And loosing your mind.</li>
</ul>
<p>In my opinion, best associated technologies are more modular whether during the development or deployment phases.</p>
<p>For instance, if you built your app with Container based (Docker, Podman, K8S,..) stack, you would easily switch from one version to another, and sometimes you would be able to ship new features without impacting the oldest version.</p>
<p>However, we need to set up our development and integration workflow to do that.</p>
<h2 id="configuration-management--delivery-automation" class="headerLink">
    <a href="#configuration-management--delivery-automation" class="header-mark"></a>6 Configuration management &amp; delivery automation</h2><p>When I dug into API versioning, I realised it impacts projects organisation and, by this way, the following items:</p>
<ul>
<li>The source code management: <em>one version per branch or not?</em></li>
<li>The release process: <em>How to create releases properly?</em></li>
<li>Fixes, merges,&hellip;: <em>How to apply fixes among branches and versions?</em></li>
<li>The delivery process: <em>How to ship you versions?</em></li>
</ul>
<p>Yes <strong>it IS a big deal</strong></p>
<p>Here is <em>the least bad</em> approach I think it works while addressing all of these concerns:</p>
<h3 id="source-code-configuration" class="headerLink">
    <a href="#source-code-configuration" class="header-mark"></a>6.1 Source code configuration</h3><p>When you want to have two different versions in production, you must decouple your work in several GIT (what else) branches.</p>
<p>For that, I usually put in place <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow" target="_blank" rel="noopener noreferrer">GitFlow</a>.</p>
<figure><img src="/assets/images/2023/03/gitflow.svg"/><figcaption>
            <h4>source: Atlassian</h4>
        </figcaption>
</figure>

<p>Usually, using this workflow, we consider the <code>develop</code> branch serves as an integration branch.
But, now we have two separate versions?
Yes, but don&rsquo;t forget we have a <strong>current</strong> version and a <strong>deprecated one</strong>.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>SemVer<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I base my versioning naming and numbers on <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">SemVer</a></div>
        </div>
    </div>
<p>To handle API versions, we can use <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow" target="_blank" rel="noopener noreferrer"><code>release</code> branches</a>.</p>
<p>You can easily declare versions regarding your API versions.</p>
<p>For instance:</p>
<ul>
<li><code>release/book-api-1.0.1</code></li>
<li><code>release/book-api-2.0.1</code></li>
</ul>
<p>We can so have the following workflow:</p>
<ol>
<li>Develop features in feature branches and merge them into the <code>develop</code> branch.</li>
<li>Release and use major release numbers (or whatever) to identify breaking changes and your API version number</li>
<li>Create binaries (see below) regarding the tags and release branches created</li>
<li>Fix existing branches when you want to backport features brought by new features (e.g., when there is an impact on the database mapping), and release them using minor version numbers</li>
<li>Apply fixes and create releases</li>
</ol>
<h3 id="delivery-process" class="headerLink">
    <a href="#delivery-process" class="header-mark"></a>6.2 Delivery process</h3><p>As of now, we saw how to design, create and handle versions.</p>
<p>But, how to ship them?</p>
<p>If you based your source code management on top of GitFlow, you would be able now to deliver releases available from git tags and release branches.
The good point is you can indeed build your binaries on top of these.
The bad one, is you must design and automatise this whole process in a CI/CD pipeline.</p>
<p>Don&rsquo;t forget to share it to all the stakeholders, whether developers, integrators or project leaders who are often involved in version definition.</p>
<p><em>Hold on, these programs must be executed against a configuration, aren&rsquo;t they?</em></p>
<p>Nowadays, if we respect the <a href="https://12factor.net/" target="_blank" rel="noopener noreferrer">12 factors</a> during our design and implementation, the configuration is provided through environment variables.</p>
<p>To cut long story short, your API versioning will also impact your configuration.
Thus, it becomes mandatory to externalise it and version it.</p>
<p>You can do it in different ways.</p>
<p>You can, for example, deploy a configuration server.
It will provide configuration key/values regarding the version.
If you want a live example, you can <a href="https://github.com/alexandre-touret/rest-apis-versioning-solution" target="_blank" rel="noopener noreferrer">get an example in a workshop I held this year at SnowcampIO</a>.
The configuration is managed by <a href="https://docs.spring.io/spring-cloud-config/docs/current/reference/html/#_quick_start" target="_blank" rel="noopener noreferrer">Spring Cloud Config</a>.</p>
<p>You can also handle your configuration in your Helm Charts if you deploy your app on top of Kubernetes.
Your configuration values will be injected directly during the deployment.
Obviously if it&rsquo;s a monolith, it will be strongly difficult.</p>
<p>Why?</p>
<p>Because you will lose flexibility on version management and the capacity on deploying several versions of your service.</p>
<h2 id="authorisation-management" class="headerLink">
    <a href="#authorisation-management" class="header-mark"></a>7 Authorisation management</h2><p>Here is another point to potentially address when we implement API versioning.
When you apply an authorisation mechanism on your APIs using <a href="https://oauth.net/2/" target="_blank" rel="noopener noreferrer">OAuthv2</a> or <a href="https://openid.net/" target="_blank" rel="noopener noreferrer">OpenID Connect</a>, you would potentially have strong differences in your authorisation policies between two major releases.</p>
<p>You would then restrict the usage of a version to specific <a href="https://openid.net/specs/openid-connect-core-1_0.html#Terminology" target="_blank" rel="noopener noreferrer">clients or end users</a>.
One way to handle this is to use <a href="https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims" target="_blank" rel="noopener noreferrer">scopes</a> stored in claims.</p>
<p>In the use case we have been digging into, we can declare scopes such as: <code>book:v1:write</code> or <code>number:v2:read</code> to specify both the authorised action and the corresponding version.</p>
<p>For example, here is a request to get an <a href="https://oauth.net/2/access-tokens" target="_blank" rel="noopener noreferrer">access_token</a> from the v1 scopes:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http --form post :8009/oauth2/token <span class="nv">grant_type</span><span class="o">=</span><span class="s2">&#34;client_credentials&#34;</span> <span class="nv">client_id</span><span class="o">=</span><span class="s2">&#34;customer1&#34;</span> <span class="nv">client_secret</span><span class="o">=</span><span class="s2">&#34;secret1&#34;</span> <span class="nv">scope</span><span class="o">=</span><span class="s2">&#34;openid book:v1:write book:v1:write number:v1:read&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And the response could be:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;access_token&#34;</span>: <span class="s2">&#34;eyJraWQiOiIxNTk4NjZlMC0zNWRjLTQ5MDMtYmQ5MC1hMTM5ZDdjMmYyZjciLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjdXN0b21lcjIiLCJhdWQiOiJjdXN0b21lcjIiLCJuYmYiOjE2NzI1MDQ0MTQsInNjb3BlIjpbImJvb2t2Mjp3cml0ZSIsIm51bWJlcnYyOnJlYWQiLCJvcGVuaWQiLCJib29rdjI6cmVhZCJdLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDkiLCJleHAiOjE2Nz
</span></span></span><span class="line"><span class="cl"><span class="s2">I1MDQ3MTQsImlhdCI6MTY3MjUwNDQxNH0.gAaDcOaORse0NPIauMVK_rhFATqdKCTvLl41HSr2y80JEj_EHN9bSO5kg2pgkz6KIiauFQ6CT1NJPUlqWO8jc8-e5rMjwWuscRb8flBeQNs4-AkJjbevJeCoQoCi_bewuJy7Y7jqOXiGxglgMBk-0pr5Lt85dkepRaBSSg9vgVnF_X6fyRjXVSXNIDJh7DQcQQ-Li0z5EkeHUIUcXByh19IfiFuw-HmMYXu9EzeewofYj9Gsb_7qI0Ubo2x7y6W2tvzmr2PxkyWbmoioZdY9K0
</span></span></span><span class="line"><span class="cl"><span class="s2">nP6btskFz2hLjkL_aS9fHJnhS6DS8Sz1J_t95SRUtUrBN8VjA6M-ofbYUi5Pb97Q&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;expires_in&#34;</span>: 299,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;scope&#34;</span>: <span class="s2">&#34;book:v1:write number:v1:read openid book:v1:read&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;token_type&#34;</span>: <span class="s2">&#34;Bearer&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Next, you must validate every API call with the version exposed by your API gateway and the requested scope.
When a client tries to reach an API version with inappropriate scopes (e.g., using <code>book:v1:read</code> scope for a client which only uses the v2).</p>
<p>You will throw this error:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;invalid_scope&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="and-now-something-completely-different-how-to-avoid-versioning-while-evolving-your-api" class="headerLink">
    <a href="#and-now-something-completely-different-how-to-avoid-versioning-while-evolving-your-api" class="header-mark"></a>8 And now something completely different: How to avoid versioning while evolving your API?</h2><p>You probably understood that versioning is totally cumbersome.</p>
<p>Before putting in place all of these practices, there&rsquo;s another way to add functionalities on a NON-versioned API without impacting your existing customers.</p>
<p><strong>You can add new resources, operations and data without impacting your existing users.</strong>
{: .notice&ndash;warning}</p>
<p>With the help of serialization rules, your users would only use the data and operations they know and are confident with.
You will therefore bring backward compatibility to your API.</p>
<p>Just in case, you can anticipate API versioning by declaring a <code>V1</code> prefix on your API URL and stick to it while it&rsquo;s not mandatory to upgrade it.
That&rsquo;s how and why Spotify and Apple (see above) still stick to the <code>V1</code>.</p>
<h2 id="wrap-up" class="headerLink">
    <a href="#wrap-up" class="header-mark"></a>9 Wrap-up</h2><p>You probably understood when getting into this topic that API versioning is a project management issue with consequences that requires tackling difficult technical ones.
To sum up, you need to ask yourself these questions:</p>
<ul>
<li>Do I need it?</li>
<li>Can I postpone API versioning by dealing with serialisation rules and just adding new data or operations?</li>
<li>Is my architecture design compatible?</li>
<li>Are my source code management and delivery practices compatible?</li>
</ul>
<p>After coping with all these points, if you must implement API versioning, you would need to onboard all the different stakeholders, not just developers, to be sure your whole development and delivery process is well aligned with practice.</p>
<p>And I forgot: <em>Good luck!</em></p>
]]></description></item><item><title>Migrer un site Jekyll sur Hugo</title><link>https://blog.touret.info/2023/03/03/migrer-un-site-jekyll-sur-hugo/</link><pubDate>Fri, 03 Mar 2023 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/03/03/migrer-un-site-jekyll-sur-hugo/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/03/artiom-vallat-wKqm1UQMRqA-unsplash.webp" referrerpolicy="no-referrer">
            </div><p>Il y a deux ans déjà, j&rsquo;ai migré <a href="https://blog.touret.info/2021/12/06/migrer-un-blog-wordpress-vers-github-io/" target="_blank" rel="noopener noreferrer">mon site Wordpress sur un site statique hébergé sur Github Pages</a>.
Ce dernier était basé sur <a href="https://www.ruby-lang.org/en/documentation/" target="_blank" rel="noopener noreferrer">Ruby</a>, <a href="https://www.ruby-lang.org/en/documentation/" target="_blank" rel="noopener noreferrer">Jekyll</a> et <a href="https://mmistakes.github.io/minimal-mistakes/" target="_blank" rel="noopener noreferrer">Minimal mistakes</a>.</p>
<p>Bien que le projet Minimal Mistakes ne donnait plus trop de signes de vie, le rendu convenait.</p>
<p>Cependant, j&rsquo;étais bloqué sur différents points:</p>
<ul>
<li>La gestion d&rsquo;articles en anglais et français</li>
<li>Le thème dark (inutile donc indispensable)</li>
<li>Quelques fonctionnalités manquantes: par ex. <a href="http://mermaid.js.org/" target="_blank" rel="noopener noreferrer">MermaidJS</a></li>
</ul>
<p>J&rsquo;ai donc décidé de le migrer sur <a href="https://gohugo.io/" target="_blank" rel="noopener noreferrer">Hugo</a>.
Ce générateur de site est basé sur <a href="https://go.dev" target="_blank" rel="noopener noreferrer">Go</a> et est très rapide d&rsquo;exécution.</p>
<h2 id="démarrage" class="headerLink">
    <a href="#d%c3%a9marrage" class="header-mark"></a>1 Démarrage</h2><p>Je n&rsquo;ai pas migré le site comme <a href="https://gohugo.io/commands/hugo_import_jekyll/" target="_blank" rel="noopener noreferrer">indiquait la documentation</a>.</p>
<p>J&rsquo;ai préféré créer un nouveau site et copier coller le contenu existant, à savoir les images et les articles.</p>
<p>Je vous conseille de lire <a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener noreferrer">la documentation</a> qui est bien faite.</p>
<p>Ensuite, j&rsquo;ai choisi le <a href="https://themes.gohugo.io/themes/loveit/" target="_blank" rel="noopener noreferrer">thème LoveIt</a>.
Pour l&rsquo;installer, il suffit de cloner le repo dans le répertoire <code>themes</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reprise-de-données" class="headerLink">
    <a href="#reprise-de-donn%c3%a9es" class="header-mark"></a>2 Reprise de données</h2><p>J&rsquo;ai copié les éléments suivants:</p>
<ul>
<li>Les fichiers statiques que j&rsquo;avais à disposition (<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site" target="_blank" rel="noopener noreferrer"><code>CNAME</code></a>, <code>robots.txt</code>) dans le répertoire <code>static</code></li>
<li>Les images dansle répertoire <code>static/assets/images</code></li>
<li>Les posts et pages statiques</li>
</ul>
<h2 id="travail-sur-les-posts-et-images" class="headerLink">
    <a href="#travail-sur-les-posts-et-images" class="header-mark"></a>3 Travail sur les posts et images</h2><h3 id="les-posts" class="headerLink">
    <a href="#les-posts" class="header-mark"></a>3.1 Les posts</h3><p>J&rsquo;ai ensuite modifié les noms des fichiers en enlevant les dates qui les préfixaient.</p>
<p>Ensuite, j&rsquo;ai modifié les en-têtes de chaque post.
J&rsquo;ai pu le faire en automatisant avec VS CODE.</p>
<p>Voici le pattern que j&rsquo;ai modifié:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">header</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">teaser</span><span class="p">:</span><span class="w"> </span><span class="l">/assets/images/2018/02/2000px-cygwin_logo-svg.png</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>en</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">featuredImagePreview</span><span class="p">:</span><span class="w"> </span><span class="l">/assets/images/2022/12/review.webp</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Ca c&rsquo;était le plus facile&hellip;</p>
<h3 id="les-images" class="headerLink">
    <a href="#les-images" class="header-mark"></a>3.2 Les images</h3><p>Dans chaque post, j&rsquo;ai revu les images et leur positionnement.</p>
<p>J&rsquo;ai donc passé chaque article manuellement. C&rsquo;était réellement fastidieux. Pour être totalement franc, je n&rsquo;ai paas cherché à automatiser ça. Je pense qu&rsquo;un script shell, python aurait pu faire l&rsquo;affaire.
Heureusement, je n&rsquo;en avais pas une centaine&hellip;</p>
<p>J&rsquo;ai ajouté quand je pouvais l&rsquo;en-tête suivant (adaptez le chemin vers l&rsquo;image ;-) ):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">featuredImage</span><span class="p">:</span><span class="w"> </span><span class="l">/assets/images/2022/12/review.webp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">images</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/assets/images/2022/12/review.webp&#34;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Le premier attribut permet d&rsquo;avoir une image d&rsquo;en-tête pour l&rsquo;article.
Le second permet d&rsquo;avoir l&rsquo;image lors d&rsquo;un partage sur un réseau social (ex. Twitter)</p>
<p>j&rsquo;ai ajouté le code suivant pour centrer les images:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">style</span> <span class="err">&#34;</span><span class="na">text-align:center</span><span class="err">&#34;</span> <span class="p">&gt;</span><span class="err">}}</span>
</span></span><span class="line"><span class="cl">![<span class="nt">dataflow</span>](<span class="na">/assets/images/2022/08/maksym-tymchyk-vHO-yT1BDWk-unsplash.webp</span>)
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">style</span> <span class="p">&gt;</span><span class="err">}}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="configuration" class="headerLink">
    <a href="#configuration" class="header-mark"></a>4 Configuration</h2><p>Pour garder les mêmes URLs, j&rsquo;ai choisi de modifier le pattern d&rsquo; URL pour inclure la date. C&rsquo;est un vieux reliquat de mon blog Wordpress.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"> <span class="p">[</span><span class="nx">languages</span><span class="p">.</span><span class="nx">fr</span><span class="p">.</span><span class="nx">permalinks</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">posts</span> <span class="p">=</span> <span class="s1">&#39;/:year/:month/:day/:filename/&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Pour le reste, j&rsquo;ai copié collé <a href="https://github.com/dillonzq/LoveIt/blob/master/exampleSite/config.toml" target="_blank" rel="noopener noreferrer">l&rsquo;exemple fourni par le thème</a> et renseigné les champs en fonction de ce que je voulais.</p>
<p>J&rsquo;ai ensuite adapté <a href="https://github.com/alexandre-touret/alexandre-touret.github.io/blob/main/config.toml#L643" target="_blank" rel="noopener noreferrer">le multi langue pour avoir la possibilité de faire des articles en anglais et en français</a>.</p>
<h3 id="moteur-de-recherche" class="headerLink">
    <a href="#moteur-de-recherche" class="header-mark"></a>4.1 Moteur de recherche</h3><p>J&rsquo;utilise <a href="https://lunrjs.com/" target="_blank" rel="noopener noreferrer">Lunr</a>. Voici la configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl">    <span class="p">[</span><span class="nx">languages</span><span class="p">.</span><span class="nx">en</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">search</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">enable</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">        <span class="nx">type</span> <span class="p">=</span> <span class="s2">&#34;lunr&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">contentLength</span> <span class="p">=</span> <span class="mi">4000</span>
</span></span><span class="line"><span class="cl">        <span class="nx">placeholder</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">maxResultLength</span> <span class="p">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">        <span class="nx">snippetLength</span> <span class="p">=</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">        <span class="nx">highlightTag</span> <span class="p">=</span> <span class="s2">&#34;em&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">absoluteURL</span> <span class="p">=</span> <span class="kc">false</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Il faut également penser à activer la sortie au format JSON:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># Options to make hugo output files</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">outputs</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">home</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;RSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JSON&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">page</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;MarkDown&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">section</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;RSS&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">taxonomy</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;RSS&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">taxonomyTerm</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="commentaires" class="headerLink">
    <a href="#commentaires" class="header-mark"></a>4.2 Commentaires</h3><p>A l&rsquo;instar de mon blog avec Jekyll, j&rsquo;utilise <a href="https://utteranc.es/" target="_blank" rel="noopener noreferrer">Utteranc.es</a>.
Voici la configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"> <span class="p">[</span><span class="nx">params</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">comment</span><span class="p">.</span><span class="nx">utterances</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">enable</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">        <span class="c"># owner/repo</span>
</span></span><span class="line"><span class="cl">        <span class="nx">repo</span> <span class="p">=</span> <span class="s2">&#34;alexandre-touret/alexandre-touret.github.io&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">issueTerm</span> <span class="p">=</span> <span class="s2">&#34;pathname&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">label</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">lightTheme</span> <span class="p">=</span> <span class="s2">&#34;github-light&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">darkTheme</span> <span class="p">=</span> <span class="s2">&#34;github-dark&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>5 Conclusion</h2><p>Vous aurez bien compris que ma motivation principale derrière cette migration était d&rsquo; avoir un support multi langue un peu sympa.
Vous avez dans cet article les principales actions que j&rsquo;ai réalisé.</p>
<p>N&rsquo;hésitez pas à regarder <a href="https://github.com/alexandre-touret/alexandre-touret.github.io/blob/main/config.toml" target="_blank" rel="noopener noreferrer">la configuration</a> et <a href="https://github.com/alexandre-touret/alexandre-touret.github.io/tree/main/content/posts" target="_blank" rel="noopener noreferrer">les articles</a> pour plus de détails.</p>
]]></description></item><item><title>2022 en quelques chiffres</title><link>https://blog.touret.info/2022/12/31/2022-wrap-up/</link><pubDate>Sat, 31 Dec 2022 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2022/12/31/2022-wrap-up/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2022/12/review.webp" referrerpolicy="no-referrer">
            </div><p><em>You can read the English version below</em></p>
<h2 id="2022-en-quelques-mots" class="headerLink">
    <a href="#2022-en-quelques-mots" class="header-mark"></a>1 2022 en quelques mots</h2><p>2023 est tout proche.
Il est temps de faire un rapide bilan sur cette année 2022 (d&rsquo;un point pro).</p>
<p>Après avoir changé de projet en début d&rsquo;année, j&rsquo;ai pu, grâce à mon employeur <a href="https://worldline.com/" target="_blank" rel="noopener noreferrer">Worldline</a>, participer en tant que speaker à</p>
<ul>
<li>8 conférences en français et anglais</li>
<li>2 meetups</li>
<li>une présentation en ligne à <a href="https://www.malt-academy.com/" target="_blank" rel="noopener noreferrer">Malt Academy</a></li>
</ul>
<p>J&rsquo;ai également écrit 6 articles sur <a href="https://blog.touret.info/" target="_blank" rel="noopener noreferrer">mon blog</a> et 4 sur le <a href="https://blog.worldline.tech/authors/#alexandre-touret" target="_blank" rel="noopener noreferrer">blog d&rsquo;ingénierie de Worldline</a>.</p>
<p>Je tiens à remercier mon employeur pour me permettre de vivre cette expérience ainsi que les organisatrices et organisateurs pour leur confiance et leur accueil (vous vous reconnaitrez).
Merci également à toutes celles et ceux qui m&rsquo;ont aidé également à monter en compétence en tant que speaker.</p>
<h2 id="et-maintenant" class="headerLink">
    <a href="#et-maintenant" class="header-mark"></a>2 Et maintenant?</h2><p>Grâce à l&rsquo;initiative <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>Tech-Rel de Worldline, j&rsquo;ai pu faire des super rencontres et progresser techniquement dans certains domaines : Préparer et proposer un sujet technique vous impose de le creuser à fond et de le maîtriser.
Pour l&rsquo;année prochaine, on a quelques idées. J&rsquo;espère pouvoir communiquer là-dessus rapidement.</p>
<p>Je vous souhaite en attendant un bon réveillon et si vous découvrez mon article en 2023 une bonne année.</p>
<hr>
<h2 id="2022-in-few-words" class="headerLink">
    <a href="#2022-in-few-words" class="header-mark"></a>3 2022 in few words</h2><p>2023 is coming.
It is time to review 2022 in a professional point of view.</p>
<p>After moving on to another project early 2022, I had the opportunity on behalf of my company Worldline, to participate as a speaker to:</p>
<ul>
<li>8 tech conferences</li>
<li>2 meetups</li>
<li>1 online presentation at <a href="https://www.malt-academy.com/" target="_blank" rel="noopener noreferrer">Malt Academy</a></li>
</ul>
<p>I also wrote 6 articles on <a href="https://blog.touret.info/" target="_blank" rel="noopener noreferrer">my blog</a> and 4 on the <a href="https://blog.worldline.tech/authors/#alexandre-touret" target="_blank" rel="noopener noreferrer">Worldline engineering blog</a>.</p>
<p>Thank you to my employer for giving me this opportunity and the organisers for their trust and their hospitality. I&rsquo;m pretty sure you will recognise yourselves.
Thanks then to who helped me in my speaker journey.</p>
<h2 id="and-now-something-completely-different" class="headerLink">
    <a href="#and-now-something-completely-different" class="header-mark"></a>4 And now, something completely different?</h2><p>On behalf of the <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>Worldline tech rel initiative, I had the chance to meet great people and move forward in some technical domains. Drawing up and submitting a talk about a technical topic requires you to dig into it and be proficient on it.
I already have ideas for the next year. I hope communicating about it shortly.</p>
<p>Best wishes for the new year eve and if you come across this article in 2023: Happy new year!!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>c&rsquo;est comme des dev rel mais on essaye d&rsquo;inclure au delà des devs (ex. les OPS, SRE).&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>It is just like dev rel, but we would like to include all the tech crew (e.g., OPS &amp; SRE)&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item><item><title>Migrer son application Spring Boot vers la version 3</title><link>https://blog.touret.info/2022/12/22/migration_springboot3/</link><pubDate>Thu, 22 Dec 2022 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2022/12/22/migration_springboot3/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2022/12/spring.webp" referrerpolicy="no-referrer">
            </div><p>Pour ce dernier article de l&rsquo;année 2022, voici un rapide retour d&rsquo;expérience.</p>
<p>Je suis actuellement en cours de préparation d&rsquo;un workshop pour <a href="https://snowcamp.io/fr/" target="_blank" rel="noopener noreferrer">l&rsquo;édition 2023 de SnowcampIO</a>.
J&rsquo;aborderai dans <a href="https://sessionize.com/s/alexandre-touret/rest-apis-versioning-hands-on/60048" target="_blank" rel="noopener noreferrer">ce dernier le versioning des APIs REST</a>.
Pour illustrer ce sujet ô combien épineux, j&rsquo;ai réalisé une plateforme &ldquo;microservices&rdquo; en utilisant différents composants de la <a href="https://spring.io/" target="_blank" rel="noopener noreferrer">stack Spring</a>.</p>
<table>
<thead>
<tr>
<th>Container</th>
<th>Tools</th>
<th>Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td>API Gateway</td>
<td>Spring Cloud Gateway 2022.0.0-RC2</td>
<td></td>
</tr>
<tr>
<td>Bookstore API</td>
<td>JAVA 17,Spring Boot 3.0.X</td>
<td></td>
</tr>
<tr>
<td>ISBN API</td>
<td>JAVA 17,Spring Boot 3.0.X</td>
<td></td>
</tr>
<tr>
<td>Configuration Server</td>
<td>Spring Cloud Config 2022.0.0-RC2</td>
<td></td>
</tr>
<tr>
<td>Database</td>
<td>PostgreSQL</td>
<td></td>
</tr>
<tr>
<td>Authorization Server</td>
<td>JAVA 17,Spring Boot 3.0.X, Spring Authorization Server 1.0.0</td>
<td></td>
</tr>
</tbody>
</table>
<p>En résumé, j&rsquo;utilise <a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">Spring Boot</a>, <a href="https://spring.io/cloud" target="_blank" rel="noopener noreferrer">Cloud</a>, <a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener noreferrer">Security</a>, <a href="https://spring.io/projects/spring-authorization-server" target="_blank" rel="noopener noreferrer">Authorization Server</a>, <a href="https://spring.io/projects/spring-cloud-circuitbreaker" target="_blank" rel="noopener noreferrer">Circuit Breaker</a>, <a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener noreferrer">Spring Data</a>,&hellip;</p>
<p>J&rsquo;ai démarré le développement avant <a href="https://spring.io/blog/2022/11/24/spring-boot-3-0-goes-ga" target="_blank" rel="noopener noreferrer">l&rsquo;annonce officielle de la version 3.0 de Spring Boot</a>.
Ce n&rsquo;était pas réellement obligatoire pour cet atelier, mais j&rsquo;ai souhaité quand même migrer cette application dans la dernière version de Spring Boot/Framework.</p>
<p>Je vais décrire dans cet article comment j&rsquo;ai réussi à migrer toute cette stack et les choix que j&rsquo;ai fait pour que ça fonctionne.</p>
<p>Bien évidemment, cette application n&rsquo;est pas une <em>&ldquo;vraie&rdquo;</em> application en production.
Par exemple, je n&rsquo;ai qu&rsquo;une seule entité JPA&hellip;
Cependant, je la trouve représentative et espère (très modestement) que mon retour d&rsquo;expérience pourra servir.</p>
<p><a href="https://github.com/alexandre-touret/rest-apis-versioning-workshop/pull/11/files" target="_blank" rel="noopener noreferrer">La Pull Request correspondante est disponible sur GitHub</a>.</p>
<h2 id="pré-requis" class="headerLink">
    <a href="#pr%c3%a9-requis" class="header-mark"></a>1 Pré-requis</h2><p>Une documentation existe.
Vous pouvez la consulter <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide" target="_blank" rel="noopener noreferrer">ici</a>.
Il existe aussi plusieurs articles sur le blog du projet Spring. Voici <a href="https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0" target="_blank" rel="noopener noreferrer">un exemple</a>.</p>
<h2 id="dépendances-et-configuration-des-plugins" class="headerLink">
    <a href="#d%c3%a9pendances-et-configuration-des-plugins" class="header-mark"></a>2 Dépendances et configuration des plugins</h2><h3 id="jdk" class="headerLink">
    <a href="#jdk" class="header-mark"></a>2.1 JDK</h3><p>Pour Spring Boot 3, il faut impérativement utiliser un <a href="https://openjdk.org/projects/jdk/17/" target="_blank" rel="noopener noreferrer">JDK &gt;=17</a>.</p>
<h3 id="mises-à-jour" class="headerLink">
    <a href="#mises-%c3%a0-jour" class="header-mark"></a>2.2 Mises à jour</h3><p>L&rsquo;une des premières actions à réaliser est de migrer votre application vers <a href="https://spring.io/blog/2022/06/23/spring-boot-2-7-1-available-now" target="_blank" rel="noopener noreferrer">la version 2.7</a>.</p>
<p>À l&rsquo;heure où j&rsquo;écris cet article, la version de Spring Cloud est encore en version RC.
J&rsquo;ai donc dû ajouter le repository <em>&ldquo;milestone&rdquo;</em> de Spring:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">maven</span> <span class="o">{</span> <span class="n">url</span> <span class="s1">&#39;https://repo.spring.io/milestone&#39;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">mavenCentral</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Ensuite, j&rsquo;ai utilisé les versions suivantes pour les différents composants spring:</p>
<ul>
<li>Spring Boot : 3.0.0</li>
<li>Spring Cloud : 2022.0.0-RC2</li>
<li>Spring Dependency Management : 1.1.0</li>
</ul>
<p>Dans mon application, j&rsquo;utilisais certains plugins Gradle pour la génération du code notamment <a href="https://openapi-generator.tech/docs/generators/spring/" target="_blank" rel="noopener noreferrer">OpenAPIGenerator</a>. Pour ce dernier, j&rsquo;ai ajouté un paramètre pour le rendre compatible avec spring boot 3:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"> <span class="n">useSpringBoot3</span>       <span class="o">:</span> <span class="s2">&#34;true&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Bref, il faut impérativement tous les mettre à jour et vérifier la compatibilité !</p>
<h2 id="ajout-de-nouvelles-dépendances" class="headerLink">
    <a href="#ajout-de-nouvelles-d%c3%a9pendances" class="header-mark"></a>3 Ajout de nouvelles dépendances</h2><p>Pour vérifier la pertinence de certaines propriétés dans la nouvelle version, Spring a mis à disposition ce plugin:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl">   <span class="n">runtimeOnly</span> <span class="s1">&#39;org.springframework.boot:spring-boot-properties-migrator&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Il permet de notifier à l&rsquo;exécution si un paramètre est déprécié ou totalement inutile.</p>
<h2 id="migration-namespace-javax-vers-jakartaee" class="headerLink">
    <a href="#migration-namespace-javax-vers-jakartaee" class="header-mark"></a>4 Migration namespace javax vers jakartaee</h2><p>Selon votre code, les dépendances que vous pouvez avoir, cette étape pourra aller du renommage des import javax vers jakarta à d&rsquo;innombrables maux de tête.</p>
<p>Si vous utilisez Spring Boot au-dessus d&rsquo;un Tomcat (c.-à-d. en mode <em>old school</em>), il  vous faudra mettre à jour le conteneur de servlet à une version compatible.</p>
<p>Dans mon application, je n&rsquo;ai eu qu&rsquo;à modifier les imports dans les entités,  filtres et méthodes annotées par l&rsquo;annotation <code>@PostConstruct()</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">jakarta.persistence.Column</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">jakarta.persistence.Entity</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">jakarta.persistence.GeneratedValue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">jakarta.persistence.GenerationType</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Sur ce sujet, Jetbrains a <a href="https://www.jetbrains.com/idea/guide/tutorials/migrating-javax-jakarta/" target="_blank" rel="noopener noreferrer">publié un tutoriel sur la migration vers Jakarta</a>.</p>
<h2 id="distributed-tracing-et-observabilité" class="headerLink">
    <a href="#distributed-tracing-et-observabilit%c3%a9" class="header-mark"></a>5 Distributed Tracing et observabilité</h2><p>Spring embarque désormais plusieurs fonctionnalités liées à l&rsquo;observabilité sous forme de starters.
Dans mon cas, <a href="https://blog.worldline.tech/2021/09/22/enabling_distributed_tracing_in_spring_apps.html" target="_blank" rel="noopener noreferrer">j&rsquo;avais embarqué opentracing (qui était déprécié depuis quelques temps) et me connectait sur Jaeger</a>.</p>
<p>J&rsquo;ai suivi <a href="https://spring.io/blog/2022/10/12/observability-with-spring-boot-3" target="_blank" rel="noopener noreferrer">cet article</a> paru sur le blog de Spring.
J&rsquo;ai par conséquent basculé sur <a href="https://zipkin.io/" target="_blank" rel="noopener noreferrer">Zipkin</a> (pour mon Workshop, l&rsquo;utilisation du distributed tracing est un peu la cerise sur le gâteau).</p>
<p>Voici les starters que j&rsquo;ai intégrés :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.micrometer:micrometer-tracing-bridge-brave&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.zipkin.reporter2:zipkin-reporter-brave&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.opentelemetry:opentelemetry-exporter-zipkin&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-aop&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>J&rsquo;ai par la suite intégré les propriétés suivantes dans la configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="nt">zipkin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">base-url</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:9411</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sender</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">management</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tracing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sampling</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">probability</span><span class="p">:</span><span class="w"> </span><span class="m">1.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">distribution</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">percentiles-histogram</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">requests</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Je pense que j&rsquo;aurai pu faire fonctionner <a href="https://www.jaegertracing.io/" target="_blank" rel="noopener noreferrer">Jaeger</a>.
Je n&rsquo;ai pas voulu perdre de temps (SnowcampIO arrive bientôt&hellip;).</p>
<h2 id="securité" class="headerLink">
    <a href="#securit%c3%a9" class="header-mark"></a>6 Securité</h2><p>J&rsquo;ai eu quelques soucis après avoir mis à jour Spring Authorization Server et Spring Security.
Je pense que la version précédente de Spring était plus permissive sur l&rsquo;injection et le nom des beans chargés dans les classes Configuration.</p>
<p>J&rsquo;ai donc revu <a href="https://github.com/alexandre-touret/rest-apis-versioning-solution/pull/3/files#diff-8e3d0d23edcf12597216d4469b5a3576c0b4d3d24a4cee740cb2ae67481fe006" target="_blank" rel="noopener noreferrer">la validation côté gateway et plus particulièrement la validation du jeton JWT</a>.</p>
<p>J&rsquo;ai dû notamment ajouter le paramètre <code>jwk-set-uri</code> qui est obligatoire maintenant :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resourceserver</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">jwt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">jwk-set-uri</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8009</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Je n&rsquo;ai pas eu de <a href="https://github.com/spring-projects/spring-authorization-server/" target="_blank" rel="noopener noreferrer">réels problèmes coté Authorization Server car j&rsquo;avais déjà migré vers la version 0.4.0</a>.</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>7 Conclusion</h2><p>Vous l&rsquo;aurez compris, si vous faites l&rsquo;effort de suivre régulièrement les versions de Spring, vous devriez venir à bout facilement de la migration vers la dernière version de Spring.</p>
<p>Néanmoins, sur des projets conséquents (et je ne parle pas de ceux où il n&rsquo;y a de tests automatisés&hellip;) ça peut s&rsquo;avérer coûteux.
Certaines actions et contournements peuvent prendre du temps (ex. javax &ndash;&gt; jakarta).</p>
<p>Enfin, je vous conseille d&rsquo;attendre la première version mineure et la version définitive de Spring Cloud avant de vous lancer pour <em>&ldquo;de vrai&rdquo;</em>.
Bien que Spring ait fait un effort de documentation pour la migration, il est plus sage d&rsquo;attendre que les premiers correctifs soient publiés avant de vous lancer.</p>
]]></description></item></channel></rss>