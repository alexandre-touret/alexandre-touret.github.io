<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Grafana - Tag - Alexandre Touret's Blog</title><link>https://blog.touret.info/tags/grafana/</link><description>Grafana - Tag - Alexandre Touret's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright><lastBuildDate>Tue, 16 Jan 2024 19:00:43 +0100</lastBuildDate><atom:link href="https://blog.touret.info/tags/grafana/" rel="self" type="application/rss+xml"/><item><title>Mastering Observability: Empowering Developers from Zero to Hero with Spring &amp; the Grafana stack</title><link>https://blog.touret.info/2024/01/16/observability-from-zero-to-hero/</link><pubDate>Tue, 16 Jan 2024 19:00:43 +0100</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2024/01/16/observability-from-zero-to-hero/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2024/01/felipe-correia-ScQngs6oO1E-unsplash.webp" referrerpolicy="no-referrer">
            </div><h2 id="the-sad-reality" class="headerLink">
    <a href="#the-sad-reality" class="header-mark"></a>1 The sad reality</h2><p>Picture this: it&rsquo;s Friday afternoon, and you&rsquo;re eagerly looking forward to unwinding for the weekend.
Suddenly, an Ops engineer alerts you about a critical issue—a stubborn HTTP 500 error that&rsquo;s causing a major roadblock.</p>
<p>Despite the dedicated efforts of the Ops engineers, the root cause remains elusive due to a lack of contextual information.</p>
<p>Hours pass by, but you take it upon yourself to delve into the problem.
Eventually, after reproducing and debugging the issue on your computer, you uncover the issue.</p>
<p>Does this sound like science fiction? If you&rsquo;ve experienced a similar scenario, you&rsquo;re likely familiar with the challenges posed by unidentified end users and their unique usage patterns—enter Ops and observability!</p>
<p>I&rsquo;ve previously delved into the topic of observability.
Here are a bunch of articles I wrote on this blog or on the <a href="https://blog.worldline.tech" target="_blank" rel="noopener noreferrer">Worldline Tech Blog</a>:</p>
<ul>
<li><a href="https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/" target="_blank" rel="noopener noreferrer">Enhancing Asynchronous Transaction Monitoring: Implementing Distributed Tracing in Apache Camel Applications with OpenTelemetry</a></li>
<li><a href="https://blog.touret.info/2021/07/26/observabilite-et-circuit-breaker-avec-spring/" target="_blank" rel="noopener noreferrer">Observabilité et Circuit Breaker avec Spring</a></li>
<li><a href="https://blog.worldline.tech/2021/09/22/enabling_distributed_tracing_in_spring_apps.html" target="_blank" rel="noopener noreferrer">Enabling distributed tracing on your microservices Spring app using Jaeger and OpenTracing</a></li>
</ul>
<p>In this article, I aim to highlight the importance of putting in place observability during the earliest stages of a project.
I will then outline how to merge logs and traces from a good old <a href="https://spring.io/projects/spring-boot/" target="_blank" rel="noopener noreferrer">Spring Boot application</a> on the <a href="https://grafana.com/" target="_blank" rel="noopener noreferrer">Grafana Stack</a> to gain clearer insights into your platform&rsquo;s workings.
By doing so, you can transform your relationship with Ops teams, making them your best friends.</p>
<div class="details admonition question open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-question-circle fa-fw"></i>What about the code?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The examples provided in this article come from <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero" target="_blank" rel="noopener noreferrer">this project hosted on Github</a>.</div>
        </div>
    </div>
<h2 id="a-definition-of-observability" class="headerLink">
    <a href="#a-definition-of-observability" class="header-mark"></a>2 A definition of Observability</h2><p>We can shortly define it as this:</p>
<blockquote>
<p>Observability is the ability <strong>to understand the internal state of a complex system</strong>.
When a system is observable, a user can <strong>identify the root cause</strong> of a performance problem by examining the data it produces, without additional testing or coding.</p>
<p>This is one of the ways in which <strong>quality of service</strong> issues can be addressed.</p>
</blockquote>
<h2 id="a-short-presentation-of-the-grafana-stack" class="headerLink">
    <a href="#a-short-presentation-of-the-grafana-stack" class="header-mark"></a>3 A short presentation of the Grafana stack</h2><p><a href="https://grafana.com/oss/" target="_blank" rel="noopener noreferrer">The Grafana stack</a> aims at a tool which allows you to query, visualise, alert and explore all of your metrics.
You can aggregate them through a <a href="https://grafana.com/docs/grafana/latest/datasources/" target="_blank" rel="noopener noreferrer">wide range of data sources</a>.
With regard to the topic of this article,it will provide us all you need to collect logs, metrics and traces (and beyond) to monitor and understand the behaviour of your platforms.</p>
<p>I will therefore particularly focus on:</p>
<ul>
<li><a href="https://grafana.com/oss/grafana/" target="_blank" rel="noopener noreferrer">Grafana</a>: The dashboard engine</li>
<li><a href="https://grafana.com/oss/loki/" target="_blank" rel="noopener noreferrer">Loki</a>: The log storage engine</li>
<li><a href="https://grafana.com/oss/tempo/" target="_blank" rel="noopener noreferrer">Tempo</a>: The trace storage engine</li>
</ul>
<p>By the way, I also configured in this project a <a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener noreferrer">Prometheus TSDB to store metrics</a>.</p>
<p>To get it started easily, I just created a <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/tree/main/docker" target="_blank" rel="noopener noreferrer">Docker Compose stack to run it on your desktop</a>.</p>
<p>You can run it with these commands:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> docker
</span></span><span class="line"><span class="cl">docker compose up
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="logs-traces--monitoring" class="headerLink">
    <a href="#logs-traces--monitoring" class="header-mark"></a>4 Logs, Traces &amp; Monitoring</h2><p>Let&rsquo;s go back to the basics: To make a system fully observable, the following abilities must be implemented:</p>
<ul>
<li>Logs</li>
<li>Traces</li>
<li>Metrics</li>
</ul>
<p>They can be defined as follows:</p>
<p><figure><img
        
        loading="lazy"
        src="/assets/images/2024/01/image-2023-8-1_9-44-11.webp"
        srcset="/assets/images/2024/01/image-2023-8-1_9-44-11.webp, /assets/images/2024/01/image-2023-8-1_9-44-11.webp 1.5x, /assets/images/2024/01/image-2023-8-1_9-44-11.webp 2x"
        title="monitoring" ></figure></p>
<h2 id="logs" class="headerLink">
    <a href="#logs" class="header-mark"></a>5 Logs</h2><p>When a program fails, OPS usually tries to identify the underlying error analyzing log files.
It could be either reading the application log files or using a log aggregator such as Elastic Kibana or Splunk.</p>
<p>In my opinion, most of the time developers don&rsquo;t really care about this matter.
It is mainly due to they did not experience such a trouble.</p>
<p>For two years, I had to administrate a proprietary customer relationship management solution.
The only way to analyse errors was navigating through the logs, using the most appropriate error levels to get the root cause.
We didn&rsquo;t have access to the source code (Long live to open source programs).
Hopefully the log management system was really efficient.
It helped us get into this product and administrate it efficiently.</p>
<p>Furthermore, I strongly think we should systematise such experiences for developers.
It could help them (us) know what is behind the curtain and make more observable and better programs.</p>
<h3 id="key-principles" class="headerLink">
    <a href="#key-principles" class="header-mark"></a>5.1 Key principles</h3><p>You must first dissociate the logs you make while you code (e.g., for debugging) from the production logs.
The first should normally remove the first.
For the latter, you should apply some of these principles:</p>
<ul>
<li>Identify and use the most appropriate level (<code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>,&hellip;)</li>
<li>Provide a clear and useful message for OPS (yes you make this log for him/her)</li>
<li>Provide business context (e.g., the creation of the contract <code>123456</code> failed)</li>
<li>Logs must be read by an external tool (e.g., using a log aggregator)</li>
<li>Logs must not expose sensitive data: You must think about GDPR, PCI DSS standards</li>
</ul>
<p>If you want to dig into log levels and the importance to indicate contextual information into your logs, I suggest you reading <a href="https://blog.worldline.tech/2020/01/22/back-to-basics-logging.html" target="_blank" rel="noopener noreferrer">this article from my colleague Nicolas Carlier</a>.</p>
<h2 id="what-about-grafana-loki" class="headerLink">
    <a href="#what-about-grafana-loki" class="header-mark"></a>6 What about Grafana Loki</h2><p>For this test, I chose to use <a href="https://github.com/loki4j/loki-logback-appender" target="_blank" rel="noopener noreferrer">loki-logback-appender</a> to send the logs to Loki.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>About this appender<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I chose to use this appender for testing purpose.
If you deploy your application on top of Kubernetes, you would probably opt for a more suitable solution such as <a href="https://www.fluentd.org/" target="_blank" rel="noopener noreferrer">FluentD</a>.</div>
        </div>
    </div>
<p>The configuration for a Spring Boot application is pretty straightforward:</p>
<p>You must add first the appender to your classpath:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;com.github.loki4j:loki-logback-appender:1.4.2&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>and create a <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero-/blob/main/src/main/resources/logback-spring.xml" target="_blank" rel="noopener noreferrer"><code>logback-spring.xml</code></a> to configure it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"> <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&#34;LOKI&#34;</span> <span class="na">class=</span><span class="s">&#34;com.github.loki4j.logback.Loki4jAppender&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;http&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;url&gt;</span>http://localhost:3100/loki/api/v1/push<span class="nt">&lt;/url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/http&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;format&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;label&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;pattern&gt;</span>app=${name},host=${HOSTNAME},level=%level<span class="nt">&lt;/pattern&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;readMarkers&gt;</span>true<span class="nt">&lt;/readMarkers&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/label&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;message&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;pattern&gt;</span>
</span></span><span class="line"><span class="cl">                    {&#34;level&#34;:&#34;%level&#34;,&#34;class&#34;:&#34;%logger{36}&#34;,&#34;thread&#34;:&#34;%thread&#34;,&#34;message&#34;: &#34;%message&#34;,&#34;requestId&#34;: &#34;%X{X-Request-ID}&#34;}
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/pattern&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/message&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/format&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/appender&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>Et voilà!</em></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>About the format<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">It is just my 2 cents: more and more I tend to produce structured logs using JSON for instance.
It is usually easier to manipulate them all along the log ingestion tools chain (e.g, with <a href="https://www.elastic.co/fr/logstash/" target="_blank" rel="noopener noreferrer">LogStash</a>.</div>
        </div>
    </div>
<p>After restarting your application:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gradle bootRun
</span></span></code></pre></td></tr></table>
</div>
</div><p>After running some API calls with the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http :8080/api/events
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can now get logs browsing Grafana</p>
<p><figure><img
        
        loading="lazy"
        src="/assets/images/2024/01/Loki-Grafana.webp"
        srcset="/assets/images/2024/01/Loki-Grafana.webp, /assets/images/2024/01/Loki-Grafana.webp 1.5x, /assets/images/2024/01/Loki-Grafana.webp 2x"
        title="Loki" ></figure></p>
<h2 id="traces" class="headerLink">
    <a href="#traces" class="header-mark"></a>7 Traces</h2><p>Upon initial inspection, one might consider the existing setup sufficient. However, I highly recommend delving into the realm of <a href="https://research.google/pubs/pub36356/" target="_blank" rel="noopener noreferrer">Distributed Tracing</a>, a technology I have previously introduced (refer to the aforementioned discussion).
Not only it will be first really useful when you deploy distributed architectures but also for the other kind of platforms.</p>
<p>The true value of distributed tracing becomes evident not only in the deployment of distributed architectures but across various platforms. In the complex landscape of production issues, identifying the root cause or understanding why a specific SQL query failed or took an extended duration can be challenging. Traditionally, attempts to replicate such issues in alternative environments often fall short due to the inherent complexities of data, server configurations, and benchmarking.</p>
<p>This technology empowers you to gain valuable insights that were previously elusive. When grappling with production issues, you no longer need to rely solely on replication efforts; distributed tracing provides a clear and comprehensive perspective on what might be amiss.</p>
<p>To sum up: <em>Try it, you&rsquo;ll like it!</em></p>
<h3 id="the-setup" class="headerLink">
    <a href="#the-setup" class="header-mark"></a>7.1 The setup</h3><p>There is several ways to set it up.
Nowadays, OpenTelemetry is the <em>de facto</em> standard.
Most of the solutions are compatible with it.</p>
<p>Nevertheless, after challenging some APMs, I found some missing features which are really useful in real life projects.
For instance, you can not easily ignore URLs, for instance the actuator endpoints, from the traces you will manage.
You can do that in just <a href="https://www.elastic.co/guide/en/apm/agent/java/1.x/config-http.html#config-transaction-ignore-urls" target="_blank" rel="noopener noreferrer">one property with the Elastic APM agent</a>.
There is <a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/1060#issuecomment-1816716602" target="_blank" rel="noopener noreferrer">an issue about this feature</a>.</p>
<p>I suggest using the agents.
It is less intrusive than other solutions.</p>
<p>For instance if you use the spring boot gradle plugin you can configure it as following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span> <span class="s1">&#39;org.springframework.boot&#39;</span> <span class="n">version</span> <span class="s1">&#39;3.2.1&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span> <span class="s1">&#39;io.spring.dependency-management&#39;</span> <span class="n">version</span> <span class="s1">&#39;1.1.4&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ext</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">opentelemetryAgentVersion</span> <span class="o">=</span> <span class="s1">&#39;1.32.0&#39;</span> <span class="c1">// Mettez la version appropriée
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;info.touret.observability&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;0.0.1-SNAPSHOT&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">java</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="s1">&#39;21&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mavenCentral</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">testImplementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-test&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;com.github.loki4j:loki-logback-appender:1.4.2&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;io.opentelemetry.javaagent:opentelemetry-javaagent:${opentelemetryAgentVersion}&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">copyJavaAgent</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Copy</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">detachedConfiguration</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">dependencies</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&#34;io.opentelemetry.javaagent:opentelemetry-javaagent:${opentelemetryAgentVersion}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">into</span> <span class="s2">&#34;${project.getLayout().getBuildDirectory()}/javaagents&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rename</span> <span class="o">{</span> <span class="s1">&#39;javaagent.jar&#39;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">processResources</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">copyJavaAgent</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bootRun</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">doFirst</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">jvmArgs</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;-javaagent:${project.getLayout().getBuildDirectory()}/javaagents/javaagent.jar&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// systemProperties = [
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     &#39;otel.traces.sampler&#39;: &#39;parentbased_traceidratio&#39;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     &#39;otel.traces.sampler.arg&#39;: &#39;0.2&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="n">tasks</span><span class="o">.</span><span class="na">named</span><span class="o">(</span><span class="s1">&#39;test&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">useJUnitPlatform</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After restarting your application, you can reach the API with this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http :8080/api/events
</span></span></code></pre></td></tr></table>
</div>
</div><p>This API is really simple.
To illustrate how to handle errors using both the Spring stack and the Grafana stack, an error is always thrown using <a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-ann-rest-exceptions.html" target="_blank" rel="noopener noreferrer">the Problem Detail RFC 7807</a> while reaching it.</p>
<p>Here the <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/blob/main/src/main/java/info/touret/observability/observabilityfromzerotohero/ObservabilityService.java" target="_blank" rel="noopener noreferrer">service</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ObservabilityService</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">breakMethod</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">IllegalStateException</span><span class="p">(</span><span class="s">&#34;Breaking method issue&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>And the <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/blob/main/src/main/java/info/touret/observability/observabilityfromzerotohero/ObservabilityAPIController.java" target="_blank" rel="noopener noreferrer">controller</a> which returns the error:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@GetMapping</span><span class="p">(</span><span class="s">&#34;/api/event&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ObservabilityEventDto</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">getEvent</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">ErrorResponseException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">observabilityService</span><span class="p">.</span><span class="na">breakMethod</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">var</span><span class="w"> </span><span class="n">observabilityEventDto</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ObservabilityEventDto</span><span class="p">(</span><span class="n">UUID</span><span class="p">.</span><span class="na">randomUUID</span><span class="p">().</span><span class="na">toString</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;OK&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">ResponseEntity</span><span class="p">.</span><span class="na">ok</span><span class="p">(</span><span class="n">observabilityEventDto</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">var</span><span class="w"> </span><span class="n">observabilityEventDto</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ObservabilityEventDto</span><span class="p">(</span><span class="n">UUID</span><span class="p">.</span><span class="na">randomUUID</span><span class="p">().</span><span class="na">toString</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;Error&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">LOGGER</span><span class="p">.</span><span class="na">error</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="na">getMessage</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ErrorResponseException</span><span class="p">(</span><span class="n">HttpStatus</span><span class="p">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="p">,</span><span class="w"> </span><span class="n">ProblemDetail</span><span class="p">.</span><span class="na">forStatus</span><span class="p">(</span><span class="n">HttpStatus</span><span class="p">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="p">),</span><span class="w"> </span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Using Problem Detail responses, you will get such a response when an error occurs:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> http :8080/api/events
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">500</span>
</span></span><span class="line"><span class="cl">Connection: close
</span></span><span class="line"><span class="cl">Content-Type: application/problem+json
</span></span><span class="line"><span class="cl">Date: Wed, <span class="m">17</span> Jan <span class="m">2024</span> 08:09:20 GMT
</span></span><span class="line"><span class="cl">Transfer-Encoding: chunked
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;instance&#34;</span>: <span class="s2">&#34;/api/events&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;status&#34;</span>: 500,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;title&#34;</span>: <span class="s2">&#34;Internal Server Error&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;about:blank&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After testing this service a few times, you can now see the traces on your Grafana dashboard.</p>
<p><figure><img
        
        loading="lazy"
        src="/assets/images/2024/01/Tempo-Grafana.webp"
        srcset="/assets/images/2024/01/Tempo-Grafana.webp, /assets/images/2024/01/Tempo-Grafana.webp 1.5x, /assets/images/2024/01/Tempo-Grafana.webp 2x"
        title="Tempo" ></figure></p>
<h3 id="head-or-tail-sampling" class="headerLink">
    <a href="#head-or-tail-sampling" class="header-mark"></a>7.2 Head or Tail sampling?</h3><p>One significant drawback of implementing this technology lies in the potential performance overhead it introduces to the instrumented application. In cases where high-pressure APIs generate or broadcast SPANs for every transaction, there&rsquo;s a substantial risk of significantly impacting the <a href="https://sre.google/sre-book/service-level-objectives/" target="_blank" rel="noopener noreferrer">Service Level Objectives (SLOs)</a> of your platform.</p>
<p>A viable solution to mitigate this challenge involves sampling the traces, such as retaining only 20% of the transactions. There are two primary approaches:</p>
<ol>
<li>
<p><strong>Head Sampling</strong>: In this method, SPANs are sampled and filtered directly from the producer (e.g., a backend). This is essential for heavily utilized platforms and proves to be the most efficient, as it produces only the necessary spans, thereby avoiding the dissemination of unnecessary SPANs. However, it comes with the trade-off of potentially losing critical traces involving failures. The sampling rate is purely statistical (e.g., 10 or 20% of SPANs sampled and broadcast).</p>
</li>
<li>
<p><strong>Tail Sampling</strong>: Alternatively, SPANs are sampled retrospectively, often through tools like the <a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noopener noreferrer">Open Telemetry Collector</a>. While this method allows for filtering SPANs based on various criteria, such as the transaction status, it does not address the overhead issue. All SPANs are initially broadcast and then filtered, making it less suitable for heavily used scenarios.</p>
</li>
</ol>
<p>Both approaches have their pros and cons, and the choice depends on the specific requirements of the platform. For an in-depth exploration of this issue, you can refer to <a href="https://uptrace.dev/opentelemetry/sampling.html#what-is-sampling" target="_blank" rel="noopener noreferrer">this article</a>.</p>
<h2 id="correlating-logs--traces" class="headerLink">
    <a href="#correlating-logs--traces" class="header-mark"></a>8 Correlating Logs &amp; Traces</h2><p>Now, you have on one side the logs of your applications, and on the other the traces.
To dig into errors and see what is behind the curtain of any error logged, it is really import to correlate both.</p>
<p>For that, you must specify in your logs the traceID and spanID of the corresponding trace.
Hopefully, logback and the Loki appender can help you on this!
We therefore will modify the pattern of the logs in the <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero-/blob/main/src/main/resources/logback-spring.xml" target="_blank" rel="noopener noreferrer"><code>logback-spring.xml</code></a> file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;pattern&gt;</span>
</span></span><span class="line"><span class="cl">    {&#34;level&#34;:&#34;%level&#34;,&#34;TraceID&#34;:&#34;%mdc{trace_id:-none}&#34;,&#34;spanId&#34;:&#34;%mdc{span_id:-none}&#34;,&#34;class&#34;:&#34;%logger{36}&#34;,&#34;thread&#34;:&#34;%thread&#34;,&#34;message&#34;: &#34;%message&#34;,&#34;requestId&#34;: &#34;%X{X-Request-ID}&#34;}
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/pattern&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As a developer point of view, the job is done :)
Now, it is time for the OPS/SRE to configure Grafana to link Loki and Tempo through the TraceID field.</p>
<p>For that, you can create a derived field directly in the datasource configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">datasources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">access</span><span class="p">:</span><span class="w"> </span><span class="l">proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://loki:3100</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">maxLines</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">derivedFields</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">matcherRegex</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;\&#34;TraceID\&#34;: \&#34;(\w+).*\&#34;&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">TraceID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># url will be interpreted as query for the datasource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;$${__value.raw}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># optional for URL Label to set a custom display label for the link.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">urlDisplayLabel</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;View Trace&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">access</span><span class="p">:</span><span class="w"> </span><span class="l">proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://tempo:3200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nodeGraph</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;mimir&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tracesToLogs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filterByTraceID</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filterBySpanID</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">mapTagNamesEnabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Now you will be able to browse directly to the corresponding trace from your log event and the other way around.</p>
<h2 id="metrics" class="headerLink">
    <a href="#metrics" class="header-mark"></a>9 Metrics</h2><p>Now, let us deep dive into the metrics of our application!
We can do that through <a href="https://prometheus.io/" target="_blank" rel="noopener noreferrer">Prometheus</a>.</p>
<p>We can configure now Prometheus to grab the metrics exposed by our application.</p>
<p>To do that, we need first to activate the Prometheus endpoint:</p>
<p>We need to add this dependency first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And enable the corresponding endpoint:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">management.endpoints.web.exposure.include</span><span class="o">=</span><span class="s">health,info,prometheus</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After enabling it, as a developer point of view, it is done :-)</p>
<p>The prometheus statistics can be scrapped by Prometheus itself using <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/blob/main/docker/prometheus/prometheus.yml" target="_blank" rel="noopener noreferrer">this configuration</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">honor_timestamps</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">15s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scrape_timeout</span><span class="p">:</span><span class="w"> </span><span class="l">10s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scheme</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">static_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">targets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">host.docker.internal:8080</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, you can directly browse it through Grafana to integrate all of these metrics into your dashboards 🎉.</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>10 Conclusion</h2><p>I endeavored to provide you with a comprehensive overview of what an OPS professional could anticipate while investigating an issue and the corresponding topics that require attention.
As you probably figured out, we only applied just a bunch of configuration sets.<br>
One of the key merits of these tools lies in their non-intrusiveness within the code itself.
To cut long story short: it is not a big deal!</p>
<p>Integrating these configurations can be a significant stride forward, providing invaluable assistance to the entire IT team, from development to operations, as they navigate and troubleshoot issues—whether in production or elsewhere.</p>
<p>I will finish this article by my opinion on such topics: regardless of the targeted tools, this set of configuration <strong>must be considered as the first feature to implement for every cloud native application</strong>.</p>
]]></description></item><item><title>Enhancing Asynchronous Transaction Monitoring: Implementing Distributed Tracing in Apache Camel Applications with OpenTelemetry</title><link>https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/</link><pubDate>Tue, 05 Sep 2023 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/09/nick-fewings-4dI5OP2Ee64-unsplash.webp" referrerpolicy="no-referrer">
            </div><div id="id-1"><em>Picture Credit: <a href="https://unsplash.com/@jannerboy62" target="_blank" rel="noopener noreferrer">Nick FEWINGS</a></em></div>
<h2 id="introduction" class="headerLink">
    <a href="#introduction" class="header-mark"></a>1 Introduction</h2><p>In today&rsquo;s dynamic landscape, Distributed Tracing has emerged as an indispensable practice.
It helps to understand what is under the hood of distributed transactions, providing answers to pivotal questions: What comprises these diverse requests? What contextual information accompanies them? How extensive is their duration?</p>
<p>Since the introduction of <a href="https://research.google/pubs/pub36356/" target="_blank" rel="noopener noreferrer">Google&rsquo;s Dapper</a>, a plethora of tracing solutions has flooded the scene.
Among them, <a href="https://opentelemetry.io/" target="_blank" rel="noopener noreferrer">OpenTelemetry</a> has risen as the frontrunner.
Other alternatives such as <a href="https://www.elastic.co/observability/application-performance-monitoring" target="_blank" rel="noopener noreferrer">Elastic APM</a> and <a href="https://www.dynatrace.com/support/help/observe-and-explore/purepath-distributed-traces/distributed-traces-overview" target="_blank" rel="noopener noreferrer">DynaTrace</a> are also available.</p>
<p>This toolkit seamlessly aligns with APIs and synchronous transactions, catering to a broad spectrum of scenarios.</p>
<p>However, what about asynchronous transactions?
The necessity for clarity becomes even more pronounced in such cases.
Particularly in architectures built upon messaging or event streaming brokers, attaining a holistic view of the entire transaction becomes arduous.</p>
<p>Why does this challenge arise?
It&rsquo;s a consequence of functional transactions fragmenting into two loosely coupled subprocesses:</p>
<div id="id-2"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/loose-coupling-sequence.svg"
        srcset="/assets/images/2023/09/loose-coupling-sequence.svg, /assets/images/2023/09/loose-coupling-sequence.svg 1.5x, /assets/images/2023/09/loose-coupling-sequence.svg 2x"
        title="OpenTelemetry Collector Architecture" ></figure></div>
<p>Hopefully you can rope OpenTelemetry in it to shed light.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>What about the main concepts of Distributed Tracing?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I will not dig into the concepts of Distributed tracing in this article.
<a href="https://blog.worldline.tech/2021/09/22/enabling_distributed_tracing_in_spring_apps.html" target="_blank" rel="noopener noreferrer">If you are interested in it, you can read my article on the Worldline Tech Blog</a>.</div>
        </div>
    </div>
<p>I will explain in this article how to set up and plug OpenTelementry to gather asynchronous transaction traces using <a href="https://camel.apache.org/" target="_blank" rel="noopener noreferrer">Apache Camel</a> and <a href="https://activemq.apache.org/components/artemis/" target="_blank" rel="noopener noreferrer">Artemis</a>.
The first part will use Jaeger and the second one,  <a href="https://grafana.com/oss/tempo/" target="_blank" rel="noopener noreferrer">Tempo</a> and <a href="https://grafana.com/" target="_blank" rel="noopener noreferrer">Grafana</a> to be more <em>production ready</em>.</p>
<p>All the code snippets are part of <a href="https://GitHub.com/alexandre-touret/camel-artemis-opentelemetry" target="_blank" rel="noopener noreferrer">this project on GitHub</a>.
(Normally) you can use and run it locally on your desktop.</p>
<h2 id="jaeger" class="headerLink">
    <a href="#jaeger" class="header-mark"></a>2 Jaeger</h2><h3 id="architecture" class="headerLink">
    <a href="#architecture" class="header-mark"></a>2.1 Architecture</h3><p>The <a href="https://www.logicmonitor.com/blog/what-are-spans-in-distributed-tracing" target="_blank" rel="noopener noreferrer">SPANs</a> are broadcast and gathered through <a href="https://opentelemetry.io/docs/collector" target="_blank" rel="noopener noreferrer">OpenTelemetry Collector</a>.
It finally sends them to <a href="https://www.jaegertracing.io/" target="_blank" rel="noopener noreferrer">Jaeger</a>.</p>
<p>Here is the architecture of such a platform:</p>
<div id="id-3"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/architecture.svg"
        srcset="/assets/images/2023/09/architecture.svg, /assets/images/2023/09/architecture.svg 1.5x, /assets/images/2023/09/architecture.svg 2x"
        title="OpenTelemetry Collector Architecture" ></figure></div>
<h3 id="opentelemetry-collector" class="headerLink">
    <a href="#opentelemetry-collector" class="header-mark"></a>2.2 OpenTelemetry Collector</h3><p>The cornerstone of this architecture is the <a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noopener noreferrer">collector</a>.
It can be compared to <a href="https://www.elastic.co/fr/logstash/" target="_blank" rel="noopener noreferrer">Elastic LogStash</a> or an <a href="https://en.wikipedia.org/wiki/Extract,_transform,_load" target="_blank" rel="noopener noreferrer">ETL</a>.
It will help us get, transform and export telemetry data.</p>
<div id="id-4"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/otel-diagram.svg"
        srcset="/assets/images/2023/09/otel-diagram.svg, /assets/images/2023/09/otel-diagram.svg 1.5x, /assets/images/2023/09/otel-diagram.svg 2x"
        title="OpenTelemetry Collector Functionalities" ><figcaption class="image-caption">Source: https://opentelemetry.io/docs/collector/</figcaption>
    </figure></div>
<p>For our use case, the configuration is quite simple.</p>
<p>First, here is the <a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noopener noreferrer">Docker Compose configuration</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otel-collector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">otel/opentelemetry-collector:0.75.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">otel-collector</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">&#34;--config=/etc/otel-collector-config.yaml&#34;</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;1888:1888&#34;</span><span class="w">   </span><span class="c"># pprof extension</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;8888:8888&#34;</span><span class="w">   </span><span class="c"># Prometheus metrics exposed by the collector</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;8889:8889&#34;</span><span class="w">   </span><span class="c"># Prometheus exporter metrics</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;13133:13133&#34;</span><span class="w"> </span><span class="c"># health_check extension</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;4317:4317&#34;</span><span class="w">   </span><span class="c"># OTLP gRPC receiver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;55670:55679&#34;</span><span class="w"> </span><span class="c"># zpages extension</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>and the <a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/blob/main/containers/docker/otel-collector-config.yaml" target="_blank" rel="noopener noreferrer"><code>otel-collector-config.yaml</code></a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># (1)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">receivers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocols</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4317&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4318&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;/actuator/prometheus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">static_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">targets</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;host.docker.internal:8080&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># (2)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">exporters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#  prometheus:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#    endpoint: &#34;0.0.0.0:8889&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#    const_labels:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#      label1: value1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">logging</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">jaeger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="l">jaeger:14250</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">insecure</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#  zipkin:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#    endpoint: http://zipkin:9411/api/v2/spans</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#    tls:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#      insecure: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># (3)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">processors</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">batch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">extensions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">health_check</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pprof</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="p">:</span><span class="m">1888</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">zpages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="p">:</span><span class="m">55679</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># (4)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">extensions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">pprof, zpages, health_check]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pipelines</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">traces</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">receivers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">processors</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">batch]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">exporters</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">logging, jaeger]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">receivers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">processors</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">batch]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">exporters</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">logging]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Short explanation</strong></p>
<p>If you want further information about this configuration, you <a href="https://opentelemetry.io/docs/collector/configuration/" target="_blank" rel="noopener noreferrer">can browse the documentation</a>.</p>
<p>For those who are impatient, here are a short explanation of this configuration file:</p>
<ol>
<li>Where to pull data?</li>
<li>Where to store data?</li>
<li>What to do with it?</li>
<li>What are the workloads to activate?</li>
</ol>
<h3 id="what-about-the-code" class="headerLink">
    <a href="#what-about-the-code" class="header-mark"></a>2.3 What about the code?</h3><p>The configuration to apply is pretty simple and straightforward.
To cut long story short, you need to include libraries, add some configuration lines and run your application with an agent which will be responsible for broadcasting the SPANs.</p>
<h4 id="libraries-to-add" class="headerLink">
    <a href="#libraries-to-add" class="header-mark"></a>2.3.1 Libraries to add</h4><p>For an Apache Camel based Java application, you need to add this starter first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>org.apache.camel.springboot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>camel-opentelemetry-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In case you set up a <em>basic</em> <a href="https://spring.io/" target="_blank" rel="noopener noreferrer">Spring Boot application</a>, you only have to configure the agent (<em>see below</em>).</p>
<h4 id="what-about-the-code-1" class="headerLink">
    <a href="#what-about-the-code-1" class="header-mark"></a>2.3.2 What about the code?</h4><p>This step is not mandatory.
However, if you are eager to get more details in your Jaeger dashboard, it is advised.</p>
<p>In the application class, you only have to put the <code>@CamelOpenTelemetry</code> annotation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CamelOpenTelemetry</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@SpringBootApplication</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">DemoApplication</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">[</span><span class="p">...</span><span class="o">]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>If you want more details, you can check <a href="https://camel.apache.org/components/3.20.x/others/opentelemetry.html" target="_blank" rel="noopener noreferrer">the official documentation</a>.</p>
<h4 id="the-java-agent" class="headerLink">
    <a href="#the-java-agent" class="header-mark"></a>2.3.3 The Java Agent</h4><p>The java agent is responsible for instrumenting Java 8+ code, capturing metrics and forwarding them to the collector.</p>
<p>In case you don&rsquo;t know what is a Java Agent, I recommend watching <a href="https://www.youtube.com/watch?v=oflzFGONG08" target="_blank" rel="noopener noreferrer">this conference</a>.</p>
<p><a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation" target="_blank" rel="noopener noreferrer">Its documentation is available on GitHub</a>.
The detailed list of configuration parameters <a href="https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/" target="_blank" rel="noopener noreferrer">is available here</a>.
You can configure it through environment, system variables or a <a href="https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/#configuration-file" target="_blank" rel="noopener noreferrer">configuration file</a>.</p>
<p>For instance, by default, the OpenTelemetry Collector default endpoint value is <code>http://localhost:4317</code>.
You can alter it by setting the <code>OTEL_EXPORTER_OTLP_METRICS_ENDPOINT</code> environment variable or the <code>otel.exporter.otlp.metrics.endpoint</code> java system variable (e.g., using <code>-Dotel.exporter.otlp.metrics.endpoint</code> option ).</p>
<p>In my example, we use Maven configuration to download the agent JAR file and run our application with it as an agent.</p>
<p><strong>Example of configuration</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;id&gt;</span>opentelemetry<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;activation&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;name&gt;</span>apm<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>otel<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/activation&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>maven-dependency-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;executions&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;execution&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;id&gt;</span>copy-javaagent<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;phase&gt;</span>process-resources<span class="nt">&lt;/phase&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;goals&gt;</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&lt;goal&gt;</span>copy<span class="nt">&lt;/goal&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;/goals&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&lt;artifactItems&gt;</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&lt;artifactItem&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;groupId&gt;</span>io.opentelemetry.javaagent<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;artifactId&gt;</span>opentelemetry-javaagent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;version&gt;</span>${opentelemetry-agent.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;overWrite&gt;</span>true<span class="nt">&lt;/overWrite&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;outputDirectory&gt;</span>${project.build.directory}/javaagents<span class="nt">&lt;/outputDirectory&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;destFileName&gt;</span>javaagent.jar<span class="nt">&lt;/destFileName&gt;</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&lt;/artifactItem&gt;</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&lt;/artifactItems&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/execution&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/executions&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;agents&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;agent&gt;</span>${project.build.directory}/javaagents/javaagent.jar<span class="nt">&lt;/agent&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/agents&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                    &lt;systemPropertyVariables&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                        &lt;otel.traces.sampler&gt;parentbased_traceidratio&lt;/otel.traces.sampler&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                        &lt;otel.traces.sampler.arg&gt;0.2&lt;/otel.traces.sampler.arg&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                    &lt;/systemPropertyVariables&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/profile&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The variables in comment (e.g., <code>otel.traces.sampler</code>) can be turned on if you want <a href="https://opentelemetry.io/docs/concepts/sampling/" target="_blank" rel="noopener noreferrer">to sample your forwarded data based on a head rate limiting</a>.</p>
<p>Before running the whole application (<a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/tree/main/gateway" target="_blank" rel="noopener noreferrer">gateway</a>, <a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/tree/main/camel-producer" target="_blank" rel="noopener noreferrer">producer</a>,<a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/tree/main/camel-consumer" target="_blank" rel="noopener noreferrer">consumer</a>), you must ramp up the infrastructure with <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener noreferrer">Docker compose</a>.
The source is available <a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/blob/main/containers/docker-compose.yml" target="_blank" rel="noopener noreferrer">here</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd containers
</span></span><span class="line"><span class="cl">docker compose up
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can now start both the producer and the consumer:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mvn clean spring-boot:run -Popentelemetry -f camel-producer/pom.xml
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mvn clean spring-boot:run -Popentelemetry -f camel-consumer/pom.xml
</span></span></code></pre></td></tr></table>
</div>
</div><p>The gateway can also be turned on and instrumented in the same way.
You can run it as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mvn clean spring-boot:run -Popentelemetry -f gateway/pom.xml
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="how-is-made-the-glue-between-the-two-applications" class="headerLink">
    <a href="#how-is-made-the-glue-between-the-two-applications" class="header-mark"></a>2.3.4 How is made the glue between the two applications?</h4><p>The correlation is simply done using headers.
For instance, in the consumer application, when we consume the messages as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">from</span><span class="p">(</span><span class="s">&#34;activemq:queue:HELLO.WORLD?disableReplyTo=true&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">routeId</span><span class="p">(</span><span class="s">&#34;consume-message&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">routeDescription</span><span class="p">(</span><span class="s">&#34;Consumer example&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="n">LoggingLevel</span><span class="p">.</span><span class="na">INFO</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;New message with trace=${header.traceparent}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="s">&#34;----&gt; &#34;</span><span class="o">+</span><span class="n">bodyAs</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="na">class</span><span class="p">).</span><span class="na">toString</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="s">&#34;HEADERS ${in.headers}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">end</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>I logged on purpose the <code>traceparent</code> header.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> New message with trace=00-1a4f6943b7ace96d7efae4c4404009d8-cfbdb98266a772d7-01
</span></span></code></pre></td></tr></table>
</div>
</div><p>It allows to Jaeger to correlate our two transactions.</p>
<p>For your information, here are all the headers available while consuming the message</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="err">__AMQ_CID=ID:XXXX-0:1,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">accept=*/*,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">accept-encoding=gzip,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">deflate,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpCharacterEncoding=UTF-8,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpMethod=GET,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpPath=,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpUri=/camel/test,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpUrl=http:</span><span class="c1">//127.0.0.1:8080/camel/test, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="err">CamelMessageTimestamp=1693567851901,</span>
</span></span><span class="line"><span class="cl">  <span class="err">CamelServletContextPath=/test,</span>
</span></span><span class="line"><span class="cl">  <span class="err">content-length=0,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">forwarded=proto=http;host=</span><span class="nt">&#34;localhost:9080&#34;</span><span class="err">;for=</span><span class="s2">&#34;127.0.0.1:39352&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">host=127.0.0.1:8080,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSCorrelationID=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSCorrelationIDAsBytes=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSDeliveryMode=2,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSDestination=queue:</span><span class="c1">//HELLO.WORLD, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="err">JMSExpiration=0,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSMessageID=ID:XXXX-1:1:1:1:75,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSPriority=4,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSRedelivered=false,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSReplyTo=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSTimestamp=1693567851901,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSType=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSXGroupID=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSXUserID=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">traceparent=00-dea6abbd4357819b7416236bab19e557-8840b18dd799cfac-01,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">user-agent=HTTPie/1.0.3,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-for=127.0.0.1,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-host=localhost:9080,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-port=9080,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-proto=http</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="dashboard" class="headerLink">
    <a href="#dashboard" class="header-mark"></a>2.4 Dashboard</h3><p>To get traces, I ran this dumb command to inject traces into Jaeger:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">while true ; http :9080/camel/test; end
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now, you can browse Jaeger (<a href="http://localhost:16686" target="_blank" rel="noopener noreferrer">http://localhost:16686</a>) and query it to find trace insights:</p>
<div id="id-5"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/jaeger-1.webp"
        srcset="/assets/images/2023/09/jaeger-1.webp, /assets/images/2023/09/jaeger-1.webp 1.5x, /assets/images/2023/09/jaeger-1.webp 2x"
        title="Jaeger front page" ><figcaption class="image-caption">Number of different apps</figcaption>
    </figure></div>
<p>If you dig into one transaction, you will see the whole transaction:</p>
<div id="id-6"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/jaeger-2.webp"
        srcset="/assets/images/2023/09/jaeger-2.webp, /assets/images/2023/09/jaeger-2.webp 1.5x, /assets/images/2023/09/jaeger-2.webp 2x"
        title="Jaeger transaction page" ><figcaption class="image-caption">One transaction</figcaption>
    </figure></div>
<p>And now, you can correlate two sub transactions:</p>
<div id="id-7"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/jaeger-3.webp"
        srcset="/assets/images/2023/09/jaeger-3.webp, /assets/images/2023/09/jaeger-3.webp 1.5x, /assets/images/2023/09/jaeger-3.webp 2x"
        title="Jaeger two sub transactions" ><figcaption class="image-caption">Two sub transactions</figcaption>
    </figure></div>
<h2 id="tempo--grafana" class="headerLink">
    <a href="#tempo--grafana" class="header-mark"></a>3 Tempo &amp; Grafana</h2><p>This solution is pretty similar to the previous one.
Instead of pushing all the data to Jaeger, we will use Tempo to store data and Grafana to render them.
We don&rsquo;t need to modify the configuration made in the existing Java applications.</p>
<h3 id="architecture-1" class="headerLink">
    <a href="#architecture-1" class="header-mark"></a>3.1 Architecture</h3><p>As mentioned above, the architecture is quite the same.
Now, we have the collector which broadcast data to Tempo.
We will then configure Grafana to query to it to get traces.</p>
<div id="id-8"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/architecture_grafana.svg"
        srcset="/assets/images/2023/09/architecture_grafana.svg, /assets/images/2023/09/architecture_grafana.svg 1.5x, /assets/images/2023/09/architecture_grafana.svg 2x"
        title="Architecture w/ Grafana &amp;amp; Tempo" ></figure></div>
<h3 id="collector-configuration" class="headerLink">
    <a href="#collector-configuration" class="header-mark"></a>3.2 Collector configuration</h3><p>The modification of the Collector is easy (for this example).
We only have to specify the tempo URL.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">receivers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocols</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4317&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4318&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;/actuator/prometheus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">static_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">targets</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;host.docker.internal:8080&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">exporters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="l">tempo:4317</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">insecure</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pipelines</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">traces</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">receivers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">exporters</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tempo-configuration" class="headerLink">
    <a href="#tempo-configuration" class="header-mark"></a>3.3 Tempo configuration</h3><p>I used here <a href="https://github.com/grafana/tempo" target="_blank" rel="noopener noreferrer">the standard configuration provided in the documentation</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">http_listen_port</span><span class="p">:</span><span class="w"> </span><span class="m">3200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">distributor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">receivers</span><span class="p">:</span><span class="w">                           </span><span class="c"># this configuration will listen on all ports and protocols that tempo is capable of.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jaeger</span><span class="p">:</span><span class="w">                            </span><span class="c"># the receives all come from the OpenTelemetry collector.  more configuration information can</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocols:                       # be found there</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">thrift_http</span><span class="p">:</span><span class="w">                   </span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">grpc</span><span class="p">:</span><span class="w">                          </span><span class="c"># for a production deployment you should only enable the receivers you need!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">thrift_binary</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">thrift_compact</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zipkin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocols</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">opencensus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ingester</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">max_block_duration</span><span class="p">:</span><span class="w"> </span><span class="l">5m              </span><span class="w"> </span><span class="c"># cut the headblock when this much time passes. this is being set for demo purposes and should probably be left alone normally</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">compactor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">compaction</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">block_retention</span><span class="p">:</span><span class="w"> </span><span class="l">1h               </span><span class="w"> </span><span class="c"># overall Tempo trace retention. set for demo purposes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metrics_generator</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">registry</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external_labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">cluster</span><span class="p">:</span><span class="w"> </span><span class="l">docker-compose</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storage</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/tempo/generator/wal</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">remote_write</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://prometheus:9090/api/v1/write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">send_exemplars</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">storage</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">trace</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">backend</span><span class="p">:</span><span class="w"> </span><span class="l">local                    </span><span class="w"> </span><span class="c"># backend configuration to use</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">wal</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/tempo/wal            </span><span class="w"> </span><span class="c"># where to store the wal locally</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">local</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/tempo/blocks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">overrides</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics_generator_processors</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">service-graphs, span-metrics]</span><span class="w"> </span><span class="c"># enables metrics generator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">search_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="grafana-configuration" class="headerLink">
    <a href="#grafana-configuration" class="header-mark"></a>3.4 Grafana configuration</h3><p>Now we must configure Grafana to enable querying into our tempo instance.
The configuration is made here using a configuration file provided during the startup</p>
<p>The datasource file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">datasources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Prometheus backend where metrics are sent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://prometheus:9090</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">httpMethod</span><span class="p">:</span><span class="w"> </span><span class="l">GET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://tempo:3200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">httpMethod</span><span class="p">:</span><span class="w"> </span><span class="l">GET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;prometheus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="dashboard-1" class="headerLink">
    <a href="#dashboard-1" class="header-mark"></a>3.5 Dashboard</h3><p>As we have done before, we must start the infrastructure using Docker Compose:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd containers
</span></span><span class="line"><span class="cl">docker compose -f docker-compose-grafana.yml up
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, using the same rocket scientist maven commands, we can run the same commands and browse now Grafana (<code>http://localhost:3000</code>) to see our traces:</p>
<p><div id="id-9"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/grafana-1.webp"
        srcset="/assets/images/2023/09/grafana-1.webp, /assets/images/2023/09/grafana-1.webp 1.5x, /assets/images/2023/09/grafana-1.webp 2x"
        title="Grafana transactions" ><figcaption class="image-caption">Transactions</figcaption>
    </figure></div>
<div id="id-10"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/grafana-2.webp"
        srcset="/assets/images/2023/09/grafana-2.webp, /assets/images/2023/09/grafana-2.webp 1.5x, /assets/images/2023/09/grafana-2.webp 2x"
        title="Grafana transactions" ><figcaption class="image-caption">Deep dive into one transaction</figcaption>
    </figure></div></p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>4 Conclusion</h2><p>We saw how to highlight asynchronous transactions and correlate them through OpenTelemetry and Jaeger or using Tempo &amp; Grafana.
It was voluntarily simple.</p>
<p>If you want to dig into <a href="https://github.com/open-telemetry/opentelemetry-collector/" target="_blank" rel="noopener noreferrer">OpenTelemetry Collector</a> configuration, you can read <a href="https://signoz.io/blog/opentelemetry-collector-complete-guide/" target="_blank" rel="noopener noreferrer">this article from Antik ANAND</a> (Thanks to <a href="https://blog.frankel.ch/" target="_blank" rel="noopener noreferrer">Nicolas FRANKËL</a> for sharing it) and the <a href="https://github.com/open-telemetry/opentelemetry-collector/" target="_blank" rel="noopener noreferrer">official documentation</a>.
A noteworthy aspect of <a href="https://github.com/open-telemetry/" target="_blank" rel="noopener noreferrer">OpenTelemetry</a> lies in its evolution into an industry-standard over time.
For instance,<a href="https://www.elastic.co/observability/application-performance-monitoring" target="_blank" rel="noopener noreferrer">Elastic APM</a> <a href="https://www.elastic.co/guide/en/apm/guide/current/open-telemetry.html" target="_blank" rel="noopener noreferrer">is compatible with it</a>.</p>
<p>I then exposed how to enable this feature on Apache Camel applications.
It can be easily reproduced <a href="https://opentelemetry.io/docs/instrumentation/" target="_blank" rel="noopener noreferrer">with several stacks</a>.</p>
<p>Last but not least, which solution is the best?</p>
<p>I have not made any benchmark of Distributed Tracing solutions.
However, for a <em>real life</em> production setup, I would dive into Grafana and Tempo and check their features.
I am particularly interested in mixing logs, traces to orchestrate efficient alerting mechanisms.</p>
]]></description></item></channel></rss>