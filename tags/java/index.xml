<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Java - Tag - Alexandre Touret's Blog</title><link>https://blog.touret.info/tags/java/</link><description>Java - Tag - Alexandre Touret's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright><lastBuildDate>Mon, 25 Mar 2024 06:00:43 +0100</lastBuildDate><atom:link href="https://blog.touret.info/tags/java/" rel="self" type="application/rss+xml"/><item><title>Tips &amp; tricks for optimising Spring Data &amp; JPA queries</title><link>https://blog.touret.info/2024/03/25/jpa_spring_data_query_optimisations/</link><pubDate>Mon, 25 Mar 2024 06:00:43 +0100</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2024/03/25/jpa_spring_data_query_optimisations/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2024/03/tobias-fischer-PkbZahEG2Ng-unsplash.webp" referrerpolicy="no-referrer">
            </div><div id="id-1"><em>Picture of <a href="https://unsplash.com/fr/@tofi?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash" target="_blank" rel="noopener noreferrer">Tobias Fischer</a></em></div>
<p>When you code enterprise applications on top of the Java Platform, most of the time, you use <a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping" target="_blank" rel="noopener noreferrer">ORMs</a> to interface them with relational databases.
They bring a lot of simplicity which make you forget SQL queries syntax.
Furthermore, most of the time, Java developers don&rsquo;t really care/know what is under the hood of <a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener noreferrer">Spring Data</a> and <a href="https://docs.oracle.com/javaee/7/tutorial/persistence-intro.htm" target="_blank" rel="noopener noreferrer">Java Persistence API (JPA)</a> or such a facility.
In my opinion, it&rsquo;s mainly due to all the features provided by these specifications and frameworks.</p>
<p>Unfortunately, when your dataset is coming to grow, querying against your database could be difficult.
Among other things, the different queries run by your Java application may potentially break your SLOs.</p>
<p>In this article, I have tried to write down a bunch of tips &amp; tricks to tackle this issue.
Even if some are related to <a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener noreferrer">Spring Data</a>, I think you can use most of them if you use JPA in a standard way.</p>
<p>You will see that even if we can consider using JPA easy at first glance, it can bring a lot of complexity.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Acknowledgement<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I would like to thank my colleagues <a href="https://www.linkedin.com/in/maximilianbeckers/" target="_blank" rel="noopener noreferrer">Max Beckers</a>, <a href="https://www.linkedin.com/in/davidpequegnot/" target="_blank" rel="noopener noreferrer">David Pequegnot</a> &amp; <a href="https://www.linkedin.com/in/petersteiner/" target="_blank" rel="noopener noreferrer">Peter Steiner</a> for reviewing my article and giving their advices, useful links &amp; tips.</p>
<p>Thanks also to <a href="https://www.sewatech.fr/" target="_blank" rel="noopener noreferrer">Alexis Hassler</a> for <a href="https://github.com/alexandre-touret/alexandre-touret.github.io/issues/114" target="_blank" rel="noopener noreferrer">the tip about Hibernate 6 logging</a>.</p>
</div>
        </div>
    </div>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>About the code snippets<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">All the code snippets shown in this article come from <a href="https://github.com/alexandre-touret/jpa-optimisation" target="_blank" rel="noopener noreferrer">this GitHub repository</a>.
Feel free to use it!</div>
        </div>
    </div>
<h2 id="observe-your-application" class="headerLink">
    <a href="#observe-your-application" class="header-mark"></a>1 Observe your application</h2><h3 id="observe-your-persistence-layer" class="headerLink">
    <a href="#observe-your-persistence-layer" class="header-mark"></a>1.1 Observe your persistence layer</h3><p>First and foremost, you <strong>MUST</strong> trace and monitor your persistence layer usage.
If you use <a href="https://hibernate.org/" target="_blank" rel="noopener noreferrer">Hibernate</a> (without Spring, Quarkus,&hellip;), you can get useful information configuring the logger:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;logger</span> <span class="na">name=</span><span class="s">&#34;org.hibernate.SQL&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">     <span class="nt">&lt;level</span> <span class="na">value=</span><span class="s">&#34;debug&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/logger&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you use <a href="https://thorben-janssen.com/spring-data-jpa-logging/" target="_blank" rel="noopener noreferrer">Spring (and JPA, Hibernate), you can also get them adding these configuration properties</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">logging.level.org.hibernate.stat</span><span class="o">=</span><span class="s">TRACE</span>
</span></span><span class="line"><span class="cl"><span class="na">logging.level.org.hibernate.SQL</span><span class="o">=</span><span class="s">DEBUG</span>
</span></span><span class="line"><span class="cl"><span class="na">logging.level.org.hibernate.orm.jdbc.bind</span><span class="o">=</span><span class="s">TRACE</span>
</span></span><span class="line"><span class="cl"><span class="na">logging.level.org.hibernate.SQL_SLOW</span><span class="o">=</span><span class="s">TRACE</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.jpa.properties.hibernate.generate_statistics</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.jpa.properties.hibernate.format_sql</span><span class="o">=</span><span class="s">false</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>What about JPA configuration?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">If you want to get the same Hibernate configuration, you can read <a href="https://thorben-janssen.com/hibernate-logging-guide/#dont-use-showsql-to-log-sql-queries" target="_blank" rel="noopener noreferrer">this article</a>.</div>
        </div>
    </div>
<p>After getting all the queries and operations done by your persistence layer, you will be able to pinpoint which component is responsible for slowing down your queries. To cut long story short, which one is guilty? The database or the ORM.</p>
<p>In the case of huge SQL queries, I usually execute them directly in SQL using the database tools to check if I have the same behaviour.</p>
<p>Example of such an output:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">2024-03-21T22:14:46.853+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select b1_0.id,b1_0.description,b1_0.isbn_10,b1_0.isbn_13,b1_0.medium_image_url,b1_0.nb_of_pages,b1_0.price,b1_0.rank,b1_0.small_image_url,b1_0.store_id,b1_0.title,b1_0.year_of_publication from book b1_0
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.875+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select s1_0.id,s1_0.name,b1_0.store_id,b1_0.id,b1_0.description,b1_0.isbn_10,b1_0.isbn_13,b1_0.medium_image_url,b1_0.nb_of_pages,b1_0.price,b1_0.rank,b1_0.small_image_url,b1_0.title,b1_0.year_of_publication from store s1_0 left join book b1_0 on s1_0.id=b1_0.store_id where s1_0.id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.897+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.900+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.902+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.904+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.906+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.908+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.909+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.911+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.913+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.914+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.916+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.917+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.918+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:46.919+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] o.h.stat.internal.StatisticsImpl         : HHH000117: HQL: [CRITERIA] select b1_0.id,b1_0.description,b1_0.isbn_10,b1_0.isbn_13,b1_0.medium_image_url,b1_0.nb_of_pages,b1_0.price,b1_0.rank,b1_0.small_image_url,b1_0.store_id,b1_0.title,b1_0.year_of_publication from book b1_0, time: 79ms, rows: 13
</span></span><span class="line"><span class="cl">2024-03-21T22:14:47.007+01:00 DEBUG 39814 --- [optimization-jpa] [nio-8080-exec-1] org.hibernate.SQL                        : select b1_0.authors_id,b1_1.id,b1_1.description,b1_1.isbn_10,b1_1.isbn_13,b1_1.medium_image_url,b1_1.nb_of_pages,b1_1.price,b1_1.rank,b1_1.small_image_url,s1_0.id,s1_0.name,b1_1.title,b1_1.year_of_publication from book_authors b1_0 join book b1_1 on b1_1.id=b1_0.books_id left join store s1_0 on s1_0.id=b1_1.store_id where b1_0.authors_id=?
</span></span><span class="line"><span class="cl">2024-03-21T22:14:47.038+01:00  WARN 39814 --- [optimization-jpa] [nio-8080-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Ignoring exception, response committed already: org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError)
</span></span><span class="line"><span class="cl">2024-03-21T22:14:47.039+01:00  WARN 39814 --- [optimization-jpa] [nio-8080-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError)]
</span></span><span class="line"><span class="cl">2024-03-21T22:14:47.040+01:00  INFO 39814 --- [optimization-jpa] [nio-8080-exec-1] i.StatisticalLoggingSessionEventListener : Session Metrics {
</span></span><span class="line"><span class="cl">    869000 nanoseconds spent acquiring 1 JDBC connections;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent releasing 0 JDBC connections;
</span></span><span class="line"><span class="cl">    2700503 nanoseconds spent preparing 16 JDBC statements;
</span></span><span class="line"><span class="cl">    16624802 nanoseconds spent executing 16 JDBC statements;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent executing 0 JDBC batches;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent performing 0 L2C puts;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent performing 0 L2C hits;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent performing 0 L2C misses;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
</span></span><span class="line"><span class="cl">    190300 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collec
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="dig-into-you-datasource-connection-pool-configuration" class="headerLink">
    <a href="#dig-into-you-datasource-connection-pool-configuration" class="header-mark"></a>1.1.1 Dig into you datasource connection pool configuration</h4><p>If you want to dive into your datasource and get clear insights of your database connection pool, you can also add <a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener noreferrer">Prometheus metrics</a> to your application to observe it.</p>
<p>For a <a href="https://spring.io/projects/spring-boot/" target="_blank" rel="noopener noreferrer">Spring Boot</a> application, you can easily enable it adding two dependencies:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">runtimeOnly</span> <span class="s1">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>and these properties:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">management.endpoint.prometheus.enabled</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">management.endpoints.web.exposure.include</span><span class="o">=</span><span class="s">health,info,prometheus</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After rebooting your application, you will be able to get the status of your connection pool:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ http :8080/actuator/prometheus | grep hikari
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections Total connections
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections gauge
</span></span><span class="line"><span class="cl">hikaricp_connections{pool=&#34;HikariPool-1&#34;,} 10.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_min Min connections
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_min gauge
</span></span><span class="line"><span class="cl">hikaricp_connections_min{pool=&#34;HikariPool-1&#34;,} 10.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_creation_seconds_max Connection creation time
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_creation_seconds_max gauge
</span></span><span class="line"><span class="cl">hikaricp_connections_creation_seconds_max{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_creation_seconds Connection creation time
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_creation_seconds summary
</span></span><span class="line"><span class="cl">hikaricp_connections_creation_seconds_count{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl">hikaricp_connections_creation_seconds_sum{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_timeout_total Connection timeout total count
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_timeout_total counter
</span></span><span class="line"><span class="cl">hikaricp_connections_timeout_total{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_active Active connections
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_active gauge
</span></span><span class="line"><span class="cl">hikaricp_connections_active{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_max Max connections
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_max gauge
</span></span><span class="line"><span class="cl">hikaricp_connections_max{pool=&#34;HikariPool-1&#34;,} 10.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_usage_seconds Connection usage time
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_usage_seconds summary
</span></span><span class="line"><span class="cl">hikaricp_connections_usage_seconds_count{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl">hikaricp_connections_usage_seconds_sum{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_usage_seconds_max Connection usage time
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_usage_seconds_max gauge
</span></span><span class="line"><span class="cl">hikaricp_connections_usage_seconds_max{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_pending Pending threads
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_pending gauge
</span></span><span class="line"><span class="cl">hikaricp_connections_pending{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_idle Idle connections
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_idle gauge
</span></span><span class="line"><span class="cl">hikaricp_connections_idle{pool=&#34;HikariPool-1&#34;,} 10.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_acquire_seconds Connection acquire time
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_acquire_seconds summary
</span></span><span class="line"><span class="cl">hikaricp_connections_acquire_seconds_count{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl">hikaricp_connections_acquire_seconds_sum{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span><span class="line"><span class="cl"># HELP hikaricp_connections_acquire_seconds_max Connection acquire time
</span></span><span class="line"><span class="cl"># TYPE hikaricp_connections_acquire_seconds_max gauge
</span></span><span class="line"><span class="cl">hikaricp_connections_acquire_seconds_max{pool=&#34;HikariPool-1&#34;,} 0.0
</span></span></code></pre></td></tr></table>
</div>
</div><p>Obviously, it&rsquo;s not recommended to use these metrics as is.
<a href="https://prometheus.io/docs/prometheus/latest/getting_started/" target="_blank" rel="noopener noreferrer">Scrap them with Prometheus</a> and <a href="https://grafana.com/" target="_blank" rel="noopener noreferrer">Grafana</a> to gather these metrics and create dashboards.</p>
<p>At this stage, you did the easiest part.
You must now dig into the database documentation and measure, regarding your use case and the volumetry what are the good figures for every parameter.</p>
<p>If you use <a href="https://github.com/brettwooldridge/HikariCP/" target="_blank" rel="noopener noreferrer">HikariCP</a>, you can refer yourself to <a href="https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing" target="_blank" rel="noopener noreferrer">this guide delving into Pool sizing configuration</a>.</p>
<h3 id="observe-your-database" class="headerLink">
    <a href="#observe-your-database" class="header-mark"></a>1.2 Observe your database</h3><p>As Java developers, we usually forget that database platforms provide valuable tools to analyse your queries.
Once you have pointed out the time/resource consuming queries, you must check if your database query is time-consuming by, for instance, running a full scan of your table.</p>
<p>In this purpose, you can check the SQL queries execution plan.</p>
<p>If you use <a href="https://www.postgresql.org/" target="_blank" rel="noopener noreferrer">PostgreSQL (<em>what else</em>)</a>, you can get these insights using the <a href="https://www.postgresql.org/docs/current/sql-explain.html" target="_blank" rel="noopener noreferrer"><code>EXPLAIN</code></a> command.</p>
<h2 id="check-your-entities-associations" class="headerLink">
    <a href="#check-your-entities-associations" class="header-mark"></a>2 Check your entities associations</h2><p>Let&rsquo;s go back to our Java application.
One of the main points of attention of any JPA (and SQL) queries is how your entity is joined with others.
Every jointure brings costs and complexity.</p>
<p>For JPA queries, you must check first if your relationship between two objects should be either <a href="https://jakartaee.github.io/persistence/latest/api/jakarta.persistence/jakarta/persistence/FetchType.html" target="_blank" rel="noopener noreferrer"><code>EAGER</code> or <code>LAZY</code></a>.</p>
<p>You probably understood: there is no free lunch.
You must measure first the JPA queries and mapping time-consumption and check which solution is the best.</p>
<p>By default, EAGER relationship are set up for <code>@ManyToOne</code> and <code>@OneToOne</code>. LAZY are for <code>@OneToMany</code>.
Most of the time, I keep using the default configuration.
However, you must take care of the whole <a href="https://jakarta.ee/learn/docs/jakartaee-tutorial/current/persist/persistence-entitygraphs/persistence-entitygraphs.html" target="_blank" rel="noopener noreferrer">entity graph</a> loaded by your query.</p>
<p>Does your entity loaded by a <code>@OneToOne</code> relationship loads also a <code>@OneToMany</code> relationship in a <code>EAGER</code> way?</p>
<p>It&rsquo;s the kind of question you will need to answer.</p>
<h3 id="the-famous-n1-issue" class="headerLink">
    <a href="#the-famous-n1-issue" class="header-mark"></a>2.1 The famous N+1 issue</h3><p>In this example, we will look into a <code>1-N</code> relationship:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Entity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Store</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">[</span><span class="p">...</span><span class="o">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@OneToMany</span><span class="p">(</span><span class="n">fetch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">FetchType</span><span class="p">.</span><span class="na">EAGER</span><span class="p">,</span><span class="n">mappedBy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;store&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span><span class="w"> </span><span class="n">books</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">[</span><span class="p">...</span><span class="o">]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Entity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Book</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">[</span><span class="p">...</span><span class="o">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@ManyToOne</span><span class="p">(</span><span class="n">targetEntity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Store</span><span class="p">.</span><span class="na">class</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">Store</span><span class="w"> </span><span class="n">store</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">[</span><span class="p">...</span><span class="o">]</span><span class="w">    
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>If you remember well, this relationship is fetched in a EAGER way.
When I try to get all the stores using a <code>findAll()</code> method:</p>
<p>For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Store</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">findAllStores</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">storeRepository</span><span class="p">.</span><span class="na">findStores</span><span class="p">().</span><span class="na">stream</span><span class="p">().</span><span class="na">toList</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Hibernate will query the database in this way:</p>
<ul>
<li>1 query to select the main entity</li>
<li>N queries for the entities linked by the jointure</li>
</ul>
<p>In our case, we can see the following queries in the logs:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Hibernate: <span class="k">select</span> s1_0.id,s1_0.name from store s1_0
</span></span><span class="line"><span class="cl">Hibernate: <span class="k">select</span> b1_0.store_id,b1_0.id,b1_0.description,b1_0.isbn_10,b1_0.isbn_13,b1_0.medium_image_url,b1_0.nb_of_pages,b1_0.price,b1_0.rank,b1_0.small_image_url,b1_0.title,b1_0.year_of_publication from book b1_0 where b1_0.store_id<span class="o">=</span>?
</span></span><span class="line"><span class="cl">Hibernate: <span class="k">select</span> a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id<span class="o">=</span>a1_0.authors_id where a1_0.books_id<span class="o">=</span>?
</span></span><span class="line"><span class="cl">Hibernate: <span class="k">select</span> a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id<span class="o">=</span>a1_0.authors_id where a1_0.books_id<span class="o">=</span>?
</span></span><span class="line"><span class="cl">Hibernate: <span class="k">select</span> a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id<span class="o">=</span>a1_0.authors_id where a1_0.books_id<span class="o">=</span>?
</span></span><span class="line"><span class="cl">Hibernate: <span class="k">select</span> a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id<span class="o">=</span>a1_0.authors_id where a1_0.books_id<span class="o">=</span>?
</span></span><span class="line"><span class="cl"><span class="o">[</span>...<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s unfortunately not finished yet.</p>
<p>Imagine now, your book entity is related to another one in a EAGER way.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ManyToMany</span><span class="p">(</span><span class="n">fetch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">FetchType</span><span class="p">.</span><span class="na">EAGER</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Author</span><span class="o">&gt;</span><span class="w"> </span><span class="n">authors</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>You will execute then another SQL queries.</p>
<p>For instance, in this case:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Hibernate: select b1_0.authors_id,b1_1.id,b1_1.description,b1_1.isbn_10,b1_1.isbn_13,b1_1.medium_image_url,b1_1.nb_of_pages,b1_1.price,b1_1.rank,b1_1.small_image_url,s1_0.id,s1_0.name,b1_1.title,b1_1.year_of_publication from book_authors b1_0 join book b1_1 on b1_1.id=b1_0.books_id left join store s1_0 on s1_0.id=b1_1.store_id where b1_0.authors_id=?
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>To sum up<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">At the same way SQL jointures are really time-consuming, the way you can link entities may strongly impact the performance in either memory or while running SQL queries against our database.</div>
        </div>
    </div>
<h3 id="use-a-dedicated-entity-graph" class="headerLink">
    <a href="#use-a-dedicated-entity-graph" class="header-mark"></a>2.2 Use a dedicated entity graph</h3><p>If you are still struggling with the way Hibernate loads your Entity graph, you can also try to specify the graph of entities to load by yourself.</p>
<p><a href="https://jakarta.ee/learn/docs/jakartaee-tutorial/current/persist/persistence-entitygraphs/persistence-entitygraphs.html" target="_blank" rel="noopener noreferrer">This feature introduced in JPA 2.1</a> can help you avoid retrieving specific useless attributes or optimise the loading of the linked entities.</p>
<p>Let&rsquo;s go back to our application.
Imagine that in one use case, when we fetch a list of books, we don&rsquo;t need the list of authors.
Using this API we can avoid fetching it in this way</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Entity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@NamedEntityGraph</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;store[books]&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">attributeNodes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nd">@NamedAttributeNode</span><span class="p">(</span><span class="s">&#34;books&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Store</span><span class="w"> </span><span class="kd">implements</span><span class="w"> </span><span class="n">Serializable</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">[</span><span class="p">...</span><span class="o">]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Repository</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">interface</span> <span class="nc">StoreRepository</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">Store</span><span class="p">,</span><span class="n">Long</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@EntityGraph</span><span class="p">(</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;store[books]&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Store</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">findByName</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>You will get the following output:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">2024-03-22T14:35:17.515+01:00 DEBUG 74072 --- [optimization-jpa] [nio-8080-exec-3] org.hibernate.SQL                        : select s1_0.id,b1_0.store_id,b1_0.id,b1_0.description,b1_0.isbn_10,b1_0.isbn_13,b1_0.medium_image_url,b1_0.nb_of_pages,b1_0.price,b1_0.rank,b1_0.small_image_url,b1_0.title,b1_0.year_of_publication,s1_0.name from store s1_0 left join book b1_0 on s1_0.id=b1_0.store_id where s1_0.name=?
</span></span><span class="line"><span class="cl">2024-03-22T14:35:17.537+01:00 DEBUG 74072 --- [optimization-jpa] [nio-8080-exec-3] o.h.stat.internal.StatisticsImpl         : HHH000117: HQL: [CRITERIA] select s1_0.id,b1_0.store_id,b1_0.id,b1_0.description,b1_0.isbn_10,b1_0.isbn_13,b1_0.medium_image_url,b1_0.nb_of_pages,b1_0.price,b1_0.rank,b1_0.small_image_url,b1_0.title,b1_0.year_of_publication,s1_0.name from store s1_0 left join book b1_0 on s1_0.id=b1_0.store_id where s1_0.name=?, time: 21ms, rows: 1
</span></span><span class="line"><span class="cl">2024-03-22T14:35:17.559+01:00 DEBUG 74072 --- [optimization-jpa] [nio-8080-exec-3] org.hibernate.SQL                        : select a1_0.books_id,a1_1.id,a1_1.firstname,a1_1.lastname,a1_1.public_id from book_authors a1_0 join author a1_1 on a1_1.id=a1_0.authors_id where a1_0.books_id=?
</span></span><span class="line"><span class="cl">2024-03-22T14:35:17.565+01:00 DEBUG 74072 --- [optimization-jpa] [nio-8080-exec-3] org.hibernate.SQL                        : select b1_0.authors_id,b1_1.id,b1_1.description,b1_1.isbn_10,b1_1.isbn_13,b1_1.medium_image_url,b1_1.nb_of_pages,b1_1.price,b1_1.rank,b1_1.small_image_url,s1_0.id,s1_0.name,b1_1.title,b1_1.year_of_publication from book_authors b1_0 join book b1_1 on b1_1.id=b1_0.books_id left join store s1_0 on s1_0.id=b1_1.store_id where b1_0.authors_id=?
</span></span><span class="line"><span class="cl">2024-03-22T14:35:17.582+01:00  WARN 74072 --- [optimization-jpa] [nio-8080-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Ignoring exception, response committed already: org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError)
</span></span><span class="line"><span class="cl">2024-03-22T14:35:17.583+01:00  WARN 74072 --- [optimization-jpa] [nio-8080-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError)]
</span></span><span class="line"><span class="cl">2024-03-22T14:35:17.583+01:00  INFO 74072 --- [optimization-jpa] [nio-8080-exec-3] i.StatisticalLoggingSessionEventListener : Session Metrics {
</span></span><span class="line"><span class="cl">    571600 nanoseconds spent acquiring 1 JDBC connections;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent releasing 0 JDBC connections;
</span></span><span class="line"><span class="cl">    954800 nanoseconds spent preparing 3 JDBC statements;
</span></span><span class="line"><span class="cl">    2433201 nanoseconds spent executing 3 JDBC statements;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent executing 0 JDBC batches;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent performing 0 L2C puts;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent performing 0 L2C hits;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent performing 0 L2C misses;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
</span></span><span class="line"><span class="cl">    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="create-a-dedicated-entity-to-reduce-the-number-of-attributes" class="headerLink">
    <a href="#create-a-dedicated-entity-to-reduce-the-number-of-attributes" class="header-mark"></a>2.3 Create a dedicated entity to reduce the number of attributes</h3><p>One another misconception about JPA is to always fully map all the properties of table to its corresponding entity!</p>
<p>A gentle reminder: we don&rsquo;t need to map all the columns in an entity!
For instance, if your table has 30 columns, and you only need 10 in your use case, why querying, fetching and storing in memory all of these data?</p>
<p>That&rsquo;s why I usually recommend to have, when it&rsquo;s relevant, a dedicated entity for specific use cases.
It could be lighter than the <em>regular</em> one and enhance the performances of your application.</p>
<p>For instance, if we have a <em>regular</em> <code>Book</code> entity:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Entity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Book</span><span class="w"> </span><span class="kd">implements</span><span class="w"> </span><span class="n">Serializable</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@NotNull</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">title</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;isbn_13&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">isbn13</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;isbn_10&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">isbn10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@ManyToMany</span><span class="p">(</span><span class="n">fetch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">FetchType</span><span class="p">.</span><span class="na">EAGER</span><span class="p">,</span><span class="w"> </span><span class="n">cascade</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="n">CascadeType</span><span class="p">.</span><span class="na">PERSIST</span><span class="p">,</span><span class="w"> </span><span class="n">CascadeType</span><span class="p">.</span><span class="na">MERGE</span><span class="p">,</span><span class="w"> </span><span class="n">CascadeType</span><span class="p">.</span><span class="na">REFRESH</span><span class="p">,</span><span class="w"> </span><span class="n">CascadeType</span><span class="p">.</span><span class="na">DETACH</span><span class="p">})</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Author</span><span class="o">&gt;</span><span class="w"> </span><span class="n">authors</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;year_of_publication&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Integer</span><span class="w"> </span><span class="n">yearOfPublication</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;nb_of_pages&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Integer</span><span class="w"> </span><span class="n">nbOfPages</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Min</span><span class="p">(</span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Max</span><span class="p">(</span><span class="n">10</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Integer</span><span class="w"> </span><span class="n">rank</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">BigDecimal</span><span class="w"> </span><span class="n">price</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;small_image_url&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">URL</span><span class="w"> </span><span class="n">smallImageUrl</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;medium_image_url&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">URL</span><span class="w"> </span><span class="n">mediumImageUrl</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">10000</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">description</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@GeneratedValue</span><span class="p">(</span><span class="n">strategy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GenerationType</span><span class="p">.</span><span class="na">IDENTITY</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Long</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@ManyToOne</span><span class="p">(</span><span class="n">targetEntity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Store</span><span class="p">.</span><span class="na">class</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Store</span><span class="w"> </span><span class="n">store</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Transient</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">transient</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">excerpt</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">[</span><span class="p">...</span><span class="o">]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>We can shrink it with only the required attributes:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@Entity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Book</span><span class="w"> </span><span class="kd">implements</span><span class="w"> </span><span class="n">Serializable</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@NotNull</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">title</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;isbn_13&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">isbn13</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;isbn_10&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">isbn10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;year_of_publication&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Integer</span><span class="w"> </span><span class="n">yearOfPublication</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Column</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;nb_of_pages&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Integer</span><span class="w"> </span><span class="n">nbOfPages</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Min</span><span class="p">(</span><span class="n">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Max</span><span class="p">(</span><span class="n">10</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Integer</span><span class="w"> </span><span class="n">rank</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">BigDecimal</span><span class="w"> </span><span class="n">price</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">description</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@GeneratedValue</span><span class="p">(</span><span class="n">strategy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GenerationType</span><span class="p">.</span><span class="na">IDENTITY</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Long</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Transient</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">transient</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">excerpt</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Think about data consistency<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Think about the whole data consistency or your data stored in the database!
Be aware about it when you omit specific jointures or columns.</div>
        </div>
    </div>
<h3 id="use-join-fetch-in-your-queries" class="headerLink">
    <a href="#use-join-fetch-in-your-queries" class="header-mark"></a>2.4 Use JOIN FETCH in your queries</h3><p>Now, one another strategy is to <em>manually</em> control/declare the jointures and how different entities would be fetched by your queries.
To do that, you can use the <code>JOIN FETCH</code> instruction:</p>
<p>For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Query</span><span class="p">(</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;from Store store JOIN FETCH store.books books&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Store</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">findStores</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>In this manner, you can shrink the number of queries done from N+1 to only one.
However, you <strong>MUST</strong> check and measure if it&rsquo;s worth it.
Sometimes, this kind of query can be more time-consuming in either database or in the JVM than several small ones.</p>
<h3 id="dto" class="headerLink">
    <a href="#dto" class="header-mark"></a>2.5 Use a DTO or a tuple</h3><p>Imagine we have a screen with of list of data coming from several entities.
Instead of fetching all of these, and struggling with fetching strategies, we can also run <a href="https://thorben-janssen.com/dto-projections/" target="_blank" rel="noopener noreferrer">DTO (or tuple) projections</a>.</p>
<p>You can therefore select all (and only) the data you need with only ONE query.
To get your code even clearer, you can also use <a href="https://docs.oracle.com/javase/specs/jls/se21/html/jls-8.html#jls-8.10" target="_blank" rel="noopener noreferrer">records</a> to make your data immutable.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">record</span> <span class="nc">BookDto</span><span class="w"> </span><span class="p">(</span><span class="n">Long</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">description</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>You can get a set of this record writing the query:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Query</span><span class="p">(</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;select new info.touret.query.optimizationjpa.BookDto(b.id, b.description) from Book b&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Set</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">findAllDto</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="other-optimisation-tracks" class="headerLink">
    <a href="#other-optimisation-tracks" class="header-mark"></a>3 Other optimisation tracks</h2><h3 id="avoid-transactions-while-reading-our-database-with-the-annotation-transactionalreadonlytrue" class="headerLink">
    <a href="#avoid-transactions-while-reading-our-database-with-the-annotation-transactionalreadonlytrue" class="header-mark"></a>3.1 Avoid transactions while reading our database with the annotation <code>@Transactional(readonly=true)</code></h3><p>One thing we often (again) remember: read-only database operations don&rsquo;t need transactions!
In the good old days, it was already a good practice to set up two different datasources for the persistence context: one read-only avoiding database transactions and one which allowed it.
Anyway, you can now declare your service only reads data and doesn&rsquo;t need to open a database transaction using the <code>@Transactional(readonly=true) </code> annotation.</p>
<p>By the way, this feature goes well with using dedicated entities as mentioned above.
For a specific search/query use case, you can use both of them to make your code even more straightforward.</p>
<h3 id="pagination-w-spring-data" class="headerLink">
    <a href="#pagination-w-spring-data" class="header-mark"></a>3.2 Pagination w/ Spring Data</h3><p>When you browse a large dataset, it&rsquo;s usually a good practice to paginate results.
The good news when you use Spring Data, is you have all the features included by default.
The bad news is you may have time/cpu-consuming queries run for calculating the number of elements, pages and the position of the current result&rsquo;s page.</p>
<p>If getting the number of pages is useless for you, you can switch to <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Slice.html" target="_blank" rel="noopener noreferrer">Slices</a> instead of <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Page.html" target="_blank" rel="noopener noreferrer">Pages</a>.</p>
<p>When using this feature, you will only know if there is another slice available onwards or backwards through the methods <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Slice.html#hasNext%28%29" target="_blank" rel="noopener noreferrer"><code>hasNext()</code></a> and <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Slice.html#hasNext%28%29" target="_blank" rel="noopener noreferrer"><code>hasPrevious()</code></a>.</p>
<p>You will find below good links talking about it on StackOverflow:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/49918979/page-vs-slice-when-to-use-which" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/49918979/page-vs-slice-when-to-use-which</a></li>
<li><a href="https://stackoverflow.com/questions/12644749/way-to-disable-count-query-from-pagerequest-for-getting-total-pages" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/12644749/way-to-disable-count-query-from-pagerequest-for-getting-total-pages</a></li>
</ul>
<h3 id="caching-specific-data" class="headerLink">
    <a href="#caching-specific-data" class="header-mark"></a>3.3 Caching specific data</h3><p>You may use and query specific which is not daily (or monthly) updated. For instance, the department, country tables.
In this case, you may want to cache them in memory (i.e., <a href="https://jakarta.ee/learn/docs/jakartaee-tutorial/current/persist/persistence-cache/persistence-cache.html" target="_blank" rel="noopener noreferrer">Second-Level cache</a>.</p>
<p>With <a href="https://jakarta.ee/learn/docs/jakartaee-tutorial/current/persist/persistence-cache/persistence-cache.html" target="_blank" rel="noopener noreferrer">JPA you can quickly cache specific entities</a> using the <a href="https://jakartaee.github.io/persistence/latest/api/jakarta.persistence/jakarta/persistence/Cacheable.html" target="_blank" rel="noopener noreferrer"><code>@Cacheable</code> annotation</a>.</p>
<p>For instance, in a Spring Boot application, you must configure your cache first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@EnableCaching</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">OptimizationJpaApplication</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">SpringApplication</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="n">OptimizationJpaApplication</span><span class="p">.</span><span class="na">class</span><span class="p">,</span><span class="w"> </span><span class="n">args</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Bean</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">Caffeine</span><span class="w"> </span><span class="nf">caffeineConfig</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">Caffeine</span><span class="p">.</span><span class="na">newBuilder</span><span class="p">().</span><span class="na">expireAfterWrite</span><span class="p">(</span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">TimeUnit</span><span class="p">.</span><span class="na">DAYS</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Bean</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">CacheManager</span><span class="w"> </span><span class="nf">cacheManager</span><span class="p">(</span><span class="n">Caffeine</span><span class="w"> </span><span class="n">caffeine</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">CaffeineCacheManager</span><span class="w"> </span><span class="n">caffeineCacheManager</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">CaffeineCacheManager</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">caffeineCacheManager</span><span class="p">.</span><span class="na">setCaffeine</span><span class="p">(</span><span class="n">caffeine</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">caffeineCacheManager</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>And declare your methods which use your cache:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Query</span><span class="p">(</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;from Store store JOIN FETCH store.books books&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@Cacheable</span><span class="p">(</span><span class="s">&#34;stores&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Store</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">findStores</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>You will use your cache then and get the following logs after the second try:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2024-03-23T22:01:41.299+01:00  WARN 65315 --- [optimization-jpa] [nio-8080-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Ignoring exception, response committed already: org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError)
</span></span><span class="line"><span class="cl">2024-03-23T22:01:41.300+01:00  WARN 65315 --- [optimization-jpa] [nio-8080-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError)]
</span></span><span class="line"><span class="cl">2024-03-23T22:01:41.300+01:00  INFO 65315 --- [optimization-jpa] [nio-8080-exec-3] i.StatisticalLoggingSessionEventListener : Session Metrics {
</span></span><span class="line"><span class="cl">    0 nanoseconds spent acquiring 0 JDBC connections;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent releasing 0 JDBC connections;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent preparing 0 JDBC statements;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent executing 0 JDBC statements;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent executing 0 JDBC batches;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent performing 0 L2C puts;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent performing 0 L2C hits;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent performing 0 L2C misses;
</span></span><span class="line"><span class="cl">    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
</span></span><span class="line"><span class="cl">    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you want to dig into the differences between Spring cache support &amp; the <a href="https://github.com/jsr107/jsr107spec" target="_blank" rel="noopener noreferrer">JSR 107</a>, you can <a href="https://docs.spring.io/spring-framework/reference/integration/cache.html" target="_blank" rel="noopener noreferrer">check out this documentation</a>.</p>
<h3 id="native" class="headerLink">
    <a href="#native" class="header-mark"></a>3.4 In case of emergency: break the glass!</h3><p>OK, none of all the tips exposed in this article has worked?</p>
<p>Now, remember that, at the end of the day, you use a database.
It comes with many tools which may run your queries at lightning speed.</p>
<p>You can use <a href="https://www.postgresql.org/docs/current/rules-views.html" target="_blank" rel="noopener noreferrer">SQL views</a> or <a href="https://www.postgresql.org/docs/current/rules-materializedviews.html" target="_blank" rel="noopener noreferrer">SQL materialized views</a> to specify the data you want to fetch.
In addition, feel free to use <a href="https://jakartaee.github.io/persistence/latest/api/jakarta.persistence/jakarta/persistence/EntityManager.html#createNativeQuery%28java.lang.String%29" target="_blank" rel="noopener noreferrer">Native queries</a> , <a href="https://jakartaee.github.io/persistence/latest/api/jakarta.persistence/jakarta/persistence/NamedNativeQuery.html" target="_blank" rel="noopener noreferrer">Named Native Queries</a> or <a href="https://jakartaee.github.io/persistence/latest/api/jakarta.persistence/jakarta/persistence/StoredProcedureQuery.html" target="_blank" rel="noopener noreferrer">Stored Procedure Queries</a>  (<strong>ONLY FOR</strong>) for the 10-20%  of your most time-consuming queries.
At the end of the day, you won&rsquo;t be faster using an <a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping" target="_blank" rel="noopener noreferrer">ORM</a>!</p>
<p>For instance, when you use a SQL view, you can, with no effort, run either a native query or fetch a DTO or a tuple (see <a href="#dto" rel="">above</a>):</p>
<p>Here is a trivial example to illustrate it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Query</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="s">&#34;select * from Store s where s.name= :name&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">nativeQuery</span><span class="o">=</span><span class="kc">true</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Store</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">findByName</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">name</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>4 Conclusion</h2><p>If you reached this last chapter, you would see there are plenty of solutions to fix ORM/JPA performance issues.
I aimed at a summary of the most efficient solutions for type of problem.
As a matter of fact, I&rsquo;m pretty sure there are other ones.</p>
<p>Anyway, the first thing to put in place, is the whole observability stack: through <a href="https://blog.touret.info/2024/01/16/observability-from-zero-to-hero/" target="_blank" rel="noopener noreferrer">logging, traces</a> or <a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener noreferrer">prometheus metrics</a> you will get deep insights of your application.
Check also your database to see if you have a <em>&ldquo;full table scan&rdquo;</em> when you run specific SQL queries.
It will help you find where is the bottleneck.</p>
<p>Last but not least, don&rsquo;t rush into such optimisations (e.g., <a href="#native" rel="">native queries</a>)!
Observe your application first to figure out if it&rsquo;s worth it.</p>
<p>Don&rsquo;t forget that any <a href="https://www.laws-of-software.com/laws/knuth/" target="_blank" rel="noopener noreferrer">Premature optimisation is the root of all evil!</a></p>
<div class="details admonition bug open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-bug fa-fw"></i>Just in case...<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">After reading this article, if you&rsquo;ve seen any errors/issues or tip I missed, feel free <a href="https://github.com/alexandre-touret/alexandre-touret.github.io/issues" target="_blank" rel="noopener noreferrer">to submit an issue</a>.</div>
        </div>
    </div>
<h3 id="further-reading" class="headerLink">
    <a href="#further-reading" class="header-mark"></a>4.1 Further reading</h3><ul>
<li><a href="https://jakarta.ee/learn/docs/jakartaee-tutorial/current/persist/persistence-intro/persistence-intro.html" target="_blank" rel="noopener noreferrer">https://jakarta.ee/learn/docs/jakartaee-tutorial/current/persist/persistence-intro/persistence-intro.html</a></li>
<li><a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener noreferrer">https://spring.io/projects/spring-data</a></li>
<li><a href="https://blog.ippon.tech/boost-the-performance-of-your-spring-data-jpa-application" target="_blank" rel="noopener noreferrer">https://blog.ippon.tech/boost-the-performance-of-your-spring-data-jpa-application</a></li>
<li><a href="https://thorben-janssen.com" target="_blank" rel="noopener noreferrer">https://thorben-janssen.com</a></li>
<li><a href="https://vladmihalcea.com" target="_blank" rel="noopener noreferrer">https://vladmihalcea.com</a></li>
</ul>
]]></description></item><item><title>Mastering Observability: Empowering Developers from Zero to Hero with Spring &amp; the Grafana stack</title><link>https://blog.touret.info/2024/01/16/observability-from-zero-to-hero/</link><pubDate>Tue, 16 Jan 2024 19:00:43 +0100</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2024/01/16/observability-from-zero-to-hero/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2024/01/felipe-correia-ScQngs6oO1E-unsplash.webp" referrerpolicy="no-referrer">
            </div><h2 id="the-sad-reality" class="headerLink">
    <a href="#the-sad-reality" class="header-mark"></a>1 The sad reality</h2><p>Picture this: it&rsquo;s Friday afternoon, and you&rsquo;re eagerly looking forward to unwinding for the weekend.
Suddenly, an Ops engineer alerts you about a critical issue—a stubborn HTTP 500 error that&rsquo;s causing a major roadblock.</p>
<p>Despite the dedicated efforts of the Ops engineers, the root cause remains elusive due to a lack of contextual information.</p>
<p>Hours pass by, but you take it upon yourself to delve into the problem.
Eventually, after reproducing and debugging the issue on your computer, you uncover the issue.</p>
<p>Does this sound like science fiction? If you&rsquo;ve experienced a similar scenario, you&rsquo;re likely familiar with the challenges posed by unidentified end users and their unique usage patterns—enter Ops and observability!</p>
<p>I&rsquo;ve previously delved into the topic of observability.
Here are a bunch of articles I wrote on this blog or on the <a href="https://blog.worldline.tech" target="_blank" rel="noopener noreferrer">Worldline Tech Blog</a>:</p>
<ul>
<li><a href="https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/" target="_blank" rel="noopener noreferrer">Enhancing Asynchronous Transaction Monitoring: Implementing Distributed Tracing in Apache Camel Applications with OpenTelemetry</a></li>
<li><a href="https://blog.touret.info/2021/07/26/observabilite-et-circuit-breaker-avec-spring/" target="_blank" rel="noopener noreferrer">Observabilité et Circuit Breaker avec Spring</a></li>
<li><a href="https://blog.worldline.tech/2021/09/22/enabling_distributed_tracing_in_spring_apps.html" target="_blank" rel="noopener noreferrer">Enabling distributed tracing on your microservices Spring app using Jaeger and OpenTracing</a></li>
</ul>
<p>In this article, I aim to highlight the importance of putting in place observability during the earliest stages of a project.
I will then outline how to merge logs and traces from a good old <a href="https://spring.io/projects/spring-boot/" target="_blank" rel="noopener noreferrer">Spring Boot application</a> on the <a href="https://grafana.com/" target="_blank" rel="noopener noreferrer">Grafana Stack</a> to gain clearer insights into your platform&rsquo;s workings.
By doing so, you can transform your relationship with Ops teams, making them your best friends.</p>
<div class="details admonition question open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-question-circle fa-fw"></i>What about the code?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The examples provided in this article come from <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero" target="_blank" rel="noopener noreferrer">this project hosted on Github</a>.</div>
        </div>
    </div>
<h2 id="a-definition-of-observability" class="headerLink">
    <a href="#a-definition-of-observability" class="header-mark"></a>2 A definition of Observability</h2><p>We can shortly define it as this:</p>
<blockquote>
<p>Observability is the ability <strong>to understand the internal state of a complex system</strong>.
When a system is observable, a user can <strong>identify the root cause</strong> of a performance problem by examining the data it produces, without additional testing or coding.</p>
<p>This is one of the ways in which <strong>quality of service</strong> issues can be addressed.</p>
</blockquote>
<h2 id="a-short-presentation-of-the-grafana-stack" class="headerLink">
    <a href="#a-short-presentation-of-the-grafana-stack" class="header-mark"></a>3 A short presentation of the Grafana stack</h2><p><a href="https://grafana.com/oss/" target="_blank" rel="noopener noreferrer">The Grafana stack</a> aims at a tool which allows you to query, visualise, alert and explore all of your metrics.
You can aggregate them through a <a href="https://grafana.com/docs/grafana/latest/datasources/" target="_blank" rel="noopener noreferrer">wide range of data sources</a>.
With regard to the topic of this article,it will provide us all you need to collect logs, metrics and traces (and beyond) to monitor and understand the behaviour of your platforms.</p>
<p>I will therefore particularly focus on:</p>
<ul>
<li><a href="https://grafana.com/oss/grafana/" target="_blank" rel="noopener noreferrer">Grafana</a>: The dashboard engine</li>
<li><a href="https://grafana.com/oss/loki/" target="_blank" rel="noopener noreferrer">Loki</a>: The log storage engine</li>
<li><a href="https://grafana.com/oss/tempo/" target="_blank" rel="noopener noreferrer">Tempo</a>: The trace storage engine</li>
</ul>
<p>By the way, I also configured in this project a <a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener noreferrer">Prometheus TSDB to store metrics</a>.</p>
<p>To get it started easily, I just created a <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/tree/main/docker" target="_blank" rel="noopener noreferrer">Docker Compose stack to run it on your desktop</a>.</p>
<p>You can run it with these commands:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> docker
</span></span><span class="line"><span class="cl">docker compose up
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="logs-traces--monitoring" class="headerLink">
    <a href="#logs-traces--monitoring" class="header-mark"></a>4 Logs, Traces &amp; Monitoring</h2><p>Let&rsquo;s go back to the basics: To make a system fully observable, the following abilities must be implemented:</p>
<ul>
<li>Logs</li>
<li>Traces</li>
<li>Metrics</li>
</ul>
<p>They can be defined as follows:</p>
<p><figure><img
        
        loading="lazy"
        src="/assets/images/2024/01/image-2023-8-1_9-44-11.webp"
        srcset="/assets/images/2024/01/image-2023-8-1_9-44-11.webp, /assets/images/2024/01/image-2023-8-1_9-44-11.webp 1.5x, /assets/images/2024/01/image-2023-8-1_9-44-11.webp 2x"
        title="monitoring" ></figure></p>
<h2 id="logs" class="headerLink">
    <a href="#logs" class="header-mark"></a>5 Logs</h2><p>When a program fails, OPS usually tries to identify the underlying error analyzing log files.
It could be either reading the application log files or using a log aggregator such as Elastic Kibana or Splunk.</p>
<p>In my opinion, most of the time developers don&rsquo;t really care about this matter.
It is mainly due to they did not experience such a trouble.</p>
<p>For two years, I had to administrate a proprietary customer relationship management solution.
The only way to analyse errors was navigating through the logs, using the most appropriate error levels to get the root cause.
We didn&rsquo;t have access to the source code (Long live to open source programs).
Hopefully the log management system was really efficient.
It helped us get into this product and administrate it efficiently.</p>
<p>Furthermore, I strongly think we should systematise such experiences for developers.
It could help them (us) know what is behind the curtain and make more observable and better programs.</p>
<h3 id="key-principles" class="headerLink">
    <a href="#key-principles" class="header-mark"></a>5.1 Key principles</h3><p>You must first dissociate the logs you make while you code (e.g., for debugging) from the production logs.
The first should normally remove the first.
For the latter, you should apply some of these principles:</p>
<ul>
<li>Identify and use the most appropriate level (<code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>,&hellip;)</li>
<li>Provide a clear and useful message for OPS (yes you make this log for him/her)</li>
<li>Provide business context (e.g., the creation of the contract <code>123456</code> failed)</li>
<li>Logs must be read by an external tool (e.g., using a log aggregator)</li>
<li>Logs must not expose sensitive data: You must think about GDPR, PCI DSS standards</li>
</ul>
<p>If you want to dig into log levels and the importance to indicate contextual information into your logs, I suggest you reading <a href="https://blog.worldline.tech/2020/01/22/back-to-basics-logging.html" target="_blank" rel="noopener noreferrer">this article from my colleague Nicolas Carlier</a>.</p>
<h2 id="what-about-grafana-loki" class="headerLink">
    <a href="#what-about-grafana-loki" class="header-mark"></a>6 What about Grafana Loki</h2><p>For this test, I chose to use <a href="https://github.com/loki4j/loki-logback-appender" target="_blank" rel="noopener noreferrer">loki-logback-appender</a> to send the logs to Loki.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>About this appender<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I chose to use this appender for testing purpose.
If you deploy your application on top of Kubernetes, you would probably opt for a more suitable solution such as <a href="https://www.fluentd.org/" target="_blank" rel="noopener noreferrer">FluentD</a>.</div>
        </div>
    </div>
<p>The configuration for a Spring Boot application is pretty straightforward:</p>
<p>You must add first the appender to your classpath:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;com.github.loki4j:loki-logback-appender:1.4.2&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>and create a <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero-/blob/main/src/main/resources/logback-spring.xml" target="_blank" rel="noopener noreferrer"><code>logback-spring.xml</code></a> to configure it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"> <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&#34;LOKI&#34;</span> <span class="na">class=</span><span class="s">&#34;com.github.loki4j.logback.Loki4jAppender&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;http&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;url&gt;</span>http://localhost:3100/loki/api/v1/push<span class="nt">&lt;/url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/http&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;format&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;label&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;pattern&gt;</span>app=${name},host=${HOSTNAME},level=%level<span class="nt">&lt;/pattern&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;readMarkers&gt;</span>true<span class="nt">&lt;/readMarkers&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/label&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;message&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;pattern&gt;</span>
</span></span><span class="line"><span class="cl">                    {&#34;level&#34;:&#34;%level&#34;,&#34;class&#34;:&#34;%logger{36}&#34;,&#34;thread&#34;:&#34;%thread&#34;,&#34;message&#34;: &#34;%message&#34;,&#34;requestId&#34;: &#34;%X{X-Request-ID}&#34;}
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/pattern&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/message&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/format&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/appender&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>Et voilà!</em></p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>About the format<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">It is just my 2 cents: more and more I tend to produce structured logs using JSON for instance.
It is usually easier to manipulate them all along the log ingestion tools chain (e.g, with <a href="https://www.elastic.co/fr/logstash/" target="_blank" rel="noopener noreferrer">LogStash</a>.</div>
        </div>
    </div>
<p>After restarting your application:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gradle bootRun
</span></span></code></pre></td></tr></table>
</div>
</div><p>After running some API calls with the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http :8080/api/events
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can now get logs browsing Grafana</p>
<p><figure><img
        
        loading="lazy"
        src="/assets/images/2024/01/Loki-Grafana.webp"
        srcset="/assets/images/2024/01/Loki-Grafana.webp, /assets/images/2024/01/Loki-Grafana.webp 1.5x, /assets/images/2024/01/Loki-Grafana.webp 2x"
        title="Loki" ></figure></p>
<h2 id="traces" class="headerLink">
    <a href="#traces" class="header-mark"></a>7 Traces</h2><p>Upon initial inspection, one might consider the existing setup sufficient. However, I highly recommend delving into the realm of <a href="https://research.google/pubs/pub36356/" target="_blank" rel="noopener noreferrer">Distributed Tracing</a>, a technology I have previously introduced (refer to the aforementioned discussion).
Not only it will be first really useful when you deploy distributed architectures but also for the other kind of platforms.</p>
<p>The true value of distributed tracing becomes evident not only in the deployment of distributed architectures but across various platforms. In the complex landscape of production issues, identifying the root cause or understanding why a specific SQL query failed or took an extended duration can be challenging. Traditionally, attempts to replicate such issues in alternative environments often fall short due to the inherent complexities of data, server configurations, and benchmarking.</p>
<p>This technology empowers you to gain valuable insights that were previously elusive. When grappling with production issues, you no longer need to rely solely on replication efforts; distributed tracing provides a clear and comprehensive perspective on what might be amiss.</p>
<p>To sum up: <em>Try it, you&rsquo;ll like it!</em></p>
<h3 id="the-setup" class="headerLink">
    <a href="#the-setup" class="header-mark"></a>7.1 The setup</h3><p>There is several ways to set it up.
Nowadays, OpenTelemetry is the <em>de facto</em> standard.
Most of the solutions are compatible with it.</p>
<p>Nevertheless, after challenging some APMs, I found some missing features which are really useful in real life projects.
For instance, you can not easily ignore URLs, for instance the actuator endpoints, from the traces you will manage.
You can do that in just <a href="https://www.elastic.co/guide/en/apm/agent/java/1.x/config-http.html#config-transaction-ignore-urls" target="_blank" rel="noopener noreferrer">one property with the Elastic APM agent</a>.
There is <a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/1060#issuecomment-1816716602" target="_blank" rel="noopener noreferrer">an issue about this feature</a>.</p>
<p>I suggest using the agents.
It is less intrusive than other solutions.</p>
<p>For instance if you use the spring boot gradle plugin you can configure it as following:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span> <span class="s1">&#39;org.springframework.boot&#39;</span> <span class="n">version</span> <span class="s1">&#39;3.2.1&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">id</span> <span class="s1">&#39;io.spring.dependency-management&#39;</span> <span class="n">version</span> <span class="s1">&#39;1.1.4&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ext</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">opentelemetryAgentVersion</span> <span class="o">=</span> <span class="s1">&#39;1.32.0&#39;</span> <span class="c1">// Mettez la version appropriée
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;info.touret.observability&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;0.0.1-SNAPSHOT&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">java</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="s1">&#39;21&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mavenCentral</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">testImplementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-test&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s1">&#39;com.github.loki4j:loki-logback-appender:1.4.2&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">implementation</span> <span class="s2">&#34;io.opentelemetry.javaagent:opentelemetry-javaagent:${opentelemetryAgentVersion}&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">task</span> <span class="nf">copyJavaAgent</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Copy</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">from</span> <span class="n">configurations</span><span class="o">.</span><span class="na">detachedConfiguration</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">dependencies</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&#34;io.opentelemetry.javaagent:opentelemetry-javaagent:${opentelemetryAgentVersion}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">into</span> <span class="s2">&#34;${project.getLayout().getBuildDirectory()}/javaagents&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rename</span> <span class="o">{</span> <span class="s1">&#39;javaagent.jar&#39;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">processResources</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">copyJavaAgent</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bootRun</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">doFirst</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">jvmArgs</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;-javaagent:${project.getLayout().getBuildDirectory()}/javaagents/javaagent.jar&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// systemProperties = [
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     &#39;otel.traces.sampler&#39;: &#39;parentbased_traceidratio&#39;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     &#39;otel.traces.sampler.arg&#39;: &#39;0.2&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="n">tasks</span><span class="o">.</span><span class="na">named</span><span class="o">(</span><span class="s1">&#39;test&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">useJUnitPlatform</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After restarting your application, you can reach the API with this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http :8080/api/events
</span></span></code></pre></td></tr></table>
</div>
</div><p>This API is really simple.
To illustrate how to handle errors using both the Spring stack and the Grafana stack, an error is always thrown using <a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-ann-rest-exceptions.html" target="_blank" rel="noopener noreferrer">the Problem Detail RFC 7807</a> while reaching it.</p>
<p>Here the <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/blob/main/src/main/java/info/touret/observability/observabilityfromzerotohero/ObservabilityService.java" target="_blank" rel="noopener noreferrer">service</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ObservabilityService</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">breakMethod</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">IllegalStateException</span><span class="p">(</span><span class="s">&#34;Breaking method issue&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>And the <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/blob/main/src/main/java/info/touret/observability/observabilityfromzerotohero/ObservabilityAPIController.java" target="_blank" rel="noopener noreferrer">controller</a> which returns the error:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@GetMapping</span><span class="p">(</span><span class="s">&#34;/api/event&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ObservabilityEventDto</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">getEvent</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">ErrorResponseException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">observabilityService</span><span class="p">.</span><span class="na">breakMethod</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">var</span><span class="w"> </span><span class="n">observabilityEventDto</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ObservabilityEventDto</span><span class="p">(</span><span class="n">UUID</span><span class="p">.</span><span class="na">randomUUID</span><span class="p">().</span><span class="na">toString</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;OK&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">ResponseEntity</span><span class="p">.</span><span class="na">ok</span><span class="p">(</span><span class="n">observabilityEventDto</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">var</span><span class="w"> </span><span class="n">observabilityEventDto</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ObservabilityEventDto</span><span class="p">(</span><span class="n">UUID</span><span class="p">.</span><span class="na">randomUUID</span><span class="p">().</span><span class="na">toString</span><span class="p">(),</span><span class="w"> </span><span class="s">&#34;Error&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">LOGGER</span><span class="p">.</span><span class="na">error</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="na">getMessage</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ErrorResponseException</span><span class="p">(</span><span class="n">HttpStatus</span><span class="p">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="p">,</span><span class="w"> </span><span class="n">ProblemDetail</span><span class="p">.</span><span class="na">forStatus</span><span class="p">(</span><span class="n">HttpStatus</span><span class="p">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="p">),</span><span class="w"> </span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Using Problem Detail responses, you will get such a response when an error occurs:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> http :8080/api/events
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">500</span>
</span></span><span class="line"><span class="cl">Connection: close
</span></span><span class="line"><span class="cl">Content-Type: application/problem+json
</span></span><span class="line"><span class="cl">Date: Wed, <span class="m">17</span> Jan <span class="m">2024</span> 08:09:20 GMT
</span></span><span class="line"><span class="cl">Transfer-Encoding: chunked
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;instance&#34;</span>: <span class="s2">&#34;/api/events&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;status&#34;</span>: 500,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;title&#34;</span>: <span class="s2">&#34;Internal Server Error&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;type&#34;</span>: <span class="s2">&#34;about:blank&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After testing this service a few times, you can now see the traces on your Grafana dashboard.</p>
<p><figure><img
        
        loading="lazy"
        src="/assets/images/2024/01/Tempo-Grafana.webp"
        srcset="/assets/images/2024/01/Tempo-Grafana.webp, /assets/images/2024/01/Tempo-Grafana.webp 1.5x, /assets/images/2024/01/Tempo-Grafana.webp 2x"
        title="Tempo" ></figure></p>
<h3 id="head-or-tail-sampling" class="headerLink">
    <a href="#head-or-tail-sampling" class="header-mark"></a>7.2 Head or Tail sampling?</h3><p>One significant drawback of implementing this technology lies in the potential performance overhead it introduces to the instrumented application. In cases where high-pressure APIs generate or broadcast SPANs for every transaction, there&rsquo;s a substantial risk of significantly impacting the <a href="https://sre.google/sre-book/service-level-objectives/" target="_blank" rel="noopener noreferrer">Service Level Objectives (SLOs)</a> of your platform.</p>
<p>A viable solution to mitigate this challenge involves sampling the traces, such as retaining only 20% of the transactions. There are two primary approaches:</p>
<ol>
<li>
<p><strong>Head Sampling</strong>: In this method, SPANs are sampled and filtered directly from the producer (e.g., a backend). This is essential for heavily utilized platforms and proves to be the most efficient, as it produces only the necessary spans, thereby avoiding the dissemination of unnecessary SPANs. However, it comes with the trade-off of potentially losing critical traces involving failures. The sampling rate is purely statistical (e.g., 10 or 20% of SPANs sampled and broadcast).</p>
</li>
<li>
<p><strong>Tail Sampling</strong>: Alternatively, SPANs are sampled retrospectively, often through tools like the <a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noopener noreferrer">Open Telemetry Collector</a>. While this method allows for filtering SPANs based on various criteria, such as the transaction status, it does not address the overhead issue. All SPANs are initially broadcast and then filtered, making it less suitable for heavily used scenarios.</p>
</li>
</ol>
<p>Both approaches have their pros and cons, and the choice depends on the specific requirements of the platform. For an in-depth exploration of this issue, you can refer to <a href="https://uptrace.dev/opentelemetry/sampling.html#what-is-sampling" target="_blank" rel="noopener noreferrer">this article</a>.</p>
<h2 id="correlating-logs--traces" class="headerLink">
    <a href="#correlating-logs--traces" class="header-mark"></a>8 Correlating Logs &amp; Traces</h2><p>Now, you have on one side the logs of your applications, and on the other the traces.
To dig into errors and see what is behind the curtain of any error logged, it is really import to correlate both.</p>
<p>For that, you must specify in your logs the traceID and spanID of the corresponding trace.
Hopefully, logback and the Loki appender can help you on this!
We therefore will modify the pattern of the logs in the <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero-/blob/main/src/main/resources/logback-spring.xml" target="_blank" rel="noopener noreferrer"><code>logback-spring.xml</code></a> file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;pattern&gt;</span>
</span></span><span class="line"><span class="cl">    {&#34;level&#34;:&#34;%level&#34;,&#34;TraceID&#34;:&#34;%mdc{trace_id:-none}&#34;,&#34;spanId&#34;:&#34;%mdc{span_id:-none}&#34;,&#34;class&#34;:&#34;%logger{36}&#34;,&#34;thread&#34;:&#34;%thread&#34;,&#34;message&#34;: &#34;%message&#34;,&#34;requestId&#34;: &#34;%X{X-Request-ID}&#34;}
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/pattern&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As a developer point of view, the job is done :)
Now, it is time for the OPS/SRE to configure Grafana to link Loki and Tempo through the TraceID field.</p>
<p>For that, you can create a derived field directly in the datasource configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">datasources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">access</span><span class="p">:</span><span class="w"> </span><span class="l">proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://loki:3100</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">maxLines</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">derivedFields</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">matcherRegex</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;\&#34;TraceID\&#34;: \&#34;(\w+).*\&#34;&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">TraceID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># url will be interpreted as query for the datasource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;$${__value.raw}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># optional for URL Label to set a custom display label for the link.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">urlDisplayLabel</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;View Trace&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">access</span><span class="p">:</span><span class="w"> </span><span class="l">proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://tempo:3200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nodeGraph</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;mimir&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tracesToLogs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="l">loki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filterByTraceID</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">filterBySpanID</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">mapTagNamesEnabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Now you will be able to browse directly to the corresponding trace from your log event and the other way around.</p>
<h2 id="metrics" class="headerLink">
    <a href="#metrics" class="header-mark"></a>9 Metrics</h2><p>Now, let us deep dive into the metrics of our application!
We can do that through <a href="https://prometheus.io/" target="_blank" rel="noopener noreferrer">Prometheus</a>.</p>
<p>We can configure now Prometheus to grab the metrics exposed by our application.</p>
<p>To do that, we need first to activate the Prometheus endpoint:</p>
<p>We need to add this dependency first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And enable the corresponding endpoint:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">management.endpoints.web.exposure.include</span><span class="o">=</span><span class="s">health,info,prometheus</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After enabling it, as a developer point of view, it is done :-)</p>
<p>The prometheus statistics can be scrapped by Prometheus itself using <a href="https://github.com/alexandre-touret/observability-from-zero-to-hero/blob/main/docker/prometheus/prometheus.yml" target="_blank" rel="noopener noreferrer">this configuration</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">honor_timestamps</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">15s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scrape_timeout</span><span class="p">:</span><span class="w"> </span><span class="l">10s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scheme</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">static_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">targets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">host.docker.internal:8080</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, you can directly browse it through Grafana to integrate all of these metrics into your dashboards 🎉.</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>10 Conclusion</h2><p>I endeavored to provide you with a comprehensive overview of what an OPS professional could anticipate while investigating an issue and the corresponding topics that require attention.
As you probably figured out, we only applied just a bunch of configuration sets.<br>
One of the key merits of these tools lies in their non-intrusiveness within the code itself.
To cut long story short: it is not a big deal!</p>
<p>Integrating these configurations can be a significant stride forward, providing invaluable assistance to the entire IT team, from development to operations, as they navigate and troubleshoot issues—whether in production or elsewhere.</p>
<p>I will finish this article by my opinion on such topics: regardless of the targeted tools, this set of configuration <strong>must be considered as the first feature to implement for every cloud native application</strong>.</p>
]]></description></item><item><title>Streamline Java Application Deployment: Pack, Ship, and Unlock Distributed Tracing with Elastic APM on Kubernetes</title><link>https://blog.touret.info/2023/11/01/pack-ship-java-deployment-distributed-tracing-elasticapm/</link><pubDate>Wed, 01 Nov 2023 08:00:00 +0200</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/11/01/pack-ship-java-deployment-distributed-tracing-elasticapm/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/10/claudio-schwarz-q8kR_ie6WnI-unsplash.webp" referrerpolicy="no-referrer">
            </div><p>In <a href="https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/" target="_blank" rel="noopener noreferrer">my last article</a>, I dug into <a href="https://www.w3.org/TR/trace-context/" target="_blank" rel="noopener noreferrer">Distributed Tracing</a> and exposed how to enable it in Java applications.
We didn&rsquo;t see yet how to deploy an application on Kubernetes and get distributed tracing insights.
Several strategies can be considered, but the main point is how to minimize the impact of deploying APM agents on the whole delivery process.</p>
<p>In this article, I will expose how to ship APM agents for instrumenting Java applications deployed on top of <a href="https://kubernetes.io/" target="_blank" rel="noopener noreferrer">Kubernetes</a> through <a href="https://www.docker.com/resources/what-container/" target="_blank" rel="noopener noreferrer">Docker containers</a>.</p>
<p>To make it clearer, I will illustrate this setup by the following use case:</p>
<ul>
<li>We have an API <em>&ldquo;My wonderful API&rdquo;</em> which is instrumented through an <a href="https://www.elastic.co/guide/en/apm/agent/index.html" target="_blank" rel="noopener noreferrer">Elastic APM agent</a>.</li>
<li>The data is then sent to the <a href="https://www.elastic.co/guide/en/apm" target="_blank" rel="noopener noreferrer">Elastic APM</a>.</li>
</ul>
<div id="id-1"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/10/architecture_system.svg"
        srcset="/assets/images/2023/10/architecture_system.svg, /assets/images/2023/10/architecture_system.svg 1.5x, /assets/images/2023/10/architecture_system.svg 2x"
        title="c4 context diagram" ></figure></div>
<p>Now, if we dive into the <em>&ldquo;Wonderful System&rdquo;</em>, we can see the <em>Wonderful Java application</em> and the agent:</p>
<div id="id-2"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/10/architecture_container.svg"
        srcset="/assets/images/2023/10/architecture_container.svg, /assets/images/2023/10/architecture_container.svg 1.5x, /assets/images/2023/10/architecture_container.svg 2x"
        title="c4 context diagram" ></figure></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Elastic APM vs Grafana/OpenTelemetry<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>In this article I delve into how to package an <a href="https://www.elastic.co/guide/en/apm/agent/java/current/configuration.html" target="_blank" rel="noopener noreferrer">Elastic APM agent</a> and enable Distributed Tracing with the <a href="https://www.elastic.co/guide/en/apm/index.html" target="_blank" rel="noopener noreferrer">Elastic APM suite</a>.</p>
<p>You can do that in the same way with an <a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation" target="_blank" rel="noopener noreferrer">OpenTelemetry Agent</a>.
Furthermore, <a href="https://www.elastic.co/fr/blog/native-opentelemetry-support-in-elastic-observability" target="_blank" rel="noopener noreferrer">Elastic APM is compatible with OpenTelemetry</a>.</p>
</div>
        </div>
    </div>
<p>We can basically implement this architecture in two different ways:</p>
<ol>
<li>Deploying the agent in all of our Docker images</li>
<li>Deploying the agent asides from the Docker images and using initContainers to bring the agent at the startup of our applications</li>
</ol>
<p>We will then see how to lose couple application docker images to the apm agent one.</p>
<h2 id="why-not-bringing-apm-agents-in-our-docker-images" class="headerLink">
    <a href="#why-not-bringing-apm-agents-in-our-docker-images" class="header-mark"></a>1 Why not bringing APM agents in our Docker images?</h2><p>It could be really tempting to put the APM agents in the application&rsquo;s Docker image.</p>
<p>Why?
Because you just have to add the following lines of code in our Docker images definition:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">RUN</span> mkdir /opt/agent<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./javaagent.jar /opt/agent/javaagent.jar<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Nonetheless, if you want to upgrade your agent, you will have to repackage it and redeploy all your Docker images.</p>
<p>For regular upgrades, it will not bother you, but, if you encounter a bug or a vulnerability, it will be tricky and annoying to do that.</p>
<p>What is why I prefer loose coupling the <em>&ldquo;business&rdquo;</em> applications Docker images to technical tools such as APM agents.</p>
<h2 id="deploy-an-apm-agent-through-initcontainers" class="headerLink">
    <a href="#deploy-an-apm-agent-through-initcontainers" class="header-mark"></a>2 Deploy an APM agent through initContainers</h2><p>While looking around how to achieve this, I came across to the <a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/" target="_blank" rel="noopener noreferrer">Kubernetes initContainers</a>.</p>
<p>This kind of container is run only once during the startup of every pod.
A bunch of commands is ran then on top of it.
For our current use case, it will copy the javaagent into a volume such as an <a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir" target="_blank" rel="noopener noreferrer">empty directory volume</a>.</p>
<h3 id="impacts-in-the-_wonderful-java-application_-docker-image" class="headerLink">
    <a href="#impacts-in-the-_wonderful-java-application_-docker-image" class="header-mark"></a>2.1 Impacts in the &ldquo;<em>Wonderful Java Application</em> Docker image</h3><p>The main impact is to declare a volume in your Docker image:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">VOLUME</span><span class="s"> /opt/agent</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>It will be used by both the Docker container and the initContainer.
We can consider it as a &ldquo;bridge&rdquo; between these two ones.</p>
<p>We also have to declare one environment variable: <code>JAVA_OPTS</code>.</p>
<p>For instance:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">ENV</span> <span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="nv">$JAVA_OPTS</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="o">[</span>...<span class="o">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;sh&#34;</span><span class="p">,</span> <span class="s2">&#34;-c&#34;</span><span class="p">,</span> <span class="s2">&#34;java ${JAVA_OPTS} org.springframework.boot.loader.JarLauncher&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Il will be used during the deployment to set up our <em>Wonderful Java Application</em>.</p>
<p>Now, let&rsquo;s build our initContainer&rsquo;s Docker image.</p>
<h3 id="initcontainer-docker-image-creation" class="headerLink">
    <a href="#initcontainer-docker-image-creation" class="header-mark"></a>2.2 InitContainer Docker Image creation</h3><p>It is really straightforward.
We can use for example, the following configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> alpine:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> mkdir -p /opt/agent_setup<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> mkdir /opt/agent<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./javaagent.jar /opt/agent_setup/javaagent.jar<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">VOLUME</span><span class="s"> /opt/agent</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="kubernetes-configuration" class="headerLink">
    <a href="#kubernetes-configuration" class="header-mark"></a>2.3 Kubernetes configuration</h3><p>We can now set up our Kubernetes Deployment to start the corresponding container and copy the Java agent.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">java-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">repo/my-wonderful-java-app:v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/opt/agent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">apm-agent-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">initContainers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">cp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">/opt/agent_setup/javaagent.jar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">/opt/agent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">apm-agent-init</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">repo/apm-agent:v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/opt/agent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">appd-agent-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">appd-agent-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Why not just copying the Java agent directly in the initContainer Docker image execution?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The copy must be run with a command specified in the initContainer declaration and cannot be done during the initContainer execution (i.e., specified in its Dockerfile).
Why?
The volume is mounted just after the initContainer execution and drops the JAR file copied earlier.</div>
        </div>
    </div>
<h2 id="start-the-java-application-with-the-agent" class="headerLink">
    <a href="#start-the-java-application-with-the-agent" class="header-mark"></a>3 Start the Java Application with the agent</h2><p>Last but not least, we can now configure the <a href="https://kubernetes.io/docs/concepts/workloads/pods/" target="_blank" rel="noopener noreferrer">pods</a> where we run our Java applications.</p>
<p>We will use the <code>JAVA_OPTS</code> environment variable to configure the location of the Java agent, and <a href="https://www.elastic.co/guide/en/apm/agent/java/current/configuration.html" target="_blank" rel="noopener noreferrer">the Elastic APM Java system properties</a>.</p>
<p>For instance:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">JAVA_OPTS=-javaagent:/opt/agent/javaagent.jar -Delastic.apm.service_name=my-wonderful-application -Delastic.apm.application_packages=org.mywonderfulapp -Delastic.apm.server_url=http://apm:8200
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can then configure your Kubernetes deployment as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">java-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">JAVA_OPTS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>-<span class="l">javaagent:/opt/agent/javaagent.jar -Delastic.apm.service_name=my-wonderful-application -Delastic.apm.application_packages=org.mywonderfulapp -Delastic.apm.server_url=http://apm:8200</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><em>Et voila!</em></p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>4 Conclusion</h2><p>We have seen how to pack and deploy Distributed Tracing java agents and Java Applications built on top of Docker images.
Obviously, my technical choice of using an InitContainer can be challenged regarding your technical context and how you are confortable with your delivery practices.
You probably noticed I use an emptyDir to deploy the Java agent.
<em>Normally</em> it will not be a big deal, but I advise you to check this usage with your Kubernetes SRE/Ops/Administrator first.</p>
<p>Anyway, I think it is worth it and the tradeoffs are more than acceptable because this approach are, in my opinion, more flexible than the first one.</p>
<p>Hope this helps!</p>
]]></description></item><item><title>Enhancing Asynchronous Transaction Monitoring: Implementing Distributed Tracing in Apache Camel Applications with OpenTelemetry</title><link>https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/</link><pubDate>Tue, 05 Sep 2023 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/09/05/distributed-tracing-opentelemetry-camel-artemis/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/09/nick-fewings-4dI5OP2Ee64-unsplash.webp" referrerpolicy="no-referrer">
            </div><div id="id-1"><em>Picture Credit: <a href="https://unsplash.com/@jannerboy62" target="_blank" rel="noopener noreferrer">Nick FEWINGS</a></em></div>
<h2 id="introduction" class="headerLink">
    <a href="#introduction" class="header-mark"></a>1 Introduction</h2><p>In today&rsquo;s dynamic landscape, Distributed Tracing has emerged as an indispensable practice.
It helps to understand what is under the hood of distributed transactions, providing answers to pivotal questions: What comprises these diverse requests? What contextual information accompanies them? How extensive is their duration?</p>
<p>Since the introduction of <a href="https://research.google/pubs/pub36356/" target="_blank" rel="noopener noreferrer">Google&rsquo;s Dapper</a>, a plethora of tracing solutions has flooded the scene.
Among them, <a href="https://opentelemetry.io/" target="_blank" rel="noopener noreferrer">OpenTelemetry</a> has risen as the frontrunner.
Other alternatives such as <a href="https://www.elastic.co/observability/application-performance-monitoring" target="_blank" rel="noopener noreferrer">Elastic APM</a> and <a href="https://www.dynatrace.com/support/help/observe-and-explore/purepath-distributed-traces/distributed-traces-overview" target="_blank" rel="noopener noreferrer">DynaTrace</a> are also available.</p>
<p>This toolkit seamlessly aligns with APIs and synchronous transactions, catering to a broad spectrum of scenarios.</p>
<p>However, what about asynchronous transactions?
The necessity for clarity becomes even more pronounced in such cases.
Particularly in architectures built upon messaging or event streaming brokers, attaining a holistic view of the entire transaction becomes arduous.</p>
<p>Why does this challenge arise?
It&rsquo;s a consequence of functional transactions fragmenting into two loosely coupled subprocesses:</p>
<div id="id-2"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/loose-coupling-sequence.svg"
        srcset="/assets/images/2023/09/loose-coupling-sequence.svg, /assets/images/2023/09/loose-coupling-sequence.svg 1.5x, /assets/images/2023/09/loose-coupling-sequence.svg 2x"
        title="OpenTelemetry Collector Architecture" ></figure></div>
<p>Hopefully you can rope OpenTelemetry in it to shed light.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>What about the main concepts of Distributed Tracing?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I will not dig into the concepts of Distributed tracing in this article.
<a href="https://blog.worldline.tech/2021/09/22/enabling_distributed_tracing_in_spring_apps.html" target="_blank" rel="noopener noreferrer">If you are interested in it, you can read my article on the Worldline Tech Blog</a>.</div>
        </div>
    </div>
<p>I will explain in this article how to set up and plug OpenTelementry to gather asynchronous transaction traces using <a href="https://camel.apache.org/" target="_blank" rel="noopener noreferrer">Apache Camel</a> and <a href="https://activemq.apache.org/components/artemis/" target="_blank" rel="noopener noreferrer">Artemis</a>.
The first part will use Jaeger and the second one,  <a href="https://grafana.com/oss/tempo/" target="_blank" rel="noopener noreferrer">Tempo</a> and <a href="https://grafana.com/" target="_blank" rel="noopener noreferrer">Grafana</a> to be more <em>production ready</em>.</p>
<p>All the code snippets are part of <a href="https://GitHub.com/alexandre-touret/camel-artemis-opentelemetry" target="_blank" rel="noopener noreferrer">this project on GitHub</a>.
(Normally) you can use and run it locally on your desktop.</p>
<h2 id="jaeger" class="headerLink">
    <a href="#jaeger" class="header-mark"></a>2 Jaeger</h2><h3 id="architecture" class="headerLink">
    <a href="#architecture" class="header-mark"></a>2.1 Architecture</h3><p>The <a href="https://www.logicmonitor.com/blog/what-are-spans-in-distributed-tracing" target="_blank" rel="noopener noreferrer">SPANs</a> are broadcast and gathered through <a href="https://opentelemetry.io/docs/collector" target="_blank" rel="noopener noreferrer">OpenTelemetry Collector</a>.
It finally sends them to <a href="https://www.jaegertracing.io/" target="_blank" rel="noopener noreferrer">Jaeger</a>.</p>
<p>Here is the architecture of such a platform:</p>
<div id="id-3"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/architecture.svg"
        srcset="/assets/images/2023/09/architecture.svg, /assets/images/2023/09/architecture.svg 1.5x, /assets/images/2023/09/architecture.svg 2x"
        title="OpenTelemetry Collector Architecture" ></figure></div>
<h3 id="opentelemetry-collector" class="headerLink">
    <a href="#opentelemetry-collector" class="header-mark"></a>2.2 OpenTelemetry Collector</h3><p>The cornerstone of this architecture is the <a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noopener noreferrer">collector</a>.
It can be compared to <a href="https://www.elastic.co/fr/logstash/" target="_blank" rel="noopener noreferrer">Elastic LogStash</a> or an <a href="https://en.wikipedia.org/wiki/Extract,_transform,_load" target="_blank" rel="noopener noreferrer">ETL</a>.
It will help us get, transform and export telemetry data.</p>
<div id="id-4"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/otel-diagram.svg"
        srcset="/assets/images/2023/09/otel-diagram.svg, /assets/images/2023/09/otel-diagram.svg 1.5x, /assets/images/2023/09/otel-diagram.svg 2x"
        title="OpenTelemetry Collector Functionalities" ><figcaption class="image-caption">Source: https://opentelemetry.io/docs/collector/</figcaption>
    </figure></div>
<p>For our use case, the configuration is quite simple.</p>
<p>First, here is the <a href="https://opentelemetry.io/docs/collector/" target="_blank" rel="noopener noreferrer">Docker Compose configuration</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otel-collector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">otel/opentelemetry-collector:0.75.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">otel-collector</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">&#34;--config=/etc/otel-collector-config.yaml&#34;</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;1888:1888&#34;</span><span class="w">   </span><span class="c"># pprof extension</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;8888:8888&#34;</span><span class="w">   </span><span class="c"># Prometheus metrics exposed by the collector</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;8889:8889&#34;</span><span class="w">   </span><span class="c"># Prometheus exporter metrics</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;13133:13133&#34;</span><span class="w"> </span><span class="c"># health_check extension</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;4317:4317&#34;</span><span class="w">   </span><span class="c"># OTLP gRPC receiver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;55670:55679&#34;</span><span class="w"> </span><span class="c"># zpages extension</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>and the <a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/blob/main/containers/docker/otel-collector-config.yaml" target="_blank" rel="noopener noreferrer"><code>otel-collector-config.yaml</code></a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># (1)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">receivers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocols</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4317&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4318&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;/actuator/prometheus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">static_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">targets</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;host.docker.internal:8080&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># (2)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">exporters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#  prometheus:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#    endpoint: &#34;0.0.0.0:8889&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#    const_labels:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#      label1: value1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">logging</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">jaeger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="l">jaeger:14250</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">insecure</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#  zipkin:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#    endpoint: http://zipkin:9411/api/v2/spans</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#    tls:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#      insecure: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># (3)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">processors</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">batch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">extensions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">health_check</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pprof</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="p">:</span><span class="m">1888</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">zpages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="p">:</span><span class="m">55679</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># (4)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">extensions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">pprof, zpages, health_check]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pipelines</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">traces</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">receivers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">processors</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">batch]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">exporters</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">logging, jaeger]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">receivers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">processors</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">batch]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">exporters</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">logging]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Short explanation</strong></p>
<p>If you want further information about this configuration, you <a href="https://opentelemetry.io/docs/collector/configuration/" target="_blank" rel="noopener noreferrer">can browse the documentation</a>.</p>
<p>For those who are impatient, here are a short explanation of this configuration file:</p>
<ol>
<li>Where to pull data?</li>
<li>Where to store data?</li>
<li>What to do with it?</li>
<li>What are the workloads to activate?</li>
</ol>
<h3 id="what-about-the-code" class="headerLink">
    <a href="#what-about-the-code" class="header-mark"></a>2.3 What about the code?</h3><p>The configuration to apply is pretty simple and straightforward.
To cut long story short, you need to include libraries, add some configuration lines and run your application with an agent which will be responsible for broadcasting the SPANs.</p>
<h4 id="libraries-to-add" class="headerLink">
    <a href="#libraries-to-add" class="header-mark"></a>2.3.1 Libraries to add</h4><p>For an Apache Camel based Java application, you need to add this starter first:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>org.apache.camel.springboot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>camel-opentelemetry-starter<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In case you set up a <em>basic</em> <a href="https://spring.io/" target="_blank" rel="noopener noreferrer">Spring Boot application</a>, you only have to configure the agent (<em>see below</em>).</p>
<h4 id="what-about-the-code-1" class="headerLink">
    <a href="#what-about-the-code-1" class="header-mark"></a>2.3.2 What about the code?</h4><p>This step is not mandatory.
However, if you are eager to get more details in your Jaeger dashboard, it is advised.</p>
<p>In the application class, you only have to put the <code>@CamelOpenTelemetry</code> annotation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CamelOpenTelemetry</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@SpringBootApplication</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">DemoApplication</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">[</span><span class="p">...</span><span class="o">]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>If you want more details, you can check <a href="https://camel.apache.org/components/3.20.x/others/opentelemetry.html" target="_blank" rel="noopener noreferrer">the official documentation</a>.</p>
<h4 id="the-java-agent" class="headerLink">
    <a href="#the-java-agent" class="header-mark"></a>2.3.3 The Java Agent</h4><p>The java agent is responsible for instrumenting Java 8+ code, capturing metrics and forwarding them to the collector.</p>
<p>In case you don&rsquo;t know what is a Java Agent, I recommend watching <a href="https://www.youtube.com/watch?v=oflzFGONG08" target="_blank" rel="noopener noreferrer">this conference</a>.</p>
<p><a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation" target="_blank" rel="noopener noreferrer">Its documentation is available on GitHub</a>.
The detailed list of configuration parameters <a href="https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/" target="_blank" rel="noopener noreferrer">is available here</a>.
You can configure it through environment, system variables or a <a href="https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/#configuration-file" target="_blank" rel="noopener noreferrer">configuration file</a>.</p>
<p>For instance, by default, the OpenTelemetry Collector default endpoint value is <code>http://localhost:4317</code>.
You can alter it by setting the <code>OTEL_EXPORTER_OTLP_METRICS_ENDPOINT</code> environment variable or the <code>otel.exporter.otlp.metrics.endpoint</code> java system variable (e.g., using <code>-Dotel.exporter.otlp.metrics.endpoint</code> option ).</p>
<p>In my example, we use Maven configuration to download the agent JAR file and run our application with it as an agent.</p>
<p><strong>Example of configuration</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;profile&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;id&gt;</span>opentelemetry<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;activation&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;name&gt;</span>apm<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;value&gt;</span>otel<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/activation&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>maven-dependency-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;executions&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;execution&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;id&gt;</span>copy-javaagent<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;phase&gt;</span>process-resources<span class="nt">&lt;/phase&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;goals&gt;</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&lt;goal&gt;</span>copy<span class="nt">&lt;/goal&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;/goals&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&lt;artifactItems&gt;</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&lt;artifactItem&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;groupId&gt;</span>io.opentelemetry.javaagent<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;artifactId&gt;</span>opentelemetry-javaagent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;version&gt;</span>${opentelemetry-agent.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;overWrite&gt;</span>true<span class="nt">&lt;/overWrite&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;outputDirectory&gt;</span>${project.build.directory}/javaagents<span class="nt">&lt;/outputDirectory&gt;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&lt;destFileName&gt;</span>javaagent.jar<span class="nt">&lt;/destFileName&gt;</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&lt;/artifactItem&gt;</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&lt;/artifactItems&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/execution&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/executions&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;agents&gt;</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&lt;agent&gt;</span>${project.build.directory}/javaagents/javaagent.jar<span class="nt">&lt;/agent&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&lt;/agents&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                    &lt;systemPropertyVariables&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                        &lt;otel.traces.sampler&gt;parentbased_traceidratio&lt;/otel.traces.sampler&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                        &lt;otel.traces.sampler.arg&gt;0.2&lt;/otel.traces.sampler.arg&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="c">&lt;!--                    &lt;/systemPropertyVariables&gt;--&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/profile&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The variables in comment (e.g., <code>otel.traces.sampler</code>) can be turned on if you want <a href="https://opentelemetry.io/docs/concepts/sampling/" target="_blank" rel="noopener noreferrer">to sample your forwarded data based on a head rate limiting</a>.</p>
<p>Before running the whole application (<a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/tree/main/gateway" target="_blank" rel="noopener noreferrer">gateway</a>, <a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/tree/main/camel-producer" target="_blank" rel="noopener noreferrer">producer</a>,<a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/tree/main/camel-consumer" target="_blank" rel="noopener noreferrer">consumer</a>), you must ramp up the infrastructure with <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener noreferrer">Docker compose</a>.
The source is available <a href="https://github.com/alexandre-touret/camel-artemis-opentelemetry/blob/main/containers/docker-compose.yml" target="_blank" rel="noopener noreferrer">here</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd containers
</span></span><span class="line"><span class="cl">docker compose up
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can now start both the producer and the consumer:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mvn clean spring-boot:run -Popentelemetry -f camel-producer/pom.xml
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mvn clean spring-boot:run -Popentelemetry -f camel-consumer/pom.xml
</span></span></code></pre></td></tr></table>
</div>
</div><p>The gateway can also be turned on and instrumented in the same way.
You can run it as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mvn clean spring-boot:run -Popentelemetry -f gateway/pom.xml
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="how-is-made-the-glue-between-the-two-applications" class="headerLink">
    <a href="#how-is-made-the-glue-between-the-two-applications" class="header-mark"></a>2.3.4 How is made the glue between the two applications?</h4><p>The correlation is simply done using headers.
For instance, in the consumer application, when we consume the messages as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">from</span><span class="p">(</span><span class="s">&#34;activemq:queue:HELLO.WORLD?disableReplyTo=true&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">routeId</span><span class="p">(</span><span class="s">&#34;consume-message&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">routeDescription</span><span class="p">(</span><span class="s">&#34;Consumer example&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="n">LoggingLevel</span><span class="p">.</span><span class="na">INFO</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;New message with trace=${header.traceparent}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="s">&#34;----&gt; &#34;</span><span class="o">+</span><span class="n">bodyAs</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="na">class</span><span class="p">).</span><span class="na">toString</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">log</span><span class="p">(</span><span class="s">&#34;HEADERS ${in.headers}&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">end</span><span class="p">();</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>I logged on purpose the <code>traceparent</code> header.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> New message with trace=00-1a4f6943b7ace96d7efae4c4404009d8-cfbdb98266a772d7-01
</span></span></code></pre></td></tr></table>
</div>
</div><p>It allows to Jaeger to correlate our two transactions.</p>
<p>For your information, here are all the headers available while consuming the message</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="err">__AMQ_CID=ID:XXXX-0:1,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">accept=*/*,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">accept-encoding=gzip,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">deflate,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpCharacterEncoding=UTF-8,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpMethod=GET,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpPath=,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpUri=/camel/test,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">CamelHttpUrl=http:</span><span class="c1">//127.0.0.1:8080/camel/test, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="err">CamelMessageTimestamp=1693567851901,</span>
</span></span><span class="line"><span class="cl">  <span class="err">CamelServletContextPath=/test,</span>
</span></span><span class="line"><span class="cl">  <span class="err">content-length=0,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">forwarded=proto=http;host=</span><span class="nt">&#34;localhost:9080&#34;</span><span class="err">;for=</span><span class="s2">&#34;127.0.0.1:39352&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">host=127.0.0.1:8080,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSCorrelationID=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSCorrelationIDAsBytes=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSDeliveryMode=2,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSDestination=queue:</span><span class="c1">//HELLO.WORLD, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="err">JMSExpiration=0,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSMessageID=ID:XXXX-1:1:1:1:75,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSPriority=4,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSRedelivered=false,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSReplyTo=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSTimestamp=1693567851901,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSType=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSXGroupID=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">JMSXUserID=null,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">traceparent=00-dea6abbd4357819b7416236bab19e557-8840b18dd799cfac-01,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">user-agent=HTTPie/1.0.3,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-for=127.0.0.1,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-host=localhost:9080,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-port=9080,</span> 
</span></span><span class="line"><span class="cl">  <span class="err">x-forwarded-proto=http</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="dashboard" class="headerLink">
    <a href="#dashboard" class="header-mark"></a>2.4 Dashboard</h3><p>To get traces, I ran this dumb command to inject traces into Jaeger:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">while true ; http :9080/camel/test; end
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now, you can browse Jaeger (<a href="http://localhost:16686" target="_blank" rel="noopener noreferrer">http://localhost:16686</a>) and query it to find trace insights:</p>
<div id="id-5"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/jaeger-1.webp"
        srcset="/assets/images/2023/09/jaeger-1.webp, /assets/images/2023/09/jaeger-1.webp 1.5x, /assets/images/2023/09/jaeger-1.webp 2x"
        title="Jaeger front page" ><figcaption class="image-caption">Number of different apps</figcaption>
    </figure></div>
<p>If you dig into one transaction, you will see the whole transaction:</p>
<div id="id-6"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/jaeger-2.webp"
        srcset="/assets/images/2023/09/jaeger-2.webp, /assets/images/2023/09/jaeger-2.webp 1.5x, /assets/images/2023/09/jaeger-2.webp 2x"
        title="Jaeger transaction page" ><figcaption class="image-caption">One transaction</figcaption>
    </figure></div>
<p>And now, you can correlate two sub transactions:</p>
<div id="id-7"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/jaeger-3.webp"
        srcset="/assets/images/2023/09/jaeger-3.webp, /assets/images/2023/09/jaeger-3.webp 1.5x, /assets/images/2023/09/jaeger-3.webp 2x"
        title="Jaeger two sub transactions" ><figcaption class="image-caption">Two sub transactions</figcaption>
    </figure></div>
<h2 id="tempo--grafana" class="headerLink">
    <a href="#tempo--grafana" class="header-mark"></a>3 Tempo &amp; Grafana</h2><p>This solution is pretty similar to the previous one.
Instead of pushing all the data to Jaeger, we will use Tempo to store data and Grafana to render them.
We don&rsquo;t need to modify the configuration made in the existing Java applications.</p>
<h3 id="architecture-1" class="headerLink">
    <a href="#architecture-1" class="header-mark"></a>3.1 Architecture</h3><p>As mentioned above, the architecture is quite the same.
Now, we have the collector which broadcast data to Tempo.
We will then configure Grafana to query to it to get traces.</p>
<div id="id-8"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/architecture_grafana.svg"
        srcset="/assets/images/2023/09/architecture_grafana.svg, /assets/images/2023/09/architecture_grafana.svg 1.5x, /assets/images/2023/09/architecture_grafana.svg 2x"
        title="Architecture w/ Grafana &amp; Tempo" ></figure></div>
<h3 id="collector-configuration" class="headerLink">
    <a href="#collector-configuration" class="header-mark"></a>3.2 Collector configuration</h3><p>The modification of the Collector is easy (for this example).
We only have to specify the tempo URL.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">receivers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocols</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4317&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0.0.0:4318&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">scrape_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">job_name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">metrics_path</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;/actuator/prometheus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">scrape_interval</span><span class="p">:</span><span class="w"> </span><span class="l">5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">static_configs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">targets</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;host.docker.internal:8080&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">exporters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoint</span><span class="p">:</span><span class="w"> </span><span class="l">tempo:4317</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">insecure</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pipelines</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">traces</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">receivers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">exporters</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">otlp]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tempo-configuration" class="headerLink">
    <a href="#tempo-configuration" class="header-mark"></a>3.3 Tempo configuration</h3><p>I used here <a href="https://github.com/grafana/tempo" target="_blank" rel="noopener noreferrer">the standard configuration provided in the documentation</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">http_listen_port</span><span class="p">:</span><span class="w"> </span><span class="m">3200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">distributor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">receivers</span><span class="p">:</span><span class="w">                           </span><span class="c"># this configuration will listen on all ports and protocols that tempo is capable of.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jaeger</span><span class="p">:</span><span class="w">                            </span><span class="c"># the receives all come from the OpenTelemetry collector.  more configuration information can</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocols:                       # be found there</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">thrift_http</span><span class="p">:</span><span class="w">                   </span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">grpc</span><span class="p">:</span><span class="w">                          </span><span class="c"># for a production deployment you should only enable the receivers you need!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">thrift_binary</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">thrift_compact</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zipkin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">otlp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocols</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">grpc</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">opencensus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ingester</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">max_block_duration</span><span class="p">:</span><span class="w"> </span><span class="l">5m              </span><span class="w"> </span><span class="c"># cut the headblock when this much time passes. this is being set for demo purposes and should probably be left alone normally</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">compactor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">compaction</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">block_retention</span><span class="p">:</span><span class="w"> </span><span class="l">1h               </span><span class="w"> </span><span class="c"># overall Tempo trace retention. set for demo purposes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metrics_generator</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">registry</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external_labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">cluster</span><span class="p">:</span><span class="w"> </span><span class="l">docker-compose</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storage</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/tempo/generator/wal</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">remote_write</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://prometheus:9090/api/v1/write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">send_exemplars</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">storage</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">trace</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">backend</span><span class="p">:</span><span class="w"> </span><span class="l">local                    </span><span class="w"> </span><span class="c"># backend configuration to use</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">wal</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/tempo/wal            </span><span class="w"> </span><span class="c"># where to store the wal locally</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">local</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/tempo/blocks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">overrides</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics_generator_processors</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">service-graphs, span-metrics]</span><span class="w"> </span><span class="c"># enables metrics generator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">search_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="grafana-configuration" class="headerLink">
    <a href="#grafana-configuration" class="header-mark"></a>3.4 Grafana configuration</h3><p>Now we must configure Grafana to enable querying into our tempo instance.
The configuration is made here using a configuration file provided during the startup</p>
<p>The datasource file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">datasources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Prometheus backend where metrics are sent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://prometheus:9090</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">httpMethod</span><span class="p">:</span><span class="w"> </span><span class="l">GET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">tempo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://tempo:3200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jsonData</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">httpMethod</span><span class="p">:</span><span class="w"> </span><span class="l">GET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">datasourceUid</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;prometheus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="dashboard-1" class="headerLink">
    <a href="#dashboard-1" class="header-mark"></a>3.5 Dashboard</h3><p>As we have done before, we must start the infrastructure using Docker Compose:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd containers
</span></span><span class="line"><span class="cl">docker compose -f docker-compose-grafana.yml up
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, using the same rocket scientist maven commands, we can run the same commands and browse now Grafana (<code>http://localhost:3000</code>) to see our traces:</p>
<p><div id="id-9"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/grafana-1.webp"
        srcset="/assets/images/2023/09/grafana-1.webp, /assets/images/2023/09/grafana-1.webp 1.5x, /assets/images/2023/09/grafana-1.webp 2x"
        title="Grafana transactions" ><figcaption class="image-caption">Transactions</figcaption>
    </figure></div>
<div id="id-10"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/09/grafana-2.webp"
        srcset="/assets/images/2023/09/grafana-2.webp, /assets/images/2023/09/grafana-2.webp 1.5x, /assets/images/2023/09/grafana-2.webp 2x"
        title="Grafana transactions" ><figcaption class="image-caption">Deep dive into one transaction</figcaption>
    </figure></div></p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>4 Conclusion</h2><p>We saw how to highlight asynchronous transactions and correlate them through OpenTelemetry and Jaeger or using Tempo &amp; Grafana.
It was voluntarily simple.</p>
<p>If you want to dig into <a href="https://github.com/open-telemetry/opentelemetry-collector/" target="_blank" rel="noopener noreferrer">OpenTelemetry Collector</a> configuration, you can read <a href="https://signoz.io/blog/opentelemetry-collector-complete-guide/" target="_blank" rel="noopener noreferrer">this article from Antik ANAND</a> (Thanks to <a href="https://blog.frankel.ch/" target="_blank" rel="noopener noreferrer">Nicolas FRANKËL</a> for sharing it) and the <a href="https://github.com/open-telemetry/opentelemetry-collector/" target="_blank" rel="noopener noreferrer">official documentation</a>.
A noteworthy aspect of <a href="https://github.com/open-telemetry/" target="_blank" rel="noopener noreferrer">OpenTelemetry</a> lies in its evolution into an industry-standard over time.
For instance,<a href="https://www.elastic.co/observability/application-performance-monitoring" target="_blank" rel="noopener noreferrer">Elastic APM</a> <a href="https://www.elastic.co/guide/en/apm/guide/current/open-telemetry.html" target="_blank" rel="noopener noreferrer">is compatible with it</a>.</p>
<p>I then exposed how to enable this feature on Apache Camel applications.
It can be easily reproduced <a href="https://opentelemetry.io/docs/instrumentation/" target="_blank" rel="noopener noreferrer">with several stacks</a>.</p>
<p>Last but not least, which solution is the best?</p>
<p>I have not made any benchmark of Distributed Tracing solutions.
However, for a <em>real life</em> production setup, I would dive into Grafana and Tempo and check their features.
I am particularly interested in mixing logs, traces to orchestrate efficient alerting mechanisms.</p>
]]></description></item><item><title>Migrer son application Spring Boot vers la version 3</title><link>https://blog.touret.info/2022/12/22/migration_springboot3/</link><pubDate>Thu, 22 Dec 2022 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2022/12/22/migration_springboot3/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2022/12/spring.webp" referrerpolicy="no-referrer">
            </div><p>Pour ce dernier article de l&rsquo;année 2022, voici un rapide retour d&rsquo;expérience.</p>
<p>Je suis actuellement en cours de préparation d&rsquo;un workshop pour <a href="https://snowcamp.io/fr/" target="_blank" rel="noopener noreferrer">l&rsquo;édition 2023 de SnowcampIO</a>.
J&rsquo;aborderai dans <a href="https://sessionize.com/s/alexandre-touret/rest-apis-versioning-hands-on/60048" target="_blank" rel="noopener noreferrer">ce dernier le versioning des APIs REST</a>.
Pour illustrer ce sujet ô combien épineux, j&rsquo;ai réalisé une plateforme &ldquo;microservices&rdquo; en utilisant différents composants de la <a href="https://spring.io/" target="_blank" rel="noopener noreferrer">stack Spring</a>.</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Container</th>
          <th style="text-align: left">Tools</th>
          <th style="text-align: left">Comments</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">API Gateway</td>
          <td style="text-align: left">Spring Cloud Gateway 2022.0.0-RC2</td>
          <td style="text-align: left"></td>
      </tr>
      <tr>
          <td style="text-align: left">Bookstore API</td>
          <td style="text-align: left">JAVA 17,Spring Boot 3.0.X</td>
          <td style="text-align: left"></td>
      </tr>
      <tr>
          <td style="text-align: left">ISBN API</td>
          <td style="text-align: left">JAVA 17,Spring Boot 3.0.X</td>
          <td style="text-align: left"></td>
      </tr>
      <tr>
          <td style="text-align: left">Configuration Server</td>
          <td style="text-align: left">Spring Cloud Config 2022.0.0-RC2</td>
          <td style="text-align: left"></td>
      </tr>
      <tr>
          <td style="text-align: left">Database</td>
          <td style="text-align: left">PostgreSQL</td>
          <td style="text-align: left"></td>
      </tr>
      <tr>
          <td style="text-align: left">Authorization Server</td>
          <td style="text-align: left">JAVA 17,Spring Boot 3.0.X, Spring Authorization Server 1.0.0</td>
          <td style="text-align: left"></td>
      </tr>
  </tbody>
</table>
<p>En résumé, j&rsquo;utilise <a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">Spring Boot</a>, <a href="https://spring.io/cloud" target="_blank" rel="noopener noreferrer">Cloud</a>, <a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener noreferrer">Security</a>, <a href="https://spring.io/projects/spring-authorization-server" target="_blank" rel="noopener noreferrer">Authorization Server</a>, <a href="https://spring.io/projects/spring-cloud-circuitbreaker" target="_blank" rel="noopener noreferrer">Circuit Breaker</a>, <a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener noreferrer">Spring Data</a>,&hellip;</p>
<p>J&rsquo;ai démarré le développement avant <a href="https://spring.io/blog/2022/11/24/spring-boot-3-0-goes-ga" target="_blank" rel="noopener noreferrer">l&rsquo;annonce officielle de la version 3.0 de Spring Boot</a>.
Ce n&rsquo;était pas réellement obligatoire pour cet atelier, mais j&rsquo;ai souhaité quand même migrer cette application dans la dernière version de Spring Boot/Framework.</p>
<p>Je vais décrire dans cet article comment j&rsquo;ai réussi à migrer toute cette stack et les choix que j&rsquo;ai fait pour que ça fonctionne.</p>
<p>Bien évidemment, cette application n&rsquo;est pas une <em>&ldquo;vraie&rdquo;</em> application en production.
Par exemple, je n&rsquo;ai qu&rsquo;une seule entité JPA&hellip;
Cependant, je la trouve représentative et espère (très modestement) que mon retour d&rsquo;expérience pourra servir.</p>
<p><a href="https://github.com/alexandre-touret/rest-apis-versioning-workshop/pull/11/files" target="_blank" rel="noopener noreferrer">La Pull Request correspondante est disponible sur GitHub</a>.</p>
<h2 id="pré-requis" class="headerLink">
    <a href="#pr%c3%a9-requis" class="header-mark"></a>1 Pré-requis</h2><p>Une documentation existe.
Vous pouvez la consulter <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide" target="_blank" rel="noopener noreferrer">ici</a>.
Il existe aussi plusieurs articles sur le blog du projet Spring. Voici <a href="https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0" target="_blank" rel="noopener noreferrer">un exemple</a>.</p>
<h2 id="dépendances-et-configuration-des-plugins" class="headerLink">
    <a href="#d%c3%a9pendances-et-configuration-des-plugins" class="header-mark"></a>2 Dépendances et configuration des plugins</h2><h3 id="jdk" class="headerLink">
    <a href="#jdk" class="header-mark"></a>2.1 JDK</h3><p>Pour Spring Boot 3, il faut impérativement utiliser un <a href="https://openjdk.org/projects/jdk/17/" target="_blank" rel="noopener noreferrer">JDK &gt;=17</a>.</p>
<h3 id="mises-à-jour" class="headerLink">
    <a href="#mises-%c3%a0-jour" class="header-mark"></a>2.2 Mises à jour</h3><p>L&rsquo;une des premières actions à réaliser est de migrer votre application vers <a href="https://spring.io/blog/2022/06/23/spring-boot-2-7-1-available-now" target="_blank" rel="noopener noreferrer">la version 2.7</a>.</p>
<p>À l&rsquo;heure où j&rsquo;écris cet article, la version de Spring Cloud est encore en version RC.
J&rsquo;ai donc dû ajouter le repository <em>&ldquo;milestone&rdquo;</em> de Spring:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">repositories</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">maven</span> <span class="o">{</span> <span class="n">url</span> <span class="s1">&#39;https://repo.spring.io/milestone&#39;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">mavenCentral</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Ensuite, j&rsquo;ai utilisé les versions suivantes pour les différents composants spring:</p>
<ul>
<li>Spring Boot : 3.0.0</li>
<li>Spring Cloud : 2022.0.0-RC2</li>
<li>Spring Dependency Management : 1.1.0</li>
</ul>
<p>Dans mon application, j&rsquo;utilisais certains plugins Gradle pour la génération du code notamment <a href="https://openapi-generator.tech/docs/generators/spring/" target="_blank" rel="noopener noreferrer">OpenAPIGenerator</a>. Pour ce dernier, j&rsquo;ai ajouté un paramètre pour le rendre compatible avec spring boot 3:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"> <span class="n">useSpringBoot3</span>       <span class="o">:</span> <span class="s2">&#34;true&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Bref, il faut impérativement tous les mettre à jour et vérifier la compatibilité !</p>
<h2 id="ajout-de-nouvelles-dépendances" class="headerLink">
    <a href="#ajout-de-nouvelles-d%c3%a9pendances" class="header-mark"></a>3 Ajout de nouvelles dépendances</h2><p>Pour vérifier la pertinence de certaines propriétés dans la nouvelle version, Spring a mis à disposition ce plugin:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl">   <span class="n">runtimeOnly</span> <span class="s1">&#39;org.springframework.boot:spring-boot-properties-migrator&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Il permet de notifier à l&rsquo;exécution si un paramètre est déprécié ou totalement inutile.</p>
<h2 id="migration-namespace-javax-vers-jakartaee" class="headerLink">
    <a href="#migration-namespace-javax-vers-jakartaee" class="header-mark"></a>4 Migration namespace javax vers jakartaee</h2><p>Selon votre code, les dépendances que vous pouvez avoir, cette étape pourra aller du renommage des import javax vers jakarta à d&rsquo;innombrables maux de tête.</p>
<p>Si vous utilisez Spring Boot au-dessus d&rsquo;un Tomcat (c.-à-d. en mode <em>old school</em>), il  vous faudra mettre à jour le conteneur de servlet à une version compatible.</p>
<p>Dans mon application, je n&rsquo;ai eu qu&rsquo;à modifier les imports dans les entités,  filtres et méthodes annotées par l&rsquo;annotation <code>@PostConstruct()</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span><span class="w"> </span><span class="nn">jakarta.persistence.Column</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">jakarta.persistence.Entity</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">jakarta.persistence.GeneratedValue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">jakarta.persistence.GenerationType</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Sur ce sujet, Jetbrains a <a href="https://www.jetbrains.com/idea/guide/tutorials/migrating-javax-jakarta/" target="_blank" rel="noopener noreferrer">publié un tutoriel sur la migration vers Jakarta</a>.</p>
<h2 id="distributed-tracing-et-observabilité" class="headerLink">
    <a href="#distributed-tracing-et-observabilit%c3%a9" class="header-mark"></a>5 Distributed Tracing et observabilité</h2><p>Spring embarque désormais plusieurs fonctionnalités liées à l&rsquo;observabilité sous forme de starters.
Dans mon cas, <a href="https://blog.worldline.tech/2021/09/22/enabling_distributed_tracing_in_spring_apps.html" target="_blank" rel="noopener noreferrer">j&rsquo;avais embarqué opentracing (qui était déprécié depuis quelques temps) et me connectait sur Jaeger</a>.</p>
<p>J&rsquo;ai suivi <a href="https://spring.io/blog/2022/10/12/observability-with-spring-boot-3" target="_blank" rel="noopener noreferrer">cet article</a> paru sur le blog de Spring.
J&rsquo;ai par conséquent basculé sur <a href="https://zipkin.io/" target="_blank" rel="noopener noreferrer">Zipkin</a> (pour mon Workshop, l&rsquo;utilisation du distributed tracing est un peu la cerise sur le gâteau).</p>
<p>Voici les starters que j&rsquo;ai intégrés :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.micrometer:micrometer-tracing-bridge-brave&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.zipkin.reporter2:zipkin-reporter-brave&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.opentelemetry:opentelemetry-exporter-zipkin&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-aop&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>J&rsquo;ai par la suite intégré les propriétés suivantes dans la configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="nt">zipkin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">base-url</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:9411</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sender</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">management</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tracing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sampling</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">probability</span><span class="p">:</span><span class="w"> </span><span class="m">1.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">distribution</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">percentiles-histogram</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">requests</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Je pense que j&rsquo;aurai pu faire fonctionner <a href="https://www.jaegertracing.io/" target="_blank" rel="noopener noreferrer">Jaeger</a>.
Je n&rsquo;ai pas voulu perdre de temps (SnowcampIO arrive bientôt&hellip;).</p>
<h2 id="securité" class="headerLink">
    <a href="#securit%c3%a9" class="header-mark"></a>6 Securité</h2><p>J&rsquo;ai eu quelques soucis après avoir mis à jour Spring Authorization Server et Spring Security.
Je pense que la version précédente de Spring était plus permissive sur l&rsquo;injection et le nom des beans chargés dans les classes Configuration.</p>
<p>J&rsquo;ai donc revu <a href="https://github.com/alexandre-touret/rest-apis-versioning-solution/pull/3/files#diff-8e3d0d23edcf12597216d4469b5a3576c0b4d3d24a4cee740cb2ae67481fe006" target="_blank" rel="noopener noreferrer">la validation côté gateway et plus particulièrement la validation du jeton JWT</a>.</p>
<p>J&rsquo;ai dû notamment ajouter le paramètre <code>jwk-set-uri</code> qui est obligatoire maintenant :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resourceserver</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">jwt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">jwk-set-uri</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:8009</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Je n&rsquo;ai pas eu de <a href="https://github.com/spring-projects/spring-authorization-server/" target="_blank" rel="noopener noreferrer">réels problèmes coté Authorization Server car j&rsquo;avais déjà migré vers la version 0.4.0</a>.</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>7 Conclusion</h2><p>Vous l&rsquo;aurez compris, si vous faites l&rsquo;effort de suivre régulièrement les versions de Spring, vous devriez venir à bout facilement de la migration vers la dernière version de Spring.</p>
<p>Néanmoins, sur des projets conséquents (et je ne parle pas de ceux où il n&rsquo;y a de tests automatisés&hellip;) ça peut s&rsquo;avérer coûteux.
Certaines actions et contournements peuvent prendre du temps (ex. javax &ndash;&gt; jakarta).</p>
<p>Enfin, je vous conseille d&rsquo;attendre la première version mineure et la version définitive de Spring Cloud avant de vous lancer pour <em>&ldquo;de vrai&rdquo;</em>.
Bien que Spring ait fait un effort de documentation pour la migration, il est plus sage d&rsquo;attendre que les premiers correctifs soient publiés avant de vous lancer.</p>
]]></description></item><item><title>Ma première participation à Devoxx Belgium</title><link>https://blog.touret.info/2022/10/15/devoxx-be-22/</link><pubDate>Sat, 15 Oct 2022 08:00:00 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2022/10/15/devoxx-be-22/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2022/10/devoxx_badge.webp" referrerpolicy="no-referrer">
            </div><p>Après trois ans d&rsquo;inactivité pour des raisons que l&rsquo;on connait malheureusement toutes et tous, <a href="https://www.devoxx.be" target="_blank" rel="noopener noreferrer">Devoxx Belgium</a> était de retour à Anvers.
Je n&rsquo;avais jamais participé (en vrai) à une conférence internationale.</p>
<p>C&rsquo;était donc une première pour moi.</p>
<p>Pour y aller, j&rsquo;ai eu trois fois de la chance:</p>
<ol>
<li>J&rsquo;ai eu cette opportunité grâce à <a href="https://worldline.com/" target="_blank" rel="noopener noreferrer">Worldline - mon employeur</a></li>
<li>J&rsquo;ai réussi à avoir un billet pendant les cinq minutes où se sont vendus les billets lors du premier batch</li>
<li><a href="https://speakerdeck.com/alexandretouret/architecture-katas-improve-your-system-architecture-design-skills-in-a-fun-way" target="_blank" rel="noopener noreferrer">Ma présentation au format Quickie a été retenue</a>. J&rsquo;ai présenté un talk à Devoxx!!!!!!!</li>
</ol>
<div class="gallery-wrapper" style="grid-template-columns: repeat(2, 1fr)"><div class="img-wrapper"><figure><img
        
        loading="lazy"
        src="/assets/images/2022/10/devoxx-be-22-1.webp"
        srcset="/assets/images/2022/10/devoxx-be-22-1.webp, /assets/images/2022/10/devoxx-be-22-1.webp 1.5x, /assets/images/2022/10/devoxx-be-22-1.webp 2x"
        title="configuration" ></figure></div><div class="img-wrapper"><figure><img
        
        loading="lazy"
        src="/assets/images/2022/10/devoxx-be-22-2.webp"
        srcset="/assets/images/2022/10/devoxx-be-22-2.webp, /assets/images/2022/10/devoxx-be-22-2.webp 1.5x, /assets/images/2022/10/devoxx-be-22-2.webp 2x"
        title="configuration" ></figure></div></div>

<p>Voici mon retour d&rsquo;expérience des trois jours de conférence.</p>
<h2 id="impressions-générales" class="headerLink">
    <a href="#impressions-g%c3%a9n%c3%a9rales" class="header-mark"></a>1 Impressions générales</h2><p>Tout d&rsquo;abord, j&rsquo;ai pu assister à de nombreux <a href="https://www.devoxx.fr/" target="_blank" rel="noopener noreferrer">Devoxx France</a>. J&rsquo;ai cru naïvement que les deux évènements se ressembleraient.</p>
<p>Je me suis trompé.</p>
<p>Je ne dirai pas lequel est le meilleur<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Je ne saurais le dire. On est sur un autre type de conférence.</p>
<p>Il y a un peu moins de feedback de la communauté, même si il y a eu <a href="https://www.youtube.com/watch?v=LoF2vkYiICo" target="_blank" rel="noopener noreferrer">une présentation de Doctolib</a> et plus de présentations réalisées par des grands acteurs du marché ou par des grands speakers internationaux (ex. Simon Ritter, Simon Brown ou James Gosling).</p>
<p>Aussi, alors que la ligne éditoriale de Devoxx France s&rsquo;est tournée au fil des années sur d&rsquo;autres langages et plateformes telles que NodeJS, Go, Scala, ici on est dans du Java pur et dur.</p>
<p>Les (très) grands speakers de l&rsquo;écosystème sont présents et on fait des super talks: <a href="https://en.wikipedia.org/wiki/James_Gosling" target="_blank" rel="noopener noreferrer">James Gosling</a>, <a href="https://uk.linkedin.com/in/siritter" target="_blank" rel="noopener noreferrer">Simon Ritter</a>, <a href="https://developers.redhat.com/authors/mario-fusco" target="_blank" rel="noopener noreferrer">Mario Fusco</a>, <a href="https://in.relation.to/gavin-king/" target="_blank" rel="noopener noreferrer">Gavin King</a> ou <a href="https://blogs.oracle.com/java/post/new-java-champion-jos%C3%A9-paumard" target="_blank" rel="noopener noreferrer">José Paumard</a>.</p>
<p>En résumé, le coeur de la communauté <a href="https://en.wikipedia.org/wiki/Java_%28programming_language%29" target="_blank" rel="noopener noreferrer">Java</a> bat à Anvers pendant une semaine.
Une majorité de <a href="https://dev.java/community/jcs/" target="_blank" rel="noopener noreferrer">Java champions</a> sont +/- présents et nous font partager leur expertise.</p>
<h2 id="les-tendances" class="headerLink">
    <a href="#les-tendances" class="header-mark"></a>2 Les tendances</h2><p>Les grandes tendances étaient:</p>
<ul>
<li>L&rsquo;IA et les applications</li>
<li>Le projet Loom</li>
<li>GraalVM</li>
</ul>
<h2 id="quelques-conférences" class="headerLink">
    <a href="#quelques-conf%c3%a9rences" class="header-mark"></a>3 Quelques conférences</h2><p>L&rsquo;ensemble des conférences <a href="https://www.youtube.com/c/Devoxx2015/videos" target="_blank" rel="noopener noreferrer">est déjà publié sur Youtube</a>. N&rsquo; hésitez pas à les consulter. Il y a beaucoup de talks de qualité.</p>
<h3 id="artificial-intelligence-you-are-here-by-alan-d-thompson" class="headerLink">
    <a href="#artificial-intelligence-you-are-here-by-alan-d-thompson" class="header-mark"></a>3.1 Artificial Intelligence: You Are Here by Alan D Thompson</h3><p>Le <a href="https://lifearchitect.ai/" target="_blank" rel="noopener noreferrer">Dr Alan D. Thompson</a> est un expert en intelligence artificielle.
Il nous a donné une présentation pendant la keynote sur ce que l&rsquo; IA peut réellement faire de nos jours.
C&rsquo;est de plus en plus utilisé dans notre industrie au travers de Github Copilot, <a href="https://github.com/THUDM/CodeGeeX" target="_blank" rel="noopener noreferrer">Codegeex</a>,&hellip;</p>
<p>Après nous avoir rappellé <a href="https://lifearchitect.ai/timeline/" target="_blank" rel="noopener noreferrer">la timeline de l&rsquo;adoption de l&rsquo; IA</a>, il a illustré avec des peintures déssinées par une IA comment un ordinateur peut maintenant comprendre une phrase en langage naturel et la traduire en image.</p>
<p>Il a également présenté <a href="https://en.wikipedia.org/wiki/GPT-3" target="_blank" rel="noopener noreferrer">le langage de modélisation GPT3</a>.</p>
<p>Vous pouvez trouver <a href="https://www.youtube.com/watch?v=xjYy91BxdPo" target="_blank" rel="noopener noreferrer">la vidéo ici</a>.</p>
<h2 id="revolutionizing-java-based-applications-with-graalvm-by-alina-yurenko-and-thomas-wuerthinger" class="headerLink">
    <a href="#revolutionizing-java-based-applications-with-graalvm-by-alina-yurenko-and-thomas-wuerthinger" class="header-mark"></a>4 Revolutionizing Java-Based Applications with GraalVM by Alina Yurenko and Thomas Wuerthinger</h2><p>Dans cette présentation, les présentateurs d&rsquo;Oracle ont abordé une autre grande tendance du marché: le retour au natif qui permet de limiter l&rsquo;impact sur le démarrage, la mémoire et la taille des packages.</p>
<p>Au travers d&rsquo;un exemple basé sur <a href="https://micronaut.io/" target="_blank" rel="noopener noreferrer">Micronaut</a>, ils ont expliqué comment <a href="https://www.graalvm.org/" target="_blank" rel="noopener noreferrer">GraalVM</a> peut répondre à ces enjeux. Ils ont également démystifié plusieurs mythes liés à GraalVM. Par exemple, GraalVM supporte la réflexion (&hellip; et parfois non). On peut utiliser également [Java Flight Recorder](Java Flight Recorder) pendant la compilation. Le support à l&rsquo;exécution des applications est bientôt prévu.</p>
<p>La developer experience était également à l&rsquo;ordre du jour. Comment offrir une bonne expérience alors que la compilation prend plus de temps?</p>
<p>Pour répondre à cette épineuse question, ils ont conseillé de gardé le mode <a href="https://developers.redhat.com/articles/2021/06/23/how-jit-compiler-boosts-java-performance-openjdk" target="_blank" rel="noopener noreferrer">JIT</a> avec une JVM pendant le développement et d&rsquo;utiliser l&rsquo; <a href="https://devblogs.microsoft.com/java/aot-compilation-in-hotspot-introduction/" target="_blank" rel="noopener noreferrer">AOT</a> pour le déploiement final. Ceci permet de disposer d&rsquo;une machine puissante et de garantir la compatibilité matérielle et OS de la machine de production.</p>
<p><a href="https://www.youtube.com/watch?v=mhmqomex1zk" target="_blank" rel="noopener noreferrer">La vidéo est disponible ici</a></p>
<h2 id="the-lost-art-of-software-design-by-simon-brown" class="headerLink">
    <a href="#the-lost-art-of-software-design-by-simon-brown" class="header-mark"></a>5 The lost art of software design by Simon Brown</h2><p>J&rsquo;utilise <a href="https://www.c4model.com/" target="_blank" rel="noopener noreferrer">le modèle C4</a> depuis plusieurs années.
Je l&rsquo;ai même présenté très brièvement dans mon talk.</p>
<p>Aussi, j&rsquo;ai été très impressionné quand j&rsquo;ai pu assister à la présentation de <a href="https://simonbrown.je/" target="_blank" rel="noopener noreferrer">Simon Brown</a> sur la conception logicielle.
Il a expliqué pourquoi la conception n&rsquo;était pas conflictuelle avec les méthodes agiles.
Ca permet notamment d&rsquo; identtifier et de gérer les risques.</p>
<p>Au delà du modèle C4, <a href="https://riskstorming.com/" target="_blank" rel="noopener noreferrer">il a montré comment identifier et évaluer les différents risques avec le &ldquo;Risk Storming&rdquo;</a>.</p>
<p>Enfin, il a répondu à la question à un million d&rsquo;euros: &ldquo;Quand arrêter la conception?&rdquo;</p>
<p><a href="https://www.youtube.com/watch?v=36OTe7LNd6M" target="_blank" rel="noopener noreferrer">Vous trouverez la réponse ici</a>.</p>
<h3 id="ahead-of-time-and-native-in-spring-boot-30-by-stéphane-nicoll--brian-clozel" class="headerLink">
    <a href="#ahead-of-time-and-native-in-spring-boot-30-by-st%c3%a9phane-nicoll--brian-clozel" class="header-mark"></a>5.1 Ahead Of Time and Native in Spring Boot 3.0 by Stéphane Nicoll &amp; Brian Clozel</h3><p>Une autre conférence qui met en avant GraalVM!
Cette fois on abordait le support de l&rsquo; AOT et du mode natif dans la future version de Spring Boot.</p>
<p>Les présentateurs ont expliqués comment Spring supportait le mode natif: le processus appliqué, la gestion des métadonnées et l&rsquo;analyse réalisée.
En (très très bref) résumé, l&rsquo; AOT génère des sources dont le chargement des Bean Definition.</p>
<p>Ils ont également pointé du doigt des changements que je considère bloquants:</p>
<ul>
<li>On ne peut pas utiliser changer les profils au runtime</li>
<li>La surcharge des propriétés et variable d&rsquo;environnement n&rsquo;est pas possible à l&rsquo;exécution</li>
<li>On ne peut pas utiliser de Java Agent.</li>
</ul>
<p>Pour ce dernier point, cela risque de poser de nombreux soucis que ça soit l&rsquo;utilisation d&rsquo;un <a href="https://www.dynatrace.com/news/blog/what-is-apm-2/" target="_blank" rel="noopener noreferrer">APM tel que Dynatrace</a> ou le support de <a href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/aop.html" target="_blank" rel="noopener noreferrer">l&rsquo;AOP</a>.</p>
<p>A la fin de cette présentation, ils ont donné quelques recommendations. Parmi celles-ci:</p>
<ul>
<li>Exécuter en développement l&rsquo;application en mode AOT avec une JVM</li>
<li>Exécuter les tests en mode natif</li>
</ul>
<p><a href="https://www.youtube.com/watch?v=TS4DpYSmfXk" target="_blank" rel="noopener noreferrer">Vous trouverez la vidéo ici</a></p>
<h3 id="the-art-of-java-language-pattern-matching-by-simon-ritter" class="headerLink">
    <a href="#the-art-of-java-language-pattern-matching-by-simon-ritter" class="header-mark"></a>5.2 The Art of Java Language Pattern Matching by Simon Ritter</h3><p><a href="https://uk.linkedin.com/in/siritter" target="_blank" rel="noopener noreferrer">Simon Ritter</a> a exploré toutes les possibilité du <a href="https://docs.oracle.com/en/java/javase/15/language/pattern-matching-instanceof-operator.html" target="_blank" rel="noopener noreferrer">pattern matching en Java</a>.
Toutes les fonctionnalités ne sont pas encore disponibles. On peut néanmoins faire beaucoup de choses.</p>
<p>Après un rappel sur les nouvelles fonctionnalités depuis le JDK11 (<a href="https://docs.oracle.com/en/java/javase/15/language/sealed-classes-and-interfaces.html" target="_blank" rel="noopener noreferrer">Sealed classes</a>, <a href="https://docs.oracle.com/en/java/javase/15/language/records.html" target="_blank" rel="noopener noreferrer">Records</a>), Simon Ritter a illustré leur utilisation dans ce contexte.</p>
<p>Si vous voulez tout connaître sur cette fonctionnalité, je vous conseille fortement de regarder ce talk.</p>
<p><a href="https://www.youtube.com/watch?v=OlW724WaJJQ" target="_blank" rel="noopener noreferrer">Voici la vidéo</a></p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>6 Conclusion</h2><p>Voila les quelques talks qui m&rsquo;ont interpellé. Il y en a beaucoup d&rsquo;autres tels que ceux de <a href="https://devoxx.be/talk/?id=2352" target="_blank" rel="noopener noreferrer">Julien TOPCU</a> ou <a href="https://devoxx.be/talk/?id=19402" target="_blank" rel="noopener noreferrer">Marcy ERICKA CHARELLOIS</a>.
Cette première participation était très enrichissante. J&rsquo;ai eu à plusieurs reprises l&rsquo;impression d&rsquo;avoir l&rsquo;information à la source (ex. pour Spring).</p>
<p>Si j&rsquo;ai autant de chance, je pense rééditer l&rsquo;expérience l&rsquo;année prochaine.</p>
<p>En tant que speaker pour une conférence ou un workshop? Seul l&rsquo;avenir nous le dira!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.imdb.com/title/tt0250223/characters/nm0046347" target="_blank" rel="noopener noreferrer"><em>Vous savez, moi je ne crois pas qu&rsquo;il y aient de bonnes ou mauvaises conférences. Moi, si je devais résumer ma vie aujourd’hui avec vous, je dirais que c’est d’abord des rencontres, des gens qui m’ont tendu la main&hellip;</em></a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item><item><title>Observabilité et Circuit Breaker avec Spring</title><link>https://blog.touret.info/2021/07/26/observabilite-et-circuit-breaker-avec-spring/</link><pubDate>Mon, 26 Jul 2021 11:53:49 +0000</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2021/07/26/observabilite-et-circuit-breaker-avec-spring/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2021/07/rest-book-architecture.png" referrerpolicy="no-referrer">
            </div><p>Il y a quelques mois déjà, je discutais avec <a href="https://jefrajames.fr/" target="_blank" rel="noopener noreferrer">un collègue</a> d&rsquo; observabilité, <a href="https://github.com/opentracing-contrib/java-spring-cloud" target="_blank" rel="noopener noreferrer">opentracing</a>, … avec <a href="http://quarkus.io/" target="_blank" rel="noopener noreferrer">Quarkus</a>. On est tombé sur <a href="https://github.com/agoncal/agoncal-fascicle-quarkus-pract" target="_blank" rel="noopener noreferrer">un super exemple réalisé par Antonio Concalves</a>. Ce projet démontre les capacités de Quarkus sur les sujets suivants:</p>
<ul>
<li>Circuit Breaker</li>
<li>Observabilité</li>
<li>OpenTracing</li>
<li>Tests</li>
<li>…</li>
</ul>
<p>Et la on peut se demander quid de <a href="http://spring.io/" target="_blank" rel="noopener noreferrer">Spring</a>? Je me doutais que ces fonctionnalités étaient soient disponibles par défaut soient facilement intégrables vu la richesse de l&rsquo;écosystème.</p>
<p>J&rsquo;ai donc réalisé un clone de <a href="https://github.com/alexandre-touret/bookstore_spring" target="_blank" rel="noopener noreferrer">ce projet basé sur Spring Boot/Cloud</a>. Je ne vais pas détailler plus que ça les différentes fonctionnalités, vous pouvez vous référer au fichier <a href="https://github.com/alexandre-touret/bookstore_spring#readme" target="_blank" rel="noopener noreferrer">README</a>. Il est suffisamment détaillé pour que vous puissiez exécuter et les mettre en œuvre.</p>
<h2 id="architecture-de-lapplication" class="headerLink">
    <a href="#architecture-de-lapplication" class="header-mark"></a>1 Architecture de l&rsquo;application</h2><p>Vous trouverez ci-dessous un schéma d&rsquo;architecture de l&rsquo;application <a href="https://c4model.com/" target="_blank" rel="noopener noreferrer">au format C4</a>.</p>
<h2 id="circuit-breaker" class="headerLink">
    <a href="#circuit-breaker" class="header-mark"></a>2 Circuit Breaker</h2><p>Lors des appels entre le <a href="https://github.com/alexandre-touret/bookstore_spring/blob/main/rest-book/src/main/java/info/touret/bookstore/spring/book/service/BookService.java" target="_blank" rel="noopener noreferrer">bookstore</a> et le <a href="https://github.com/alexandre-touret/bookstore_spring/blob/main/rest-number/src/main/java/info/touret/bookstore/spring/number/controller/BookNumbersController.java" target="_blank" rel="noopener noreferrer">booknumberservice</a>, il peut être intéressant d&rsquo; implémenter un <a href="https://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener noreferrer">circuit breaker</a> pour pallier aux indisponibilités de ce dernier.<br>
Avec Spring, on peut utiliser <a href="https://github.com/resilience4j/resilience4j" target="_blank" rel="noopener noreferrer">Resilience4J</a> au travers de <a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">Spring Cloud</a>. Tout ceci se fait de manière programmatique</p>
<p>Il faut tout d&rsquo;abord <a href="https://github.com/alexandre-touret/bookstore_spring/blob/main/rest-book/src/main/java/info/touret/bookstore/spring/book/BookConfiguration.java" target="_blank" rel="noopener noreferrer">configurer les circuit breakers au travers d&rsquo;une classe Configuration</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">Customizer</span><span class="o">&lt;</span><span class="n">Resilience4JCircuitBreakerFactory</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">createDefaultCustomizer</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">factory</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">factory</span><span class="p">.</span><span class="na">configureDefault</span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Resilience4JConfigBuilder</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">timeLimiterConfig</span><span class="p">(</span><span class="n">TimeLimiterConfig</span><span class="p">.</span><span class="na">custom</span><span class="p">().</span><span class="na">timeoutDuration</span><span class="p">(</span><span class="n">Duration</span><span class="p">.</span><span class="na">ofSeconds</span><span class="p">(</span><span class="n">timeoutInSec</span><span class="p">)).</span><span class="na">build</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">circuitBreakerConfig</span><span class="p">(</span><span class="n">CircuitBreakerConfig</span><span class="p">.</span><span class="na">ofDefaults</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">build</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * Creates a circuit breaker customizer applying a timeout specified by the &lt;code&gt;booknumbers.api.timeout_sec&lt;/code&gt; property.
</span></span></span><span class="line"><span class="cl"><span class="cm">     * This customizer could be reached using this id: &lt;code&gt;slowNumbers&lt;/code&gt;
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return the circuit breaker customizer to apply when calling to numbers api
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nd">@Bean</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">Customizer</span><span class="o">&lt;</span><span class="n">Resilience4JCircuitBreakerFactory</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">createSlowNumbersAPICallCustomizer</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">factory</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">factory</span><span class="p">.</span><span class="na">configure</span><span class="p">(</span><span class="n">builder</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">builder</span><span class="p">.</span><span class="na">circuitBreakerConfig</span><span class="p">(</span><span class="n">CircuitBreakerConfig</span><span class="p">.</span><span class="na">ofDefaults</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">timeLimiterConfig</span><span class="p">(</span><span class="n">TimeLimiterConfig</span><span class="p">.</span><span class="na">custom</span><span class="p">().</span><span class="na">timeoutDuration</span><span class="p">(</span><span class="n">Duration</span><span class="p">.</span><span class="na">ofSeconds</span><span class="p">(</span><span class="n">timeoutInSec</span><span class="p">)).</span><span class="na">build</span><span class="p">()),</span><span class="w"> </span><span class="s">&#34;slowNumbers&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Grâce à ces instanciations, on référence les différents <a href="https://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener noreferrer">circuit breakers</a>.</p>
<p>Maintenant, on peut les utiliser dans le code de la manière suivante:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="n">Book</span><span class="w"> </span><span class="nf">registerBook</span><span class="p">(</span><span class="nd">@Valid</span><span class="w"> </span><span class="n">Book</span><span class="w"> </span><span class="n">book</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">circuitBreakerFactory</span><span class="p">.</span><span class="na">create</span><span class="p">(</span><span class="s">&#34;slowNumbers&#34;</span><span class="p">).</span><span class="na">run</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">()</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">persistBook</span><span class="p">(</span><span class="n">book</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">throwable</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">fallbackPersistBook</span><span class="p">(</span><span class="n">book</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">bookRepository</span><span class="p">.</span><span class="na">save</span><span class="p">(</span><span class="n">book</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Maintenant, il ne reste plus qu&rsquo;à créer <a href="https://github.com/alexandre-touret/bookstore_spring/blob/main/rest-book/src/main/java/info/touret/bookstore/spring/book/service/BookService.java" target="_blank" rel="noopener noreferrer">une méthode de « fallback » utilisée si un service est indisponible</a>. Cette dernière nous permettra, par exemple, de mettre le payload dans un fichier pour futur traitement batch.</p>
<h2 id="observabilité" class="headerLink">
    <a href="#observabilit%c3%a9" class="header-mark"></a>3 Observabilité</h2><p>L&rsquo;observabilité est sans contexte la pierre angulaire (oui, rien que ça…) de toute application cloud native. Sans ça, pas de scalabilité, de redémarrage automatique,etc.<br>
Les architectures de ce type d&rsquo;applications sont <a href="https://en.wikipedia.org/wiki/Idempotence" target="_blank" rel="noopener noreferrer">idempotentes</a>. On a donc besoin d&rsquo;avoir toutes les informations à notre disposition. Heureusement, <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#actuator" target="_blank" rel="noopener noreferrer">Spring fournit par le biais d&rsquo; Actuator</a> toutes les informations nécessaires. Ces dernières pourront soit être utilisées par <a href="https://kubernetes.io/" target="_blank" rel="noopener noreferrer">Kubernetes</a> (ex. le <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/" target="_blank" rel="noopener noreferrer">livenessProbe</a>) ou agrégées dans une base de données <a href="https://prometheus.io/docs/prometheus/latest/storage/" target="_blank" rel="noopener noreferrer">Prometheus</a>.</p>
<p>Pour activer certaines métriques d&rsquo;<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html" target="_blank" rel="noopener noreferrer">actuator</a>, il suffit de :</p>
<p>Ajouter la/les dépendance(s)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">[...]</span>
</span></span><span class="line"><span class="cl">        <span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">implementation</span> <span class="s1">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span>
</span></span><span class="line"><span class="cl">     <span class="o">[...]</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Spécifier la configuration adéquate:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nl">management</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">endpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">enabled</span><span class="o">-</span><span class="n">by</span><span class="o">-</span><span class="k">default</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">exposure</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">include</span><span class="p">:</span><span class="w"> </span><span class="sc">&#39;*&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">jmx</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">exposure</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">include</span><span class="p">:</span><span class="w"> </span><span class="sc">&#39;*&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">endpoint</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">health</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">show</span><span class="o">-</span><span class="n">details</span><span class="p">:</span><span class="w"> </span><span class="n">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">probes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">shutdown</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">health</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">livenessstate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">readinessstate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">datasource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="n">autotime</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="opentracing" class="headerLink">
    <a href="#opentracing" class="header-mark"></a>4 OpenTracing</h2><p>Sur les applications distribuées, il peut s&rsquo;avérer compliqué de concentrer les logs et de les corréler. Certes, avec un ID de corrélation, on peut avoir certaines informations. Cependant, il faut que les logs soient bien positionnées dans le code. On peut également passer à travers de certaines informations (ex. connexion aux bases de données, temps d&rsquo;exécution des APIS,…). Je ne vous parle pas des soucis de volumétrie engendrées par des index Elasticsearch/Splunk sur des applications à forte volumétrie.</p>
<p>Depuis quelques temps, le <a href="https://www.cncf.io/" target="_blank" rel="noopener noreferrer">CNCF</a> propose un projet (encore en incubation) : <a href="https://opentracing.io/" target="_blank" rel="noopener noreferrer">OpenTracing</a>. Ce dernier fait désormais partie d&rsquo;<a href="https://opentelemetry.io/" target="_blank" rel="noopener noreferrer">OpenTelemetry</a>.<br>
Grâce à cet librairie, nous allons pouvoir tracer toutes les transactions de notre application microservices et pouvoir réaliser une corrélation « out of the box » grâce à l&rsquo;intégration avec <a href="https://www.jaegertracing.io/" target="_blank" rel="noopener noreferrer">Jaeger</a>.</p>
<p>Pour activer la fonctionnalité il suffit d&rsquo;ajouter la dépendance au classpath:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">implementation</span> <span class="s1">&#39;io.opentracing.contrib:opentracing-spring-jaeger-cloud-starter:3.3.1&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>et de configurer l&rsquo;URL de Jaeger dans l&rsquo;application</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># Default values</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">opentracing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">jaeger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">udp-sender</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">localhost</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">6831</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Une fois l&rsquo;application reconstruite et redémarrée, vous pourrez visualiser les transactions dans JAEGER:</p>
<p><figure><img
        
        loading="lazy"
        src="/assets/images/2021/07/screenshot-2021-07-26-at-11-38-31-jaeger-ui.png"
        srcset="/assets/images/2021/07/screenshot-2021-07-26-at-11-38-31-jaeger-ui.png, /assets/images/2021/07/screenshot-2021-07-26-at-11-38-31-jaeger-ui.png 1.5x, /assets/images/2021/07/screenshot-2021-07-26-at-11-38-31-jaeger-ui.png 2x"
        title="jaeger1" ></figure>
<figure><img
        
        loading="lazy"
        src="/assets/images/2021/07/screenshot-2021-07-26-at-11-38-15-jaeger-ui.png"
        srcset="/assets/images/2021/07/screenshot-2021-07-26-at-11-38-15-jaeger-ui.png, /assets/images/2021/07/screenshot-2021-07-26-at-11-38-15-jaeger-ui.png 1.5x, /assets/images/2021/07/screenshot-2021-07-26-at-11-38-15-jaeger-ui.png 2x"
        title="jaeger2" ></figure></p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>5 Conclusion</h2><p>Je ne vais pas exposer l&rsquo;implémentation des tests unitaires et d&rsquo;intégration. Si vous voulez voir comment j&rsquo;ai réussi à mocker simplement les appels REST à une API distante, vous pouvez regarder <a href="https://github.com/alexandre-touret/bookstore_spring/blob/main/rest-book/src/test/java/info/touret/bookstore/spring/book/controller/BookControllerIT.java" target="_blank" rel="noopener noreferrer">cette classe</a> pour voir une utilisation du <a href="https://www.baeldung.com/mockserver" target="_blank" rel="noopener noreferrer">MockServer</a>.<br>
Aussi, n&rsquo;hésitez pas à cloner, tester ce projet et me donner votre retour. J&rsquo;essaierai de le mettre à jour au fur et à mesure de mes découvertes (par ex. OpenTelemetry).</p>
]]></description></item><item><title>Passer votre application Java8 en Java11</title><link>https://blog.touret.info/2020/02/03/passer-votre-application-java8-en-java11/</link><pubDate>Mon, 03 Feb 2020 15:44:27 +0100</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2020/02/03/passer-votre-application-java8-en-java11/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2020/02/blake-wisz-eevhwmstyg8-unsplash-1.webp" referrerpolicy="no-referrer">
            </div><p>Java 8 est encore largement utilisé dans les entreprises aujourd&rsquo;hui. Il y a même certains frameworks qui n&rsquo;ont pas encore sauté le pas.<br>
Je vais essayer d&rsquo;exposer dans cette article les étapes à réaliser pour migrer (simplement) votre application JAVA8 en JAVA 11.</p>
<p>Dans cet article, je prendrai comme postulat que l&rsquo;application se construit avec Maven.</p>
<h2 id="pré-requis" class="headerLink">
    <a href="#pr%c3%a9-requis" class="header-mark"></a>1 Pré-requis</h2><p>Tout d&rsquo;abord vérifiez votre environnement d&rsquo;exécution cible! Faites un tour du coté de la documentation et regardez le support de JAVA.</p>
<p>Si vous utilisez des FRAMEWORKS qui utilisent des FAT JARS, faites de même (ex. pour spring boot, utilisez au moins la version 2.1.X).</p>
<p>Ensuite, vous aurez sans doute à mettre à jour maven ou gradle. Préférez les dernières versions.</p>
<h2 id="configuration-maven" class="headerLink">
    <a href="#configuration-maven" class="header-mark"></a>2 Configuration maven</h2><p>Les trois plugins à mettre à jour obligatoirement sont :</p>
<ul>
<li><a href="https://maven.apache.org/plugins/maven-compiler-plugin/" target="_blank" rel="noopener noreferrer">maven-compiler-plugin</a></li>
<li><a href="https://maven.apache.org/surefire/maven-surefire-plugin/" target="_blank" rel="noopener noreferrer">maven-surefire-plugin</a></li>
<li><a href="https://maven.apache.org/surefire/maven-failsafe-plugin/" target="_blank" rel="noopener noreferrer">maven-failsafe-plugin</a></li>
</ul>
<h3 id="maven-compiler-plugin" class="headerLink">
    <a href="#maven-compiler-plugin" class="header-mark"></a>2.1 Maven compiler plugin</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;release&gt;</span>11<span class="nt">&lt;/release&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;encoding&gt;</span>UTF-8<span class="nt">&lt;/encoding&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="maven-surefire--failsafe-plugin" class="headerLink">
    <a href="#maven-surefire--failsafe-plugin" class="header-mark"></a>3 maven surefire / failsafe plugin</h2><p>Pour ces deux plugins, ajouter la configuration suivante:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>maven-surefire-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>2.22.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        [...]
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;argLine&gt;</span>--illegal-access=permit<span class="nt">&lt;/argLine&gt;</span>
</span></span><span class="line"><span class="cl">          [...]
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="mise-à-jour-des-librairies" class="headerLink">
    <a href="#mise-%c3%a0-jour-des-librairies" class="header-mark"></a>4 Mise à jour des librairies</h2><p>Bon,la il n&rsquo;y a pas de magie. Vous devez mettre à jour toutes vos librairies. Mis à part si vous utilisez des librairies exotiques, la plupart supportent JAVA 11 maintenant.</p>
<p>C&rsquo;est une bonne opportunité de faire le ménage dans vos fichiers <code>pom.xml</code> 🙂</p>
<h2 id="apis-supprimées-du-jdk" class="headerLink">
    <a href="#apis-supprim%c3%a9es-du-jdk" class="header-mark"></a>5 APIS supprimées du JDK</h2><p>Si vous faites du XML, SOAP ou que vous utilisiez l&rsquo;API activation, vous devez désormais embarquer ces librairies. Le JDK ne les inclut plus par défaut.</p>
<p>Par exemple:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>com.sun.xml.bind<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>jaxb-core<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.3.0.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>com.sun.xml.bind<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>jaxb-impl<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.3.0.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>javax.xml.bind<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>jaxb-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="modularisation-avec-jigsaw" class="headerLink">
    <a href="#modularisation-avec-jigsaw" class="header-mark"></a>6 Modularisation avec JIGSAW</h2><p>Bon là … je vous déconseille de partir directement sur la modularisation, surtout si vous migrez une application existante. Bien que la modularité puisse aider à réduire vos images docker en construisant vos propres JRE et d&rsquo;améliorer la sécurité, elle apporte son lot de complexité.<br>
Bref pour la majorité des applications, je vous déconseille de l&rsquo;intégrer.</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>7 Conclusion</h2><p>Avec toutes ces manipulations, vous devriez pouvoir porter vos applications sur JAVA11. Il y aura sans doute quelques bugs. Personnellement, j&rsquo;en ai eu avec CGLIB vs Spring AOP sur une classe instrumentée avec un constructeur privé. Sur ce coup j&rsquo;ai contourné ce problème ( je vous laisse deviner comment 🙂 ).</p>
]]></description></item><item><title>Premiers pas avec Gradle</title><link>https://blog.touret.info/2019/12/30/premiers-pas-avec-gradle/</link><pubDate>Mon, 30 Dec 2019 15:03:36 +0100</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2019/12/30/premiers-pas-avec-gradle/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2019/12/gradle_logo.png" referrerpolicy="no-referrer">
            </div><p>Depuis quelques temps je me mets à <a href="https://gradle.org/" target="_blank" rel="noopener noreferrer">Gradle</a>. Après de (trop?) nombreuses années à utiliser Maven (depuis la version 0.9…), je me risque à modifier mon environnement de build. Du moins sur des projets démo.</p>
<p>Quand on a fait pas mal de Maven, on est un peu dérouté au début. On a d&rsquo;un coté, la plupart des actions qui sont configurées de manière implicite et de l&rsquo;autre on peut tout coder/étendre ou presque.</p>
<p>Je ne vais pas me risquer à faire un comparatif des deux outils. Gradle ( donc fortement orienté ) en <a href="https://gradle.org/maven-vs-gradle/" target="_blank" rel="noopener noreferrer">a fait un.</a></p>
<p>Je vais plutôt décrire avec cet article comment on peut démarrer rapidement en configurant son environnement pour être utilisé en entreprise.</p>
<h2 id="installation" class="headerLink">
    <a href="#installation" class="header-mark"></a>1 Installation</h2><p>Le plus simple est d&rsquo;utiliser <a href="https://sdkman.io" target="_blank" rel="noopener noreferrer">SDKMAN</a>.</p>
<p>Voici la manipulation pour l&rsquo;installer:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">$</span><span class="w"> </span><span class="n">curl</span><span class="w"> </span><span class="o">-</span><span class="n">s</span><span class="w"> </span><span class="s">&#34;https://get.sdkman.io&#34;</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">bash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">$</span><span class="w"> </span><span class="n">source</span><span class="w"> </span><span class="s">&#34;$HOME/.sdkman/bin/sdkman-init.sh&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">$</span><span class="w"> </span><span class="n">sdk</span><span class="w"> </span><span class="n">install</span><span class="w"> </span><span class="n">gradle</span><span class="w"> </span><span class="n">6</span><span class="p">.</span><span class="na">0</span><span class="p">.</span><span class="na">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="configuration-dun-proxy" class="headerLink">
    <a href="#configuration-dun-proxy" class="header-mark"></a>2 Configuration d&rsquo;un proxy</h2><p>Et oui comment souvent, passer le proxy d&rsquo;entreprise est la moitié du boulot :).<br>
Pour le configurer de manière globale (c.-à-d. pour tous vos projets) sur votre poste de travail, vous devez créer un fichier <code>gradle.properties</code> dans le répertoire <code>$HOME/.gradle</code> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">systemProp</span><span class="p">.</span><span class="na">http</span><span class="p">.</span><span class="na">proxyHost</span><span class="o">=</span><span class="n">proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">systemProp</span><span class="p">.</span><span class="na">http</span><span class="p">.</span><span class="na">proxyPort</span><span class="o">=</span><span class="n">8888</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">systemProp</span><span class="p">.</span><span class="na">http</span><span class="p">.</span><span class="na">nonProxyHosts</span><span class="o">=</span><span class="n">localhost</span><span class="o">|</span><span class="n">127</span><span class="p">.</span><span class="na">0</span><span class="p">.</span><span class="na">0</span><span class="p">.</span><span class="na">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">systemProp</span><span class="p">.</span><span class="na">https</span><span class="p">.</span><span class="na">proxyHost</span><span class="o">=</span><span class="n">proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">systemProp</span><span class="p">.</span><span class="na">https</span><span class="p">.</span><span class="na">proxyPort</span><span class="o">=</span><span class="n">8888</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">systemProp</span><span class="p">.</span><span class="na">https</span><span class="p">.</span><span class="na">nonProxyHosts</span><span class="o">=</span><span class="n">localhost</span><span class="o">|</span><span class="n">127</span><span class="p">.</span><span class="na">0</span><span class="p">.</span><span class="na">0</span><span class="p">.</span><span class="na">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="configuration-dun-miroir-nexus-ou-artifactory" class="headerLink">
    <a href="#configuration-dun-miroir-nexus-ou-artifactory" class="header-mark"></a>3 Configuration d&rsquo;un miroir Nexus ou Artifactory</h2><p>A l&rsquo;instar du proxy, on va essayer de mettre en place une configuration globale. Pour ce faire, on va utiliser <a href="https://docs.gradle.org/current/userguide/init_scripts.html" target="_blank" rel="noopener noreferrer">les init scripts</a>. Cette fonctionnalité est très intéressante. Elle permet de centraliser des actions et configurations.<br>
Pour créer un script, il faut tout d&rsquo;abord créer un fichier <code>.gradle</code> dans le répertoire <code>$HOME/.gradle/init.d</code>.</p>
<p>Voici un exemple pour <a href="https://fr.sonatype.com/nexus-repository-sonatype" target="_blank" rel="noopener noreferrer">Nexus</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">allprojects</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">buildscript</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">repositories</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">mavenLocal</span><span class="p">()</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">maven</span><span class="w"> </span><span class="p">{</span><span class="n">url</span><span class="w"> </span><span class="s">&#34;https://url-nexus&#34;</span><span class="p">}</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">repositories</span><span class="w"> </span><span class="p">{</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">mavenLocal</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">maven</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">url</span><span class="w"> </span><span class="s">&#34;https://url-nexus&#34;</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="configuration-du-déploiement-dans-nexus--artifactory" class="headerLink">
    <a href="#configuration-du-d%c3%a9ploiement-dans-nexus--artifactory" class="header-mark"></a>4 Configuration du déploiement dans Nexus / Artifactory</h2><p>Le déploiement dans Nexus est possible via <a href="https://docs.gradle.org/current/userguide/publishing_maven.html" target="_blank" rel="noopener noreferrer">le plugin maven publish</a>. La configuration fournie dans la documentation est tellement bien faite ( comme le reste d&rsquo;ailleurs ) que je ne vais que mettre un lien vers celle-là:<br>
Voici <a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:complete_example" target="_blank" rel="noopener noreferrer">le lien</a>.</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>5 Conclusion</h2><p>Après ces quelques actions vous pourrez démarrer des builds avec gradle tout en étant compatible avec un environnement « Maven ».<br>
Enjoy 🙂</p>
]]></description></item><item><title>Programmmation par aspect avec Spring AOP</title><link>https://blog.touret.info/2019/11/05/programmmation-par-aspect-avec-spring-aop/</link><pubDate>Tue, 05 Nov 2019 18:12:54 +0100</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2019/11/05/programmmation-par-aspect-avec-spring-aop/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2019/11/stanley-dai-73ozynjvoni-unsplash.jpg" referrerpolicy="no-referrer">
            </div><p>Une fois n&rsquo;est pas coutume, voici un article qui reprend des basiques de la programmation. J&rsquo;aborde une stack JAVA, mais c&rsquo;est applicable à d&rsquo;autres langages.</p>
<p>Il existe une fonctionnalité très intéressante dans Spring (et dans J(akarta)EE) que l&rsquo;on oublie assez souvent : l&rsquo;<a href="https://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_aspect" target="_blank" rel="noopener noreferrer">AOP</a> ou encore la programmation par aspect. Cette manière de programmer permet notamment de séparer le code fonctionnel et technique.<br>
Si vous faites du JAVA, vous utilisez déjà l&rsquo;<a href="https://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_aspect" target="_blank" rel="noopener noreferrer">AOP</a>. En effet, quand vous faites une insertion en base via JPA dans un EJB ou un bean annoté <code>@Transactional</code>, une transaction est initiée au début de la méthode et fermée à la fin.</p>
<p>Avec <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html" target="_blank" rel="noopener noreferrer">Spring</a> et notamment dans <a href="https://github.com/spring-projects/spring-boot/" target="_blank" rel="noopener noreferrer">Spring boot</a>, voici comment initier l&rsquo;<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop-api-advice" target="_blank" rel="noopener noreferrer">AOP</a>.</p>
<h2 id="configuration-maven" class="headerLink">
    <a href="#configuration-maven" class="header-mark"></a>1 Configuration maven</h2><p>Ajouter le starter AOP:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-aop<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="activation-des-aspects" class="headerLink">
    <a href="#activation-des-aspects" class="header-mark"></a>2 Activation des aspects</h2><p>Dans la configuration ci-dessous, je prendrai comme exemple le logging des méthodes ( un log en début de méthode et un log en fin ). </p>
<p>La définition des aspects se fait dans des classes annotées par <code>@Configuration</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@Aspect</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@ConditionalOnProperty</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;debug.enabled&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">havingValue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;true&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">DebuggingConfiguration</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Logger</span><span class="w"> </span><span class="n">LOGGER</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LoggerFactory</span><span class="p">.</span><span class="na">getLogger</span><span class="p">(</span><span class="n">DebuggingConfiguration</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">WITHIN_MY_PACKAGE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;within(my.package..*)&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">* Log before execution
</span></span></span><span class="line"><span class="cl"><span class="cm">*
</span></span></span><span class="line"><span class="cl"><span class="cm">* @param joinPoint the current method
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@Before</span><span class="p">(</span><span class="n">WITHIN_MY_PACKAGE</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">logBeforeExecution</span><span class="p">(</span><span class="n">JoinPoint</span><span class="w"> </span><span class="n">joinPoint</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">LOGGER</span><span class="p">.</span><span class="na">isTraceEnabled</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">LOGGER</span><span class="p">.</span><span class="na">trace</span><span class="p">(</span><span class="s">&#34;Beginning of method : [{}]&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">joinPoint</span><span class="p">.</span><span class="na">getSignature</span><span class="p">().</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">* Log after execution
</span></span></span><span class="line"><span class="cl"><span class="cm">*
</span></span></span><span class="line"><span class="cl"><span class="cm">* @param joinPoint the current method
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nd">@After</span><span class="p">(</span><span class="n">WITHIN_MY_PACKAGE</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">logAfterExecution</span><span class="p">(</span><span class="n">JoinPoint</span><span class="w"> </span><span class="n">joinPoint</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">LOGGER</span><span class="p">.</span><span class="na">isTraceEnabled</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">LOGGER</span><span class="p">.</span><span class="na">trace</span><span class="p">(</span><span class="s">&#34;End of method : [{}]&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">joinPoint</span><span class="p">.</span><span class="na">getSignature</span><span class="p">().</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>L&rsquo;utilisation de l&rsquo; annotation <code>@ConditionalOnProperty</code> me permet d&rsquo;activer cette classe de configuration seulement si la propriété <code>debug.enabled</code> est initialisée à <code>true</code>.</p>
<p>Les annotations <code>@Before</code> et <code>@After</code> indiquent à Spring AOP quand exécuter ces méthodes ou sur quelles méthodes. Dans mon cas, quand les méthodes appelées sont définies dans les classes d&rsquo;un package défini.</p>
<p>Pour plus de détails sur la syntaxe et les possibilités, vous pouvez vous référer <a href="https://docs.spring.io/spring/docs/2.0.x/reference/aop.html" target="_blank" rel="noopener noreferrer">à la documentation</a>.</p>
]]></description></item></channel></rss>