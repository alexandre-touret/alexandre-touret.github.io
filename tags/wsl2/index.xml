<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>WSL2 - Tag - Alexandre Touret's Blog</title><link>https://blog.touret.info/tags/wsl2/</link><description>WSL2 - Tag - Alexandre Touret's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright><lastBuildDate>Thu, 09 Nov 2023 08:00:16 +0100</lastBuildDate><atom:link href="https://blog.touret.info/tags/wsl2/" rel="self" type="application/rss+xml"/><item><title>Configuring WSL2 for Seamless Compatibility with Rancher Desktop</title><link>https://blog.touret.info/2023/11/09/rancher_desktop_wsl2/</link><pubDate>Thu, 09 Nov 2023 08:00:16 +0100</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2023/11/09/rancher_desktop_wsl2/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2023/11/carlo-borella-ozDrGigNQXY-unsplash.webp" referrerpolicy="no-referrer">
            </div><p>Just out of curiosity, I <a href="https://docs.rancherdesktop.io/getting-started/installation#installing-rancher-desktop-on-windows" target="_blank" rel="noopener noreferrer">downloaded and sat up Rancher Desktop on my laptop</a>.</p>
<p>I daily use <a href="https://docs.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a> and <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener noreferrer">Docker compose</a> on top of <a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noopener noreferrer">WSL2</a> using <em>home made mechanism/tooling</em>
I would then see if Rancher Desktop fits well in this case and could help me.</p>
<p>In this (very short) article, we&rsquo;ll go over the necessary steps to configure <a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noopener noreferrer">WSL2</a> Ubuntu virtual machines and Docker with Rancher Desktop.</p>
<p>If you want to get into Rancher Desktop in another way and discover how to install <a href="https://skaffold.dev/" target="_blank" rel="noopener noreferrer">Skaffold</a>, you <a href="https://malkav30.gitlab.io/posts/first-rancherdesktop-application-skaffold/" target="_blank" rel="noopener noreferrer">can read this article</a>.</p>
<h2 id="install--configure-rancher-desktop" class="headerLink">
    <a href="#install--configure-rancher-desktop" class="header-mark"></a>1 Install &amp; configure Rancher Desktop</h2><div id="id-1"><figure><img
        
        loading="lazy"
        src="/assets/images/2023/11/rancher-desktop-logo.svg"
        srcset="/assets/images/2023/11/rancher-desktop-logo.svg, /assets/images/2023/11/rancher-desktop-logo.svg 1.5x, /assets/images/2023/11/rancher-desktop-logo.svg 2x"
        sizes="auto"
        alt="rancher desktop logo"
        title="rancher desktop logo" ></figure></div>
<p>The setup is quite straightforward.
Follow <a href="https://docs.rancherdesktop.io/getting-started/installation#installing-rancher-desktop-on-windows" target="_blank" rel="noopener noreferrer">the instructions provided in the official documentation</a> to get Rancher Desktop up and running on your Windows machine.
Rancher Desktop allows you to run Docker and Docker Compose seamlessly within a WSL2 environment.</p>
<p>During the setup process, I chose to install <a href="https://github.com/moby/moby" target="_blank" rel="noopener noreferrer">Moby</a> to use <a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a> and <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener noreferrer">Docker Compose</a>.</p>
<p>After installing Rancher Desktop, you will need to ensure your virtual machine (VM) is connected to expose the Docker daemon and related commands.
You can find detailed steps in the Rancher Desktop documentation under <a href="https://docs.rancherdesktop.io/ui/preferences/wsl/" target="_blank" rel="noopener noreferrer">WSL Preferences</a>.
Don&rsquo;t forget that in some cases, you may need to restart both WSL2 and Rancher Desktop for the changes to take effect.</p>
<h2 id="configure-docker-credential-store" class="headerLink">
    <a href="#configure-docker-credential-store" class="header-mark"></a>2 Configure Docker Credential Store</h2><p>When you start your Docker compose infrastructure and encounter an error like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Error saving credentials: error storing credentials - err: exit status 1,
</span></span></code></pre></td></tr></table>
</div>
</div><p>You&rsquo;ll need to configure Docker&rsquo;s credential store.
To resolve this issue, follow these steps:</p>
<ol>
<li>Inside your WSL2 VM, create or edit the <code>~/.docker/config.json</code> file.</li>
<li>Add the following content to the <code>config.json</code> file:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>                            
</span></span><span class="line"><span class="cl"><span class="nt">&#34;credsStore&#34;</span><span class="p">:</span> <span class="s2">&#34;wincred.exe&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>   
</span></span></code></pre></td></tr></table>
</div>
</div><p>This configuration points to the <code>docker-credential-wincred.exe</code> binary and will resolve the credential storage problem when using Docker.</p>
<h2 id="get-containers-output-in-the-console" class="headerLink">
    <a href="#get-containers-output-in-the-console" class="header-mark"></a>3 Get container&rsquo;s output in the console</h2><p>A common issue with Docker containers in Rancher Desktop is the lack of output in the console when running a container, such as with the command <code>docker run hello-world</code>.
This issue is well-documented in <a href="https://github.com/rancher-sandbox/rancher-desktop/issues/1558" target="_blank" rel="noopener noreferrer">this GitHub issue</a>.</p>
<p>To view the container&rsquo;s output in the console, you need to start your commands with the <code>-i</code> option. For example:</p>
<p>For instance:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker run -i hello-world
</span></span></code></pre></td></tr></table>
</div>
</div><p>This option tells Docker to attach to the container&rsquo;s standard input, allowing you to see the output directly in your console.</p>
<h2 id="conclusion" class="headerLink">
    <a href="#conclusion" class="header-mark"></a>4 Conclusion</h2><p>I hope this article has been helpful for you, and you&rsquo;re now ready to <em>supercharge</em> your development workflow with Rancher Desktop and Docker!</p>
]]></description></item><item><title>Utiliser GPG dans WSL2</title><link>https://blog.touret.info/2021/05/03/utiliser-gpg-dans-wsl2/</link><pubDate>Mon, 03 May 2021 20:47:11 +0200</pubDate><author><name>Alexandre Touret</name></author><guid>https://blog.touret.info/2021/05/03/utiliser-gpg-dans-wsl2/</guid><description><![CDATA[<div class="featured-image">
                <img src="/assets/images/2021/05/pexels-photo-261621.jpeg" referrerpolicy="no-referrer">
            </div><p><figure><img
        
        loading="lazy"
        src="/assets/images/2021/05/pexels-photo-261621.jpeg"
        srcset="/assets/images/2021/05/pexels-photo-261621.jpeg, /assets/images/2021/05/pexels-photo-261621.jpeg 1.5x, /assets/images/2021/05/pexels-photo-261621.jpeg 2x"
        sizes="auto"
        alt="pexel photo"
        title="pexel photo" ></figure></p>
<p>Pourquoi utiliser <a href="https://fr.wikipedia.org/wiki/GNU_Privacy_Guard" target="_blank" rel="noopener noreferrer">GPG</a> ? Par exemple <a href="https://blog.touret.info/2019/08/09/verifier-les-commit-git-avec-gpg/" target="_blank" rel="noopener noreferrer">pour signer les commits GIT</a>. Maintenant comment faire quand on est sous Windows 10 et qu&rsquo;on souhaite utiliser <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener noreferrer">le sous syst√®me Linux (WSL2)</a>?</p>
<p>Sous GNU/Linux, l&rsquo;installation et l&rsquo;utilisation avec git est tr√®s simple. Avec <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener noreferrer">WSL2</a>,‚Ä¶ il faut un peu d&rsquo;huile de coude üôÇ</p>
<p>Je vais t√¢cher de d√©crire dans cet article les diff√©rentes manipulations n√©cessaires pour:</p>
<ul>
<li>Importer une cl√© GPG existante</li>
<li>Utiliser GPG pour signer mes commits dans WSL2</li>
</ul>
<h2 id="importer-une-cl√©-gpg-existante" class="headerLink">
    <a href="#importer-une-cl%c3%a9-gpg-existante" class="header-mark"></a>1 Importer une cl√© GPG existante</h2><h3 id="export-de-la-cl√©-gpg" class="headerLink">
    <a href="#export-de-la-cl%c3%a9-gpg" class="header-mark"></a>1.1 Export de la cl√© GPG</h3><h4 id="identifier-l-id-de-la-cl√©" class="headerLink">
    <a href="#identifier-l-id-de-la-cl%c3%a9" class="header-mark"></a>1.1.1 Identifier l&rsquo; ID de la cl√©</h4><p>Lancez la commande suivante:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg --export <span class="si">${</span><span class="nv">ID</span><span class="si">}</span> &gt; public.key
</span></span><span class="line"><span class="cl">gpg --export-secret-key <span class="si">${</span><span class="nv">ID</span><span class="si">}</span> &gt; private.key
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="import" class="headerLink">
    <a href="#import" class="header-mark"></a>1.2 Import</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg --import public.key
</span></span><span class="line"><span class="cl">gpg --import private.key
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="v√©rification" class="headerLink">
    <a href="#v%c3%a9rification" class="header-mark"></a>1.3 V√©rification</h3><p>Pour v√©rifier que la cl√© est bien configur√©e, vous pouvez lancer la commande suivante:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg --list-secret-keys --keyid-format LONG   alexandre@....
</span></span><span class="line"><span class="cl">sec   rsa4096/CLE_ID 2019-12-20 <span class="o">[</span>SC<span class="o">]</span>
</span></span><span class="line"><span class="cl">      ********************
</span></span><span class="line"><span class="cl">uid                <span class="o">[</span>  ultime <span class="o">]</span> Alexandre &lt;alexandre@....&gt;
</span></span><span class="line"><span class="cl">ssb   rsa4096/SUB 2019-12-20 <span class="o">[</span>E<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Si la cl√© n&rsquo;est pas reconnue comme ultime ou comme de confiance, il faudra l&rsquo;√©diter:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg --edit-key CLE_ID
</span></span><span class="line"><span class="cl">Please decide how far you trust this user to correctly verify other users<span class="s1">&#39; keys
</span></span></span><span class="line"><span class="cl"><span class="s1">(by looking at passports, checking fingerprints from different sources, etc.)
</span></span></span><span class="line"><span class="cl"><span class="s1">  1 = I don&#39;</span>t know or won<span class="err">&#39;</span>t say
</span></span><span class="line"><span class="cl">  <span class="nv">2</span> <span class="o">=</span> I <span class="k">do</span> NOT trust
</span></span><span class="line"><span class="cl">  <span class="nv">3</span> <span class="o">=</span> I trust marginally
</span></span><span class="line"><span class="cl">  <span class="nv">4</span> <span class="o">=</span> I trust fully
</span></span><span class="line"><span class="cl">  <span class="nv">5</span> <span class="o">=</span> I trust ultimately
</span></span><span class="line"><span class="cl">  <span class="nv">m</span> <span class="o">=</span> back to the main menu
</span></span><span class="line"><span class="cl">Your decision? 
</span></span></code></pre></td></tr></table>
</div>
</div><p>Si vous ne voulez pas trop vous compliquer, je vous conseille de r√©pondre <code>5</code>.</p>
<h2 id="configuration-gpg-pour-wsl2" class="headerLink">
    <a href="#configuration-gpg-pour-wsl2" class="header-mark"></a>2 Configuration GPG pour WSL2</h2><p>Avant de configurer l&rsquo;agent GPG, vous pouvez vous r√©f√©rer <a href="https://blog.touret.info/2019/08/09/verifier-les-commit-git-avec-gpg/" target="_blank" rel="noopener noreferrer">√† cet article</a> pour configurer GIT et GPG. La configuration est √©quivalente.</p>
<p>Ensuite, cr√©ez le fichier <code>~/.gnupg/gpg.conf</code> avec le contenu suivant:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Uncomment within config (or add this line)
</span></span><span class="line"><span class="cl"># This tells gpg to use the gpg-agent
</span></span><span class="line"><span class="cl">use-agent
</span></span><span class="line"><span class="cl"># Set the default key
</span></span><span class="line"><span class="cl">default-key CLE_ID
</span></span></code></pre></td></tr></table>
</div>
</div><p>Puis cr√©ez le fichier <code>~/.gnupg/gpg-agent.conf</code> avec le contenu ci-dessous:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">default-cache-ttl 34560000
</span></span><span class="line"><span class="cl">max-cache-ttl 34560000
</span></span><span class="line"><span class="cl">pinentry-program /usr/bin/pinentry-curses
</span></span></code></pre></td></tr></table>
</div>
</div><p>Le cache ici est d√©fini en secondes. Il est mis ici √† 400 jours.</p>
<p>Ce dernier fichier fait r√©f√©rence au programme <code>pinentry</code>. Vous pouvez v√©rifier sa pr√©sence gr√¢ce √† la commande:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls /usr/bin/pinentry-curses 
</span></span></code></pre></td></tr></table>
</div>
</div><p>Si vous ne l&rsquo;avez pas, vous pouvez l&rsquo;installer gr√¢ce √† la commande suivante:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install pinentry-curses
</span></span></code></pre></td></tr></table>
</div>
</div><p>Maintenant, on peut configurer l&rsquo;environnement BASH en modifiant le fichier <code>~/.bashrc</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># enable GPG signing</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GPG_TTY</span><span class="o">=</span><span class="k">$(</span>tty<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> ! -f ~/.gnupg/S.gpg-agent <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">eval</span> <span class="k">$(</span> gpg-agent --daemon --options ~/.gnupg/gpg-agent.conf <span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GPG_AGENT_INFO</span><span class="o">=</span><span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/.gnupg/S.gpg-agent:0:1
</span></span></code></pre></td></tr></table>
</div>
</div><p>Red√©marrez ensuite WSL2 pour que √ßa soit pris en compte.</p>
<p>A la premi√®re utilisation de GPG ( par ex. lors d&rsquo;un commit, vous aurez une interface <a href="https://fr.wikipedia.org/wiki/Ncurses" target="_blank" rel="noopener noreferrer">Ncurses</a> qui appara√Ætra dans votre prompt WSL2. Vous aurez √† renseigner le mot de passe de votre cl√©.</p>
]]></description></item></channel></rss>